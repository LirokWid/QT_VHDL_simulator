.TH "C:/Users/BJRODIER/Documents/QT_REPO/QT_VHDL_simulator/code/Ressources/SystemC/include/sysc/datatypes/int/sc_nbutils.h" 3 "VHDL simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/BJRODIER/Documents/QT_REPO/QT_VHDL_simulator/code/Ressources/SystemC/include/sysc/datatypes/int/sc_nbutils.h
.SH SYNOPSIS
.br
.PP
\fR#include <cmath>\fP
.br
\fR#include <limits>\fP
.br
\fR#include 'sysc/datatypes/bit/sc_bit_ids\&.h'\fP
.br
\fR#include 'sysc/datatypes/int/sc_int_ids\&.h'\fP
.br
\fR#include 'sysc/datatypes/int/sc_nbdefs\&.h'\fP
.br
\fR#include 'sysc/utils/sc_report\&.h'\fP
.br
\fR#include <ios>\fP
.br
\fR#include <ostream>\fP
.br

.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBsc_dt\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBsc_numrep\fP \fBsc_dt::sc_io_base\fP (::std::ostream &, \fBsc_numrep\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBsc_dt::sc_io_show_base\fP (::std::ostream &)"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBsc_dt::to_string\fP (\fBsc_numrep\fP)"
.br
.ti -1c
.RI "inline::std::ostream & \fBsc_dt::operator<<\fP (::std::ostream &\fBos\fP, \fBsc_numrep\fP \fBnumrep\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsmall_type\fP \fBsc_dt::fsm_move\fP (\fBchar\fP \fBc\fP, \fBsmall_type\fP &\fBb\fP, \fBsmall_type\fP &s, \fBsmall_type\fP &state)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBsc_dt::parse_binary_bits\fP (\fBconst\fP \fBchar\fP *\fBsrc_p\fP, int \fBdst_n\fP, \fBsc_digit\fP *\fBdata_p\fP, \fBsc_digit\fP *\fBctrl_p\fP=0)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBsc_dt::parse_hex_bits\fP (\fBconst\fP \fBchar\fP *\fBsrc_p\fP, int \fBdst_n\fP, \fBsc_digit\fP *\fBdata_p\fP, \fBsc_digit\fP *\fBctrl_p\fP=0)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBconst\fP \fBchar\fP * \fBsc_dt::get_base_and_sign\fP (\fBconst\fP \fBchar\fP *v, \fBsmall_type\fP &\fBbase\fP, \fBsmall_type\fP &sign)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsmall_type\fP \fBsc_dt::vec_from_str\fP (int \fBunb\fP, int \fBund\fP, \fBsc_digit\fP *\fBu\fP, \fBconst\fP \fBchar\fP *v, \fBsc_numrep\fP \fBbase\fP=\fBSC_NOBASE\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBsc_dt::vec_add\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP, int \fBvlen\fP, \fBconst\fP \fBsc_digit\fP *v, \fBsc_digit\fP *\fBw\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBsc_dt::vec_add_on\fP (int \fBulen\fP, \fBsc_digit\fP *\fBu\fP, int \fBvlen\fP, \fBconst\fP \fBsc_digit\fP *v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBsc_dt::vec_add_on2\fP (int \fBulen\fP, \fBsc_digit\fP *\fBu\fP, int \fBvlen\fP, \fBconst\fP \fBsc_digit\fP *v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBsc_dt::vec_add_small\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP, \fBsc_digit\fP v, \fBsc_digit\fP *\fBw\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBsc_dt::vec_add_small_on\fP (int \fBulen\fP, \fBsc_digit\fP *\fBu\fP, \fBsc_digit\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBsc_dt::vec_sub\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP, int \fBvlen\fP, \fBconst\fP \fBsc_digit\fP *v, \fBsc_digit\fP *\fBw\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBsc_dt::vec_sub_on\fP (int \fBulen\fP, \fBsc_digit\fP *\fBu\fP, int \fBvlen\fP, \fBconst\fP \fBsc_digit\fP *v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBsc_dt::vec_sub_on2\fP (int \fBulen\fP, \fBsc_digit\fP *\fBu\fP, int \fBvlen\fP, \fBconst\fP \fBsc_digit\fP *v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBsc_dt::vec_sub_small\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP, \fBsc_digit\fP v, \fBsc_digit\fP *\fBw\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBsc_dt::vec_sub_small_on\fP (int \fBulen\fP, \fBsc_digit\fP *\fBu\fP, \fBsc_digit\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBsc_dt::vec_mul\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP, int \fBvlen\fP, \fBconst\fP \fBsc_digit\fP *v, \fBsc_digit\fP *\fBw\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBsc_dt::vec_mul_small\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP, \fBsc_digit\fP v, \fBsc_digit\fP *\fBw\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBsc_dt::vec_mul_small_on\fP (int \fBulen\fP, \fBsc_digit\fP *\fBu\fP, \fBsc_digit\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBsc_dt::vec_div_large\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP, int \fBvlen\fP, \fBconst\fP \fBsc_digit\fP *v, \fBsc_digit\fP *\fBw\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBsc_dt::vec_div_small\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP, \fBsc_digit\fP v, \fBsc_digit\fP *\fBw\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBsc_dt::vec_rem_large\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP, int \fBvlen\fP, \fBconst\fP \fBsc_digit\fP *v, \fBsc_digit\fP *\fBw\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_digit\fP \fBsc_dt::vec_rem_small\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP, \fBsc_digit\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_digit\fP \fBsc_dt::vec_rem_on_small\fP (int \fBulen\fP, \fBsc_digit\fP *\fBu\fP, \fBsc_digit\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP int \fBsc_dt::vec_to_char\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP, int \fBvlen\fP, \fBuchar\fP *v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBsc_dt::vec_from_char\fP (int \fBulen\fP, \fBconst\fP \fBuchar\fP *\fBu\fP, int \fBvlen\fP, \fBsc_digit\fP *v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBsc_dt::vec_shift_left\fP (int \fBulen\fP, \fBsc_digit\fP *\fBu\fP, int \fBnsl\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBsc_dt::vec_shift_right\fP (int \fBvlen\fP, \fBsc_digit\fP *\fBu\fP, int \fBnsr\fP, \fBsc_digit\fP \fBfill\fP=0)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBsc_dt::vec_reverse\fP (int \fBunb\fP, int \fBund\fP, \fBsc_digit\fP *\fBud\fP, int \fBl\fP, int \fBr\fP=0)"
.br
.ti -1c
.RI "\fBsc_digit\fP \fBsc_dt::low_half\fP (\fBsc_digit\fP d)"
.br
.ti -1c
.RI "\fBsc_digit\fP \fBsc_dt::high_half\fP (\fBsc_digit\fP d)"
.br
.ti -1c
.RI "\fBsc_digit\fP \fBsc_dt::high_half_masked\fP (\fBsc_digit\fP d)"
.br
.ti -1c
.RI "\fBsc_digit\fP \fBsc_dt::concat\fP (\fBsc_digit\fP \fBh\fP, \fBsc_digit\fP \fBl\fP)"
.br
.ti -1c
.RI "\fBsc_digit\fP \fBsc_dt::one_and_ones\fP (int \fBn\fP)"
.br
.ti -1c
.RI "\fBsc_digit\fP \fBsc_dt::one_and_zeros\fP (int \fBn\fP)"
.br
.ti -1c
.RI "int \fBsc_dt::digit_ord\fP (int \fBi\fP)"
.br
.ti -1c
.RI "int \fBsc_dt::bit_ord\fP (int \fBi\fP)"
.br
.ti -1c
.RI "int \fBsc_dt::vec_cmp\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP, int \fBvlen\fP, \fBconst\fP \fBsc_digit\fP *v)"
.br
.ti -1c
.RI "int \fBsc_dt::vec_find_first_nonzero\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP)"
.br
.ti -1c
.RI "int \fBsc_dt::vec_skip_leading_zeros\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP)"
.br
.ti -1c
.RI "int \fBsc_dt::vec_skip_and_cmp\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP, int \fBvlen\fP, \fBconst\fP \fBsc_digit\fP *v)"
.br
.ti -1c
.RI "\fBvoid\fP \fBsc_dt::vec_zero\fP (int \fBfrom\fP, int \fBulen\fP, \fBsc_digit\fP *\fBu\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBsc_dt::vec_zero\fP (int \fBulen\fP, \fBsc_digit\fP *\fBu\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBsc_dt::vec_copy\fP (int \fBn\fP, \fBsc_digit\fP *\fBu\fP, \fBconst\fP \fBsc_digit\fP *v)"
.br
.ti -1c
.RI "\fBvoid\fP \fBsc_dt::vec_copy_and_zero\fP (int \fBulen\fP, \fBsc_digit\fP *\fBu\fP, int \fBvlen\fP, \fBconst\fP \fBsc_digit\fP *v)"
.br
.ti -1c
.RI "\fBvoid\fP \fBsc_dt::vec_complement\fP (int \fBulen\fP, \fBsc_digit\fP *\fBu\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBType\fP > \fBvoid\fP \fBsc_dt::from_uint\fP (int \fBulen\fP, \fBsc_digit\fP *\fBu\fP, \fBType\fP v)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBType\fP > \fBsmall_type\fP \fBsc_dt::get_sign\fP (\fBType\fP &\fBu\fP)"
.br
.ti -1c
.RI "\fBsmall_type\fP \fBsc_dt::mul_signs\fP (\fBsmall_type\fP \fBus\fP, \fBsmall_type\fP \fBvs\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBType\fP > \fBvoid\fP \fBsc_dt::div_by_zero\fP (\fBType\fP s)"
.br
.ti -1c
.RI "\fBsmall_type\fP \fBsc_dt::check_for_zero\fP (\fBsmall_type\fP s, int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBsc_dt::check_for_zero\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP)"
.br
.ti -1c
.RI "\fBsmall_type\fP \fBsc_dt::make_zero\fP (int \fBnd\fP, \fBsc_digit\fP *d)"
.br
.ti -1c
.RI "\fBvoid\fP \fBsc_dt::trim\fP (\fBsmall_type\fP \fBadded\fP, int \fBnb\fP, int \fBnd\fP, \fBsc_digit\fP *d)"
.br
.ti -1c
.RI "\fBvoid\fP \fBsc_dt::convert_SM_to_2C_trimmed\fP (\fBsmall_type\fP \fBadded\fP, \fBsmall_type\fP s, int \fBnb\fP, int \fBnd\fP, \fBsc_digit\fP *d)"
.br
.ti -1c
.RI "\fBvoid\fP \fBsc_dt::convert_SM_to_2C\fP (\fBsmall_type\fP s, int \fBnd\fP, \fBsc_digit\fP *d)"
.br
.ti -1c
.RI "\fBvoid\fP \fBsc_dt::trim_signed\fP (int \fBnb\fP, int \fBnd\fP, \fBsc_digit\fP *d)"
.br
.ti -1c
.RI "\fBsmall_type\fP \fBsc_dt::convert_signed_2C_to_SM\fP (int \fBnb\fP, int \fBnd\fP, \fBsc_digit\fP *d)"
.br
.ti -1c
.RI "\fBsmall_type\fP \fBsc_dt::convert_signed_SM_to_2C_to_SM\fP (\fBsmall_type\fP s, int \fBnb\fP, int \fBnd\fP, \fBsc_digit\fP *d)"
.br
.ti -1c
.RI "\fBvoid\fP \fBsc_dt::convert_signed_SM_to_2C_trimmed\fP (\fBsmall_type\fP s, int \fBnb\fP, int \fBnd\fP, \fBsc_digit\fP *d)"
.br
.ti -1c
.RI "\fBvoid\fP \fBsc_dt::convert_signed_SM_to_2C\fP (\fBsmall_type\fP s, int \fBnd\fP, \fBsc_digit\fP *d)"
.br
.ti -1c
.RI "\fBvoid\fP \fBsc_dt::trim_unsigned\fP (int \fBnb\fP, int \fBnd\fP, \fBsc_digit\fP *d)"
.br
.ti -1c
.RI "\fBsmall_type\fP \fBsc_dt::convert_unsigned_2C_to_SM\fP (int \fBnb\fP, int \fBnd\fP, \fBsc_digit\fP *d)"
.br
.ti -1c
.RI "\fBsmall_type\fP \fBsc_dt::convert_unsigned_SM_to_2C_to_SM\fP (\fBsmall_type\fP s, int \fBnb\fP, int \fBnd\fP, \fBsc_digit\fP *d)"
.br
.ti -1c
.RI "\fBvoid\fP \fBsc_dt::convert_unsigned_SM_to_2C_trimmed\fP (\fBsmall_type\fP s, int \fBnb\fP, int \fBnd\fP, \fBsc_digit\fP *d)"
.br
.ti -1c
.RI "\fBvoid\fP \fBsc_dt::convert_unsigned_SM_to_2C\fP (\fBsmall_type\fP s, int \fBnd\fP, \fBsc_digit\fP *d)"
.br
.ti -1c
.RI "\fBvoid\fP \fBsc_dt::copy_digits_signed\fP (\fBsmall_type\fP &\fBus\fP, int \fBunb\fP, int \fBund\fP, \fBsc_digit\fP *\fBud\fP, int \fBvnb\fP, int \fBvnd\fP, \fBconst\fP \fBsc_digit\fP *\fBvd\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBsc_dt::copy_digits_unsigned\fP (\fBsmall_type\fP &\fBus\fP, int \fBunb\fP, int \fBund\fP, \fBsc_digit\fP *\fBud\fP, int, int \fBvnd\fP, \fBconst\fP \fBsc_digit\fP *\fBvd\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBsc_dt::safe_set\fP (int \fBi\fP, \fBbool\fP v, \fBsc_digit\fP *d)"
.br
.ti -1c
.RI "\fBbool\fP \fBsc_dt::is_nan\fP (\fBdouble\fP v)"
.br
.ti -1c
.RI "\fBbool\fP \fBsc_dt::is_inf\fP (\fBdouble\fP v)"
.br
.ti -1c
.RI "\fBvoid\fP \fBsc_dt::is_bad_double\fP (\fBdouble\fP v)"
.br
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for VHDL simulator from the source code\&.
