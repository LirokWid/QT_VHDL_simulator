.TH "C:/Users/BJRODIER/Documents/QT_REPO/QT_VHDL_simulator/code/Ressources/SystemC/include/tlm_core/tlm_2/tlm_generic_payload/tlm_endian_conv.h" 3 "VHDL simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/BJRODIER/Documents/QT_REPO/QT_VHDL_simulator/code/Ressources/SystemC/include/tlm_core/tlm_2/tlm_generic_payload/tlm_endian_conv.h
.SH SYNOPSIS
.br
.PP
\fR#include 'tlm_core/tlm_2/tlm_generic_payload/tlm_gp\&.h'\fP
.br
\fR#include <cstring>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBtlm::tlm_endian_context_pool\fP"
.br
.ti -1c
.RI "class \fBtlm::tlm_endian_context\fP"
.br
.ti -1c
.RI "class \fBtlm::tlm_bool< D >\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBtlm\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#\fBdefine\fP \fBuchar\fP   \fBunsigned\fP \fBchar\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBtlm_endian_context\fP * \fBtlm::establish_context\fP (\fBtlm_generic_payload\fP *\fBtxn\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBtlm::copy_db0\fP (\fBuchar\fP *\fBsrc1\fP, \fBuchar\fP *\fBsrc2\fP, \fBuchar\fP *\fBdest1\fP, \fBuchar\fP *\fBdest2\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBtlm::copy_dbtrue0\fP (\fBuchar\fP *\fBsrc1\fP, \fBuchar\fP *, \fBuchar\fP *\fBdest1\fP, \fBuchar\fP *\fBdest2\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBtlm::copy_btrue0\fP (\fBuchar\fP *, \fBuchar\fP *, \fBuchar\fP *, \fBuchar\fP *\fBdest2\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBtlm::copy_b0\fP (\fBuchar\fP *, \fBuchar\fP *\fBsrc2\fP, \fBuchar\fP *, \fBuchar\fP *\fBdest2\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBtlm::copy_dbyb0\fP (\fBuchar\fP *\fBsrc1\fP, \fBuchar\fP *, \fBuchar\fP *\fBdest1\fP, \fBuchar\fP *\fBdest2\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBD\fP , \fBvoid\fP  COPY> \fBvoid\fP \fBtlm::loop_generic0\fP (int \fBnew_len\fP, int \fBnew_stream_width\fP, int \fBorig_stream_width\fP, int sizeof_databus, \fBsc_dt::uint64\fP \fBorig_start_address\fP, \fBsc_dt::uint64\fP \fBnew_start_address\fP, int \fBbe_length\fP, \fBuchar\fP *\fBie_data\fP, \fBuchar\fP *\fBie_be\fP, \fBuchar\fP *\fBhe_data\fP, \fBuchar\fP *\fBhe_be\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBDATAWORD\fP > \fBvoid\fP \fBtlm::tlm_from_hostendian_generic\fP (\fBtlm_generic_payload\fP *\fBtxn\fP, \fBunsigned\fP int sizeof_databus)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBDATAWORD\fP > \fBvoid\fP \fBtlm::tlm_to_hostendian_generic\fP (\fBtlm_generic_payload\fP *\fBtxn\fP, \fBunsigned\fP int sizeof_databus)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBD\fP > \fBvoid\fP \fBtlm::copy_d1\fP (\fBuchar\fP *\fBsrc1\fP, \fBuchar\fP *\fBsrc2\fP, \fBuchar\fP *\fBdest1\fP, \fBuchar\fP *\fBdest2\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBD\fP > \fBvoid\fP \fBtlm::copy_db1\fP (\fBuchar\fP *\fBsrc1\fP, \fBuchar\fP *\fBsrc2\fP, \fBuchar\fP *\fBdest1\fP, \fBuchar\fP *\fBdest2\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBD\fP > \fBvoid\fP \fBtlm::true_b1\fP (\fBuchar\fP *\fBsrc1\fP, \fBuchar\fP *\fBsrc2\fP, \fBuchar\fP *\fBdest1\fP, \fBuchar\fP *\fBdest2\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBD\fP > \fBvoid\fP \fBtlm::copy_b1\fP (\fBuchar\fP *\fBsrc1\fP, \fBuchar\fP *\fBsrc2\fP, \fBuchar\fP *\fBdest1\fP, \fBuchar\fP *\fBdest2\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBD\fP > \fBvoid\fP \fBtlm::copy_dbyb1\fP (\fBuchar\fP *\fBsrc1\fP, \fBuchar\fP *\fBsrc2\fP, \fBuchar\fP *\fBdest1\fP, \fBuchar\fP *\fBdest2\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBD\fP > \fBvoid\fP \fBtlm::copy_dbytrue1\fP (\fBuchar\fP *\fBsrc1\fP, \fBuchar\fP *\fBsrc2\fP, \fBuchar\fP *\fBdest1\fP, \fBuchar\fP *\fBdest2\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBD\fP > \fBvoid\fP \fBtlm::false_b1\fP (\fBuchar\fP *\fBdest1\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBD\fP > \fBvoid\fP \fBtlm::no_b1\fP (\fBuchar\fP *\fBdest1\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBD\fP , \fBvoid\fP  COPY, \fBvoid\fP  COPYuchar, \fBvoid\fP  FILLFALSE, \fBvoid\fP  FILLFALSEuchar> int \fBtlm::loop_word1\fP (int \fBbytes_left\fP, int \fBlen0\fP, int \fBlenN\fP, int sizeof_databus, \fBuchar\fP *\fBstart\fP, \fBuchar\fP *end, \fBuchar\fP *\fBsrc\fP, \fBuchar\fP *\fBbsrc\fP, \fBuchar\fP *\fBdest\fP, \fBuchar\fP *\fBbdest\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBDATAWORD\fP > \fBvoid\fP \fBtlm::tlm_from_hostendian_word\fP (\fBtlm_generic_payload\fP *\fBtxn\fP, \fBunsigned\fP int sizeof_databus)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBDATAWORD\fP > \fBvoid\fP \fBtlm::tlm_to_hostendian_word\fP (\fBtlm_generic_payload\fP *\fBtxn\fP, \fBunsigned\fP int sizeof_databus)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBD\fP > \fBvoid\fP \fBtlm::copy_d2\fP (\fBD\fP *\fBsrc1\fP, \fBD\fP *\fBsrc2\fP, \fBD\fP *\fBdest1\fP, \fBD\fP *\fBdest2\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBD\fP > \fBvoid\fP \fBtlm::copy_db2\fP (\fBD\fP *\fBsrc1\fP, \fBD\fP *\fBsrc2\fP, \fBD\fP *\fBdest1\fP, \fBD\fP *\fBdest2\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBD\fP > \fBvoid\fP \fBtlm::copy_dbyb2\fP (\fBD\fP *\fBsrc1\fP, \fBD\fP *\fBsrc2\fP, \fBD\fP *\fBdest1\fP, \fBD\fP *\fBdest2\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBD\fP , \fBvoid\fP  COPY> \fBvoid\fP \fBtlm::loop_aligned2\fP (\fBD\fP *\fBsrc1\fP, \fBD\fP *\fBsrc2\fP, \fBD\fP *\fBdest1\fP, \fBD\fP *\fBdest2\fP, int \fBwords\fP, int \fBwords_per_bus\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBDATAWORD\fP > \fBvoid\fP \fBtlm::tlm_from_hostendian_aligned\fP (\fBtlm_generic_payload\fP *\fBtxn\fP, \fBunsigned\fP int sizeof_databus)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBDATAWORD\fP > \fBvoid\fP \fBtlm::tlm_to_hostendian_aligned\fP (\fBtlm_generic_payload\fP *\fBtxn\fP, \fBunsigned\fP int sizeof_databus)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBDATAWORD\fP > \fBvoid\fP \fBtlm::tlm_from_hostendian_single\fP (\fBtlm_generic_payload\fP *\fBtxn\fP, \fBunsigned\fP int sizeof_databus)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBDATAWORD\fP > \fBvoid\fP \fBtlm::tlm_to_hostendian_single\fP (\fBtlm_generic_payload\fP *\fBtxn\fP, \fBunsigned\fP int sizeof_databus)"
.br
.ti -1c
.RI "\fBvoid\fP \fBtlm::tlm_from_hostendian\fP (\fBtlm_generic_payload\fP *\fBtxn\fP)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#\fBdefine\fP uchar   \fBunsigned\fP \fBchar\fP"

.SH "Author"
.PP 
Generated automatically by Doxygen for VHDL simulator from the source code\&.
