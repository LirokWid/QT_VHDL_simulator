.TH "tlm_utils::multi_passthrough_initiator_socket< MODULE, BUSWIDTH, TYPES, N, POL >" 3 "VHDL simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
tlm_utils::multi_passthrough_initiator_socket< MODULE, BUSWIDTH, TYPES, N, POL >
.SH SYNOPSIS
.br
.PP
.PP
\fR#include <multi_passthrough_initiator_socket\&.h>\fP
.PP
Inherits \fBtlm_utils::multi_init_base< BUSWIDTH, TYPES, N, POL >\fP\&.
.PP
Inherited by \fBtlm_utils::multi_passthrough_initiator_socket_optional< MODULE, BUSWIDTH, TYPES, N >\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "\fBtypedef\fP TYPES::tlm_payload_type \fBtransaction_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP TYPES::tlm_phase_type \fBphase_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBtlm::tlm_sync_enum\fP \fBsync_enum_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBsync_enum_type\fP(MODULE::* \fBnb_cb\fP) (int, \fBtransaction_type\fP &, \fBphase_type\fP &, \fBsc_core::sc_time\fP &)"
.br
.ti -1c
.RI "\fBtypedef\fP \fBvoid\fP(MODULE::* \fBdmi_cb\fP) (int, \fBsc_dt::uint64\fP, \fBsc_dt::uint64\fP)"
.br
.ti -1c
.RI "\fBtypedef\fP \fBmulti_init_base\fP< \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP > \fBbase_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBbase_type::base_target_socket_type\fP \fBbase_target_socket_type\fP"
.br
.in -1c

Public Types inherited from \fBtlm_utils::multi_init_base< BUSWIDTH, TYPES, N, POL >\fP
.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBtlm::tlm_initiator_socket\fP< \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP > \fBbase_type\fP"
.br
.in -1c

Public Types inherited from \fBtlm::tlm_base_initiator_socket< BUSWIDTH, FW_IF, BW_IF, N, POL >\fP
.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBFW_IF\fP \fBfw_interface_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBBW_IF\fP \fBbw_interface_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBsc_core::sc_port\fP< \fBfw_interface_type\fP, \fBN\fP, \fBPOL\fP > \fBport_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBsc_core::sc_export\fP< \fBbw_interface_type\fP > \fBexport_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBtlm_base_target_socket_b\fP< \fBBUSWIDTH\fP, \fBfw_interface_type\fP, \fBbw_interface_type\fP > \fBbase_target_socket_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBtlm_base_initiator_socket_b\fP< \fBBUSWIDTH\fP, \fBfw_interface_type\fP, \fBbw_interface_type\fP > \fBbase_type\fP"
.br
.in -1c

Public Types inherited from \fBsc_core::sc_port_b< IF >\fP
.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBsc_port_base\fP \fBbase_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBsc_port_b\fP< \fBIF\fP > \fBthis_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBthis_type\fP \fBport_type\fP"
.br
.in -1c

Public Types inherited from \fBsc_core::sc_port_base\fP
.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBsc_port_base\fP \fBthis_type\fP"
.br
.in -1c

Public Types inherited from \fBsc_core::sc_object\fP
.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBunsigned\fP \fBphase_cb_mask\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBmulti_passthrough_initiator_socket\fP (\fBconst\fP \fBchar\fP *\fBname\fP=\fBdefault_name\fP())"
.br
.ti -1c
.RI "\fB~multi_passthrough_initiator_socket\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBregister_nb_transport_bw\fP (\fBMODULE\fP *\fBmod\fP, \fBsync_enum_type\fP(MODULE::*cb)(int, \fBtransaction_type\fP &, \fBphase_type\fP &, \fBsc_core::sc_time\fP &))"
.br
.ti -1c
.RI "\fBvoid\fP \fBregister_invalidate_direct_mem_ptr\fP (\fBMODULE\fP *\fBmod\fP, \fBvoid\fP(MODULE::*cb)(int, \fBsc_dt::uint64\fP, \fBsc_dt::uint64\fP))"
.br
.ti -1c
.RI "\fBvirtual\fP \fBtlm::tlm_bw_transport_if\fP< \fBTYPES\fP > & \fBget_base_interface\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP \fBtlm::tlm_bw_transport_if\fP< \fBTYPES\fP > & \fBget_base_interface\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_core::sc_export\fP< \fBtlm::tlm_bw_transport_if\fP< \fBTYPES\fP > > & \fBget_base_export\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP \fBsc_core::sc_export\fP< \fBtlm::tlm_bw_transport_if\fP< \fBTYPES\fP > > & \fBget_base_export\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBbind\fP (\fBbase_target_socket_type\fP &s)"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator()\fP (\fBbase_target_socket_type\fP &s)"
.br
.ti -1c
.RI "\fBvoid\fP \fBbefore_end_of_elaboration\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBbind\fP (\fBbase_type\fP &s)"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator()\fP (\fBbase_type\fP &s)"
.br
.ti -1c
.RI "\fBtlm::tlm_fw_transport_if\fP< \fBTYPES\fP > * \fBoperator[]\fP (int \fBi\fP)"
.br
.ti -1c
.RI "\fBunsigned\fP int \fBsize\fP ()"
.br
.in -1c

Public Member Functions inherited from \fBtlm_utils::multi_init_base< BUSWIDTH, TYPES, N, POL >\fP
.in +1c
.ti -1c
.RI "\fBvirtual\fP \fBtlm::tlm_socket_category\fP \fBget_socket_category\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fB~multi_init_base\fP ()"
.br
.ti -1c
.RI "\fBmulti_init_base\fP ()"
.br
.ti -1c
.RI "\fBmulti_init_base\fP (\fBconst\fP \fBchar\fP *\fBname\fP)"
.br
.in -1c

Public Member Functions inherited from \fBtlm::tlm_initiator_socket< BUSWIDTH, TYPES, N, POL >\fP
.in +1c
.ti -1c
.RI "\fBtlm_initiator_socket\fP ()"
.br
.ti -1c
.RI "\fBtlm_initiator_socket\fP (\fBconst\fP \fBchar\fP *\fBname\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP \fBchar\fP * \fBkind\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_core::sc_type_index\fP \fBget_protocol_types\fP () \fBconst\fP"
.br
.in -1c

Public Member Functions inherited from \fBtlm::tlm_base_initiator_socket< BUSWIDTH, FW_IF, BW_IF, N, POL >\fP
.in +1c
.ti -1c
.RI "\fBtlm_base_initiator_socket\fP ()"
.br
.ti -1c
.RI "\fBtlm_base_initiator_socket\fP (\fBconst\fP \fBchar\fP *\fBname\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator()\fP (\fBbase_target_socket_type\fP &s)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBbind\fP (\fBbase_type\fP &s)"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator()\fP (\fBbase_type\fP &s)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBbind\fP (\fBbw_interface_type\fP &\fBifs\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator()\fP (\fBbw_interface_type\fP &s)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_core::sc_port_base\fP & \fBget_port_base\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_core::sc_port_base\fP \fBconst\fP & \fBget_port_base\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_core::sc_export_base\fP & \fBget_export_base\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_core::sc_export_base\fP \fBconst\fP & \fBget_export_base\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBunsigned\fP int \fBget_bus_width\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_core::sc_port_b\fP< \fBFW_IF\fP > & \fBget_base_port\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_core::sc_port_b\fP< \fBFW_IF\fP > \fBconst\fP & \fBget_base_port\fP () \fBconst\fP"
.br
.in -1c

Public Member Functions inherited from \fBtlm::tlm_base_initiator_socket_b< BUSWIDTH, FW_IF, BW_IF >\fP
.in +1c
.ti -1c
.RI "\fBvirtual\fP \fB~tlm_base_initiator_socket_b\fP ()"
.br
.in -1c

Public Member Functions inherited from \fBsc_core::sc_port< IF, N, P >\fP
.in +1c
.ti -1c
.RI "\fBsc_port\fP ()"
.br
.ti -1c
.RI "\fBsc_port\fP (\fBconst\fP \fBchar\fP *\fBname_\fP)"
.br
.ti -1c
.RI "\fBsc_port\fP (\fBIF\fP &\fBinterface_\fP)"
.br
.ti -1c
.RI "\fBsc_port\fP (\fBconst\fP \fBchar\fP *\fBname_\fP, \fBIF\fP &\fBinterface_\fP)"
.br
.ti -1c
.RI "\fBsc_port\fP (\fBbase_type\fP &\fBparent_\fP)"
.br
.ti -1c
.RI "\fBsc_port\fP (\fBconst\fP \fBchar\fP *\fBname_\fP, \fBbase_type\fP &\fBparent_\fP)"
.br
.ti -1c
.RI "\fBsc_port\fP (\fBthis_type\fP &\fBparent_\fP)"
.br
.ti -1c
.RI "\fBsc_port\fP (\fBconst\fP \fBchar\fP *\fBname_\fP, \fBthis_type\fP &\fBparent_\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fB~sc_port\fP ()"
.br
.in -1c

Public Member Functions inherited from \fBsc_core::sc_port_b< IF >\fP
.in +1c
.ti -1c
.RI "\fBSC_VIRTUAL_\fP \fBvoid\fP \fBbind\fP (\fBIF\fP &\fBinterface_\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator()\fP (\fBIF\fP &\fBinterface_\fP)"
.br
.ti -1c
.RI "\fBSC_VIRTUAL_\fP \fBvoid\fP \fBbind\fP (\fBport_type\fP &\fBparent_\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator()\fP (\fBport_type\fP &\fBparent_\fP)"
.br
.ti -1c
.RI "int \fBsize\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBIF\fP * \fBoperator\->\fP ()"
.br
.ti -1c
.RI "\fBconst\fP \fBIF\fP * \fBoperator\->\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBIF\fP * \fBget_interface\fP (int \fBiface_i\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBIF\fP * \fBget_interface\fP (int \fBiface_i\fP)"
.br
.ti -1c
.RI "\fBIF\fP * \fBoperator[]\fP (int \fBindex_\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBIF\fP * \fBoperator[]\fP (int \fBindex_\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_interface\fP * \fBget_interface\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP \fBsc_interface\fP * \fBget_interface\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_type_index\fP \fBget_interface_type\fP () \fBconst\fP"
.br
.in -1c

Public Member Functions inherited from \fBsc_core::sc_port_base\fP
.in +1c
.ti -1c
.RI "int \fBbind_count\fP ()"
.br
.in -1c

Public Member Functions inherited from \fBsc_core::sc_object\fP
.in +1c
.ti -1c
.RI "\fBconst\fP \fBchar\fP * \fBname\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBchar\fP * \fBbasename\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBprint\fP (::std::ostream &\fBos\fP=::std::cout) \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBdump\fP (::std::ostream &\fBos\fP=::std::cout) \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBtrace\fP (\fBsc_trace_file\fP *tf) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_simcontext\fP * \fBsimcontext\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBadd_attribute\fP (\fBsc_attr_base\fP &)"
.br
.ti -1c
.RI "\fBsc_attr_base\fP * \fBget_attribute\fP (\fBconst\fP std::string &\fBname_\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_attr_base\fP * \fBget_attribute\fP (\fBconst\fP std::string &\fBname_\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_attr_base\fP * \fBremove_attribute\fP (\fBconst\fP std::string &\fBname_\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBremove_all_attributes\fP ()"
.br
.ti -1c
.RI "int \fBnum_attributes\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_attr_cltn\fP & \fBattr_cltn\fP ()"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_attr_cltn\fP & \fBattr_cltn\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP std::vector< \fBsc_event\fP * > & \fBget_child_events\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP std::vector< \fBsc_object\fP * > & \fBget_child_objects\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_object\fP * \fBget_parent\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_object\fP * \fBget_parent_object\fP () \fBconst\fP"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "\fBstatic\fP \fBconst\fP \fBchar\fP * \fBdefault_name\fP ()"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBbase_type\fP * \fBget_hierarch_bind\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBdisable_cb_bind\fP ()"
.br
.ti -1c
.RI "std::vector< \fBcallback_binder_bw\fP< \fBTYPES\fP > * > & \fBget_binders\fP ()"
.br
.ti -1c
.RI "std::vector< \fBtlm::tlm_fw_transport_if\fP< \fBTYPES\fP > * > & \fBget_sockets\fP ()"
.br
.in -1c

Protected Member Functions inherited from \fBtlm::tlm_base_socket_if\fP
.in +1c
.ti -1c
.RI "\fBvirtual\fP \fB~tlm_base_socket_if\fP ()"
.br
.in -1c

Protected Member Functions inherited from \fBsc_core::sc_port_b< IF >\fP
.in +1c
.ti -1c
.RI "\fBsc_port_b\fP (int \fBmax_size_\fP, \fBsc_port_policy\fP policy=\fBSC_ONE_OR_MORE_BOUND\fP)"
.br
.ti -1c
.RI "\fBsc_port_b\fP (\fBconst\fP \fBchar\fP *\fBname_\fP, int \fBmax_size_\fP, \fBsc_port_policy\fP policy=\fBSC_ONE_OR_MORE_BOUND\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fB~sc_port_b\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP int \fBvbind\fP (\fBsc_interface\fP &)"
.br
.ti -1c
.RI "\fBvirtual\fP int \fBvbind\fP (\fBsc_port_base\fP &)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBmake_sensitive\fP (\fBsc_thread_handle\fP, \fBsc_event_finder\fP *=0) \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBmake_sensitive\fP (\fBsc_method_handle\fP, \fBsc_event_finder\fP *=0) \fBconst\fP"
.br
.in -1c

Protected Member Functions inherited from \fBsc_core::sc_port_base\fP
.in +1c
.ti -1c
.RI "\fBsc_port_base\fP (int \fBmax_size_\fP, \fBsc_port_policy\fP policy=\fBSC_ONE_OR_MORE_BOUND\fP)"
.br
.ti -1c
.RI "\fBsc_port_base\fP (\fBconst\fP \fBchar\fP *\fBname_\fP, int \fBmax_size_\fP, \fBsc_port_policy\fP policy=\fBSC_ONE_OR_MORE_BOUND\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fB~sc_port_base\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBbind\fP (\fBsc_interface\fP &\fBinterface_\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBbind\fP (\fBthis_type\fP &\fBparent_\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBend_of_elaboration\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBstart_of_simulation\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBend_of_simulation\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBreport_error\fP (\fBconst\fP \fBchar\fP *id, \fBconst\fP \fBchar\fP *\fBadd_msg\fP=0) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBadd_static_event\fP (\fBsc_method_handle\fP \fBprocess_p\fP, \fBconst\fP \fBsc_event\fP &event) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBadd_static_event\fP (\fBsc_thread_handle\fP \fBprocess_p\fP, \fBconst\fP \fBsc_event\fP &event) \fBconst\fP"
.br
.in -1c

Protected Member Functions inherited from \fBsc_core::sc_object\fP
.in +1c
.ti -1c
.RI "\fBsc_object\fP ()"
.br
.ti -1c
.RI "\fBsc_object\fP (\fBconst\fP \fBchar\fP *\fBnm\fP)"
.br
.ti -1c
.RI "\fBsc_object\fP (\fBconst\fP \fBsc_object\fP &)"
.br
.ti -1c
.RI "\fBsc_object\fP & \fBoperator=\fP (\fBconst\fP \fBsc_object\fP &)"
.br
.ti -1c
.RI "\fBvirtual\fP \fB~sc_object\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBadd_child_event\fP (\fBsc_event\fP *\fBevent_p\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBadd_child_object\fP (\fBsc_object\fP *\fBobject_p\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBbool\fP \fBremove_child_event\fP (\fBsc_event\fP *\fBevent_p\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBbool\fP \fBremove_child_object\fP (\fBsc_object\fP *\fBobject_p\fP)"
.br
.ti -1c
.RI "\fBphase_cb_mask\fP \fBregister_simulation_phase_callback\fP (\fBphase_cb_mask\fP)"
.br
.ti -1c
.RI "\fBphase_cb_mask\fP \fBunregister_simulation_phase_callback\fP (\fBphase_cb_mask\fP)"
.br
.in -1c

Protected Member Functions inherited from \fBtlm_utils::multi_init_base_if< TYPES >\fP
.in +1c
.ti -1c
.RI "\fBvirtual\fP \fB~multi_init_base_if\fP ()"
.br
.in -1c

Protected Member Functions inherited from \fBtlm_utils::convenience_socket_base\fP
.in +1c
.ti -1c
.RI "\fBvirtual\fP \fB~convenience_socket_base\fP ()"
.br
.in -1c
.in +1c
.ti -1c
.RI "\fBvoid\fP \fBdisplay_warning\fP (\fBconst\fP \fBchar\fP *msg) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBdisplay_error\fP (\fBconst\fP \fBchar\fP *msg) \fBconst\fP"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "std::vector< \fBtlm::tlm_fw_transport_if\fP< \fBTYPES\fP > * > \fBm_sockets\fP"
.br
.ti -1c
.RI "std::vector< \fBtlm::tlm_fw_transport_if\fP< \fBTYPES\fP > * > \fBm_used_sockets\fP"
.br
.ti -1c
.RI "std::vector< \fBcallback_binder_bw\fP< \fBTYPES\fP > * > \fBm_binders\fP"
.br
.ti -1c
.RI "\fBbase_type\fP * \fBm_hierarch_bind\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBm_beoe_disabled\fP"
.br
.ti -1c
.RI "\fBcallback_binder_bw\fP< \fBTYPES\fP > \fBm_dummy\fP"
.br
.ti -1c
.RI "\fBcallback_binder_bw\fP< \fBTYPES\fP >::nb_func_type \fBm_nb_f\fP"
.br
.ti -1c
.RI "\fBcallback_binder_bw\fP< \fBTYPES\fP >::dmi_func_type \fBm_dmi_f\fP"
.br
.in -1c

Protected Attributes inherited from \fBtlm::tlm_base_initiator_socket< BUSWIDTH, FW_IF, BW_IF, N, POL >\fP
.in +1c
.ti -1c
.RI "\fBexport_type\fP \fBm_export\fP"
.br
.in -1c

Protected Attributes inherited from \fBsc_core::sc_port_base\fP
.in +1c
.ti -1c
.RI "\fBsc_bind_info\fP * \fBm_bind_info\fP"
.br
.in -1c
.SH "Member Typedef Documentation"
.PP 
.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBtypedef\fP \fBbase_type::base_target_socket_type\fP \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::base_target_socket_type"

.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBtypedef\fP \fBmulti_init_base\fP<\fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP> \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::base_type"

.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBtypedef\fP \fBvoid\fP(MODULE::* \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::dmi_cb) (int, \fBsc_dt::uint64\fP, \fBsc_dt::uint64\fP)"

.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBtypedef\fP \fBsync_enum_type\fP(MODULE::* \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::nb_cb) (int, \fBtransaction_type\fP &, \fBphase_type\fP &, \fBsc_core::sc_time\fP &)"

.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBtypedef\fP TYPES::tlm_phase_type \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::phase_type"

.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBtypedef\fP \fBtlm::tlm_sync_enum\fP \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::sync_enum_type"

.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBtypedef\fP TYPES::tlm_payload_type \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::transaction_type"

.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::multi_passthrough_initiator_socket (\fBconst\fP \fBchar\fP * name = \fR\fBdefault_name\fP()\fP)\fR [inline]\fP, \fR [explicit]\fP"

.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::~\fBmulti_passthrough_initiator_socket\fP ()\fR [inline]\fP"

.SH "Member Function Documentation"
.PP 
.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvoid\fP \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::before_end_of_elaboration ()\fR [inline]\fP, \fR [virtual]\fP"

.PP
Reimplemented from \fBsc_core::sc_port_base\fP\&.
.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvirtual\fP \fBvoid\fP \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::bind (\fBbase_target_socket_type\fP & s)\fR [inline]\fP, \fR [virtual]\fP"

.PP
Reimplemented from \fBtlm::tlm_base_initiator_socket< BUSWIDTH, FW_IF, BW_IF, N, POL >\fP\&.
.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvirtual\fP \fBvoid\fP \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::bind (\fBbase_type\fP & s)\fR [inline]\fP, \fR [virtual]\fP"

.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBstatic\fP \fBconst\fP \fBchar\fP * \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::default_name ()\fR [inline]\fP, \fR [static]\fP"

.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvoid\fP \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::disable_cb_bind ()\fR [inline]\fP, \fR [protected]\fP, \fR [virtual]\fP"

.PP
Implements \fBtlm_utils::multi_init_base< BUSWIDTH, TYPES, N, POL >\fP\&.
.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvirtual\fP \fBsc_core::sc_export\fP< \fBtlm::tlm_bw_transport_if\fP< \fBTYPES\fP > > & \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::get_base_export ()\fR [inline]\fP, \fR [virtual]\fP"

.PP
Reimplemented from \fBtlm::tlm_base_initiator_socket< BUSWIDTH, FW_IF, BW_IF, N, POL >\fP\&.
.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvirtual\fP \fBconst\fP \fBsc_core::sc_export\fP< \fBtlm::tlm_bw_transport_if\fP< \fBTYPES\fP > > & \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::get_base_export () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Reimplemented from \fBtlm::tlm_base_initiator_socket< BUSWIDTH, FW_IF, BW_IF, N, POL >\fP\&.
.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvirtual\fP \fBtlm::tlm_bw_transport_if\fP< \fBTYPES\fP > & \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::get_base_interface ()\fR [inline]\fP, \fR [virtual]\fP"

.PP
Reimplemented from \fBtlm::tlm_base_initiator_socket< BUSWIDTH, FW_IF, BW_IF, N, POL >\fP\&.
.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvirtual\fP \fBconst\fP \fBtlm::tlm_bw_transport_if\fP< \fBTYPES\fP > & \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::get_base_interface () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Reimplemented from \fBtlm::tlm_base_initiator_socket< BUSWIDTH, FW_IF, BW_IF, N, POL >\fP\&.
.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> std::vector< \fBcallback_binder_bw\fP< \fBTYPES\fP > * > & \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::get_binders ()\fR [inline]\fP, \fR [protected]\fP, \fR [virtual]\fP"

.PP
Implements \fBtlm_utils::multi_init_base_if< TYPES >\fP\&.
.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBbase_type\fP * \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::get_hierarch_bind ()\fR [inline]\fP, \fR [protected]\fP, \fR [virtual]\fP"

.PP
Implements \fBtlm_utils::multi_init_base< BUSWIDTH, TYPES, N, POL >\fP\&.
.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> std::vector< \fBtlm::tlm_fw_transport_if\fP< \fBTYPES\fP > * > & \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::get_sockets ()\fR [inline]\fP, \fR [protected]\fP, \fR [virtual]\fP"

.PP
Implements \fBtlm_utils::multi_init_base_if< TYPES >\fP\&.
.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvoid\fP \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >\fB::operator\fP() (\fBbase_target_socket_type\fP & s)\fR [inline]\fP"

.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvoid\fP \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >\fB::operator\fP() (\fBbase_type\fP & s)\fR [inline]\fP"

.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBtlm::tlm_fw_transport_if\fP< \fBTYPES\fP > * \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >\fB::operator\fP[] (int i)\fR [inline]\fP"

.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvoid\fP \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::register_invalidate_direct_mem_ptr (\fBMODULE\fP * mod, \fBvoid\fP(MODULE::*)(int, \fBsc_dt::uint64\fP, \fBsc_dt::uint64\fP) cb)\fR [inline]\fP"

.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvoid\fP \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::register_nb_transport_bw (\fBMODULE\fP * mod, \fBsync_enum_type\fP(MODULE::*)(int, \fBtransaction_type\fP &, \fBphase_type\fP &, \fBsc_core::sc_time\fP &) cb)\fR [inline]\fP"

.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBunsigned\fP int \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::size ()\fR [inline]\fP"

.SH "Member Data Documentation"
.PP 
.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBbool\fP \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::m_beoe_disabled\fR [protected]\fP"

.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> std::vector<\fBcallback_binder_bw\fP<\fBTYPES\fP>*> \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::m_binders\fR [protected]\fP"

.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBcallback_binder_bw\fP<\fBTYPES\fP>::dmi_func_type \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::m_dmi_f\fR [protected]\fP"

.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBcallback_binder_bw\fP<\fBTYPES\fP> \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::m_dummy\fR [protected]\fP"

.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBbase_type\fP* \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::m_hierarch_bind\fR [protected]\fP"

.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBcallback_binder_bw\fP<\fBTYPES\fP>::nb_func_type \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::m_nb_f\fR [protected]\fP"

.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> std::vector<\fBtlm::tlm_fw_transport_if\fP<\fBTYPES\fP>*> \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::m_sockets\fR [protected]\fP"

.SS "template<\fBtypename\fP \fBMODULE\fP , \fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> std::vector<\fBtlm::tlm_fw_transport_if\fP<\fBTYPES\fP>*> \fBtlm_utils::multi_passthrough_initiator_socket\fP< \fBMODULE\fP, \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::m_used_sockets\fR [protected]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for VHDL simulator from the source code\&.
