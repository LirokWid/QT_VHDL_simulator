.TH "tlm_utils::multi_target_base< BUSWIDTH, TYPES, N, POL >" 3 "VHDL simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
tlm_utils::multi_target_base< BUSWIDTH, TYPES, N, POL >
.SH SYNOPSIS
.br
.PP
.PP
\fR#include <multi_socket_bases\&.h>\fP
.PP
Inherits \fBtlm::tlm_target_socket< BUSWIDTH, TYPES, N, POL >\fP, \fBtlm_utils::multi_target_base_if< TYPES >\fP, and \fBtlm_utils::multi_socket_base\fP\&.
.PP
Inherited by \fBtlm_utils::multi_passthrough_target_socket< MODULE, 32, tlm::tlm_base_protocol_types, 0, sc_core::SC_ZERO_OR_MORE_BOUND >\fP, and \fBtlm_utils::multi_passthrough_target_socket< MODULE, BUSWIDTH, TYPES, N, POL >\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBtlm::tlm_target_socket\fP< \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP > \fBbase_type\fP"
.br
.in -1c

Public Types inherited from \fBtlm::tlm_base_target_socket< BUSWIDTH, FW_IF, BW_IF, N, POL >\fP
.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBFW_IF\fP \fBfw_interface_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBBW_IF\fP \fBbw_interface_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBsc_core::sc_port\fP< \fBbw_interface_type\fP, \fBN\fP, \fBPOL\fP > \fBport_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBsc_core::sc_export\fP< \fBfw_interface_type\fP > \fBexport_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBtlm_base_initiator_socket_b\fP< \fBBUSWIDTH\fP, \fBfw_interface_type\fP, \fBbw_interface_type\fP > \fBbase_initiator_socket_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBtlm_base_target_socket_b\fP< \fBBUSWIDTH\fP, \fBfw_interface_type\fP, \fBbw_interface_type\fP > \fBbase_type\fP"
.br
.in -1c

Public Types inherited from \fBsc_core::sc_export_base\fP
.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBsc_export_base\fP \fBthis_type\fP"
.br
.in -1c

Public Types inherited from \fBsc_core::sc_object\fP
.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBunsigned\fP \fBphase_cb_mask\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBvirtual\fP \fBmulti_target_base\fP * \fBget_hierarch_bind\fP ()=0"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBset_hierarch_bind\fP (\fBmulti_target_base\fP *)=0"
.br
.ti -1c
.RI "\fBvirtual\fP \fBtlm::tlm_socket_category\fP \fBget_socket_category\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fB~multi_target_base\fP ()"
.br
.ti -1c
.RI "\fBmulti_target_base\fP ()"
.br
.ti -1c
.RI "\fBmulti_target_base\fP (\fBconst\fP \fBchar\fP *\fBname\fP)"
.br
.in -1c

Public Member Functions inherited from \fBtlm::tlm_target_socket< BUSWIDTH, TYPES, N, POL >\fP
.in +1c
.ti -1c
.RI "\fBtlm_target_socket\fP ()"
.br
.ti -1c
.RI "\fBtlm_target_socket\fP (\fBconst\fP \fBchar\fP *\fBname\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP \fBchar\fP * \fBkind\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_core::sc_type_index\fP \fBget_protocol_types\fP () \fBconst\fP"
.br
.in -1c

Public Member Functions inherited from \fBtlm::tlm_base_target_socket< BUSWIDTH, FW_IF, BW_IF, N, POL >\fP
.in +1c
.ti -1c
.RI "\fBtlm_base_target_socket\fP ()"
.br
.ti -1c
.RI "\fBtlm_base_target_socket\fP (\fBconst\fP \fBchar\fP *\fBname\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBbind\fP (\fBbase_initiator_socket_type\fP &s)"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator()\fP (\fBbase_initiator_socket_type\fP &s)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBbind\fP (\fBbase_type\fP &s)"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator()\fP (\fBbase_type\fP &s)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBbind\fP (\fBfw_interface_type\fP &\fBifs\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator()\fP (\fBfw_interface_type\fP &s)"
.br
.ti -1c
.RI "int \fBsize\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbw_interface_type\fP * \fBoperator\->\fP ()"
.br
.ti -1c
.RI "\fBbw_interface_type\fP * \fBoperator[]\fP (int \fBi\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_core::sc_port_base\fP & \fBget_port_base\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_core::sc_port_base\fP \fBconst\fP & \fBget_port_base\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_core::sc_export_base\fP & \fBget_export_base\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_core::sc_export_base\fP \fBconst\fP & \fBget_export_base\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBunsigned\fP int \fBget_bus_width\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_core::sc_port_b\fP< \fBBW_IF\fP > & \fBget_base_port\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_core::sc_port_b\fP< \fBBW_IF\fP > \fBconst\fP & \fBget_base_port\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBFW_IF\fP & \fBget_base_interface\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBFW_IF\fP \fBconst\fP & \fBget_base_interface\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_core::sc_export\fP< \fBFW_IF\fP > & \fBget_base_export\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_core::sc_export\fP< \fBFW_IF\fP > \fBconst\fP & \fBget_base_export\fP () \fBconst\fP"
.br
.in -1c

Public Member Functions inherited from \fBtlm::tlm_base_target_socket_b< BUSWIDTH, FW_IF, BW_IF >\fP
.in +1c
.ti -1c
.RI "\fBvirtual\fP \fB~tlm_base_target_socket_b\fP ()"
.br
.in -1c

Public Member Functions inherited from \fBsc_core::sc_export< IF >\fP
.in +1c
.ti -1c
.RI "\fBsc_export\fP ()"
.br
.ti -1c
.RI "\fBsc_export\fP (\fBconst\fP \fBchar\fP *\fBname_\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fB~sc_export\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_interface\fP * \fBget_interface\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP \fBsc_interface\fP * \fBget_interface\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBIF\fP * \fBoperator\->\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBIF\fP * \fBoperator\->\fP ()"
.br
.ti -1c
.RI "\fBoperator IF &\fP ()"
.br
.ti -1c
.RI "\fBoperator const IF &\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBSC_VIRTUAL_\fP \fBvoid\fP \fBbind\fP (\fBIF\fP &\fBinterface_\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator()\fP (\fBIF\fP &\fBinterface_\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_type_index\fP \fBget_interface_type\fP () \fBconst\fP"
.br
.in -1c

Public Member Functions inherited from \fBsc_core::sc_object\fP
.in +1c
.ti -1c
.RI "\fBconst\fP \fBchar\fP * \fBname\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBchar\fP * \fBbasename\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBprint\fP (::std::ostream &\fBos\fP=::std::cout) \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBdump\fP (::std::ostream &\fBos\fP=::std::cout) \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBtrace\fP (\fBsc_trace_file\fP *tf) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_simcontext\fP * \fBsimcontext\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBadd_attribute\fP (\fBsc_attr_base\fP &)"
.br
.ti -1c
.RI "\fBsc_attr_base\fP * \fBget_attribute\fP (\fBconst\fP std::string &\fBname_\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_attr_base\fP * \fBget_attribute\fP (\fBconst\fP std::string &\fBname_\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_attr_base\fP * \fBremove_attribute\fP (\fBconst\fP std::string &\fBname_\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBremove_all_attributes\fP ()"
.br
.ti -1c
.RI "int \fBnum_attributes\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_attr_cltn\fP & \fBattr_cltn\fP ()"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_attr_cltn\fP & \fBattr_cltn\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP std::vector< \fBsc_event\fP * > & \fBget_child_events\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP std::vector< \fBsc_object\fP * > & \fBget_child_objects\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_object\fP * \fBget_parent\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_object\fP * \fBget_parent_object\fP () \fBconst\fP"
.br
.in -1c

Public Member Functions inherited from \fBtlm_utils::multi_target_base_if< TYPES >\fP
.in +1c
.ti -1c
.RI "\fBvirtual\fP std::vector< \fBcallback_binder_fw\fP< \fBTYPES\fP > * > & \fBget_binders\fP ()=0"
.br
.ti -1c
.RI "\fBvirtual\fP std::map< \fBunsigned\fP int, \fBtlm::tlm_bw_transport_if\fP< \fBTYPES\fP > * > & \fBget_multi_binds\fP ()=0"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBconst\fP \fBsc_core::sc_object\fP * \fBget_socket\fP () \fBconst\fP"
.br
.in -1c
.SS "Additional Inherited Members"


Protected Member Functions inherited from \fBtlm::tlm_base_socket_if\fP
.in +1c
.ti -1c
.RI "\fBvirtual\fP \fB~tlm_base_socket_if\fP ()"
.br
.in -1c

Protected Member Functions inherited from \fBsc_core::sc_export_base\fP
.in +1c
.ti -1c
.RI "\fBsc_export_base\fP ()"
.br
.ti -1c
.RI "\fBsc_export_base\fP (\fBconst\fP \fBchar\fP *\fBname\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fB~sc_export_base\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBbefore_end_of_elaboration\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBend_of_elaboration\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBstart_of_simulation\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBend_of_simulation\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBreport_error\fP (\fBconst\fP \fBchar\fP *id, \fBconst\fP \fBchar\fP *\fBadd_msg\fP=0) \fBconst\fP"
.br
.in -1c

Protected Member Functions inherited from \fBsc_core::sc_object\fP
.in +1c
.ti -1c
.RI "\fBsc_object\fP ()"
.br
.ti -1c
.RI "\fBsc_object\fP (\fBconst\fP \fBchar\fP *\fBnm\fP)"
.br
.ti -1c
.RI "\fBsc_object\fP (\fBconst\fP \fBsc_object\fP &)"
.br
.ti -1c
.RI "\fBsc_object\fP & \fBoperator=\fP (\fBconst\fP \fBsc_object\fP &)"
.br
.ti -1c
.RI "\fBvirtual\fP \fB~sc_object\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBadd_child_event\fP (\fBsc_event\fP *\fBevent_p\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBadd_child_object\fP (\fBsc_object\fP *\fBobject_p\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBbool\fP \fBremove_child_event\fP (\fBsc_event\fP *\fBevent_p\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBbool\fP \fBremove_child_object\fP (\fBsc_object\fP *\fBobject_p\fP)"
.br
.ti -1c
.RI "\fBphase_cb_mask\fP \fBregister_simulation_phase_callback\fP (\fBphase_cb_mask\fP)"
.br
.ti -1c
.RI "\fBphase_cb_mask\fP \fBunregister_simulation_phase_callback\fP (\fBphase_cb_mask\fP)"
.br
.in -1c

Protected Member Functions inherited from \fBtlm_utils::multi_target_base_if< TYPES >\fP
.in +1c
.ti -1c
.RI "\fBvirtual\fP \fB~multi_target_base_if\fP ()"
.br
.in -1c

Protected Member Functions inherited from \fBtlm_utils::convenience_socket_base\fP
.in +1c
.ti -1c
.RI "\fBvirtual\fP \fB~convenience_socket_base\fP ()"
.br
.in -1c
.in +1c
.ti -1c
.RI "\fBvoid\fP \fBdisplay_warning\fP (\fBconst\fP \fBchar\fP *msg) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBdisplay_error\fP (\fBconst\fP \fBchar\fP *msg) \fBconst\fP"
.br
.in -1c

Protected Attributes inherited from \fBtlm::tlm_base_target_socket< BUSWIDTH, FW_IF, BW_IF, N, POL >\fP
.in +1c
.ti -1c
.RI "\fBport_type\fP \fBm_port\fP"
.br
.in -1c

Protected Attributes inherited from \fBsc_core::sc_export< IF >\fP
.in +1c
.ti -1c
.RI "\fBIF\fP * \fBm_interface_p\fP"
.br
.in -1c
.SH "Member Typedef Documentation"
.PP 
.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBtypedef\fP \fBtlm::tlm_target_socket\fP<\fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP > \fBtlm_utils::multi_target_base\fP< \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::base_type"

.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvirtual\fP \fBtlm_utils::multi_target_base\fP< \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::~\fBmulti_target_base\fP ()\fR [inline]\fP, \fR [virtual]\fP"

.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBtlm_utils::multi_target_base\fP< \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::multi_target_base ()\fR [inline]\fP"

.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBtlm_utils::multi_target_base\fP< \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::multi_target_base (\fBconst\fP \fBchar\fP * name)\fR [inline]\fP"

.SH "Member Function Documentation"
.PP 
.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvirtual\fP \fBmulti_target_base\fP * \fBtlm_utils::multi_target_base\fP< \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::get_hierarch_bind ()\fR [pure virtual]\fP"

.PP
Implemented in \fBtlm_utils::multi_passthrough_target_socket< MODULE, BUSWIDTH, TYPES, N, POL >\fP, and \fBtlm_utils::multi_passthrough_target_socket< MODULE, 32, tlm::tlm_base_protocol_types, 0, sc_core::SC_ZERO_OR_MORE_BOUND >\fP\&.
.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBconst\fP \fBsc_core::sc_object\fP * \fBtlm_utils::multi_target_base\fP< \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::get_socket () const\fR [inline]\fP, \fR [private]\fP, \fR [virtual]\fP"

.PP
Implements \fBtlm_utils::convenience_socket_base\fP\&.
.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvirtual\fP \fBtlm::tlm_socket_category\fP \fBtlm_utils::multi_target_base\fP< \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::get_socket_category () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Reimplemented from \fBtlm::tlm_base_target_socket< BUSWIDTH, FW_IF, BW_IF, N, POL >\fP\&.
.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBTYPES\fP  = tlm::tlm_base_protocol_types, \fBunsigned\fP int N = 0, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvirtual\fP \fBvoid\fP \fBtlm_utils::multi_target_base\fP< \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP >::set_hierarch_bind (\fBmulti_target_base\fP< \fBBUSWIDTH\fP, \fBTYPES\fP, \fBN\fP, \fBPOL\fP > *)\fR [pure virtual]\fP"

.PP
Implemented in \fBtlm_utils::multi_passthrough_target_socket< MODULE, BUSWIDTH, TYPES, N, POL >\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for VHDL simulator from the source code\&.
