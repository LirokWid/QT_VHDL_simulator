.TH "SyscAdd_pv< N, W >" 3 "VHDL simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SyscAdd_pv< N, W >
.SH SYNOPSIS
.br
.PP
.PP
\fR#include <sc_arith\&.h>\fP
.PP
Inherits \fBSyscLogicGate_pv< N, W >\fP, and \fBSyscLogicGate_pv< N, W >\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBSyscLogicGate_pv\fP< \fBN\fP, \fBW\fP > \fBBASE_MODULE\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBSyscAdd_pv\fP< \fBN\fP, \fBW\fP > \fBSC_CURRENT_USER_MODULE\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBSyscLogicGate_pv\fP< \fBN\fP, \fBW\fP > \fBBASE_MODULE\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBSyscAdd_pv\fP< \fBN\fP, \fBW\fP > \fBSC_CURRENT_USER_MODULE\fP"
.br
.in -1c

Public Types inherited from \fBSyscLogicGate_pv< N, W >\fP
.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBsc_lv\fP< \fBW\fP > \fBdata_t\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBSyscLogicGate_pv\fP< \fBN\fP, \fBW\fP > \fBSC_CURRENT_USER_MODULE\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBsc_lv\fP< \fBW\fP > \fBdata_t\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBSyscLogicGate_pv\fP< \fBN\fP, \fBW\fP > \fBSC_CURRENT_USER_MODULE\fP"
.br
.in -1c

Public Types inherited from \fBsc_core::sc_object\fP
.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBunsigned\fP \fBphase_cb_mask\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSyscAdd_pv\fP (\fB::sc_core::sc_module_name\fP \fBname\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBcombinational\fP ()"
.br
.ti -1c
.RI "\fBSyscAdd_pv\fP (\fB::sc_core::sc_module_name\fP \fBname\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBcombinational\fP ()"
.br
.in -1c

Public Member Functions inherited from \fBSyscLogicGate_pv< N, W >\fP
.in +1c
.ti -1c
.RI "\fBSyscLogicGate_pv\fP (\fB::sc_core::sc_module_name\fP \fBname\fP)"
.br
.ti -1c
.RI "\fBSyscLogicGate_pv\fP (\fB::sc_core::sc_module_name\fP \fBname\fP)"
.br
.in -1c

Public Member Functions inherited from \fBsc_core::sc_module\fP
.in +1c
.ti -1c
.RI "\fBsc_simcontext\fP * \fBsc_get_curr_simcontext\fP ()"
.br
.ti -1c
.RI "\fBconst\fP \fBchar\fP * \fBgen_unique_name\fP (\fBconst\fP \fBchar\fP *\fBbasename_\fP, \fBbool\fP \fBpreserve_first\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP \fBchar\fP * \fBkind\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fB~sc_module\fP ()"
.br
.ti -1c
.RI "\fBsc_module\fP & \fBoperator<<\fP (\fBsc_interface\fP &)"
.br
.ti -1c
.RI "\fBsc_module\fP & \fBoperator<<\fP (\fBsc_port_base\fP &)"
.br
.ti -1c
.RI "\fBsc_module\fP & \fBoperator,\fP (\fBsc_interface\fP &\fBinterface_\fP)"
.br
.ti -1c
.RI "\fBsc_module\fP & \fBoperator,\fP (\fBsc_port_base\fP &\fBport_\fP)"
.br
.ti -1c
.RI "\fBconst\fP ::std::vector< \fBsc_object\fP * > & \fBget_child_objects\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBdefunct\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator()\fP (\fBconst\fP \fBsc_bind_proxy\fP &\fBp001\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp002\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp003\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp004\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp005\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp006\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp007\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp008\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp009\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp010\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp011\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp012\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp013\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp014\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp015\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp016\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp017\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp018\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp019\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp020\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp021\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp022\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp023\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp024\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp025\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp026\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp027\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp028\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp029\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp030\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp031\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp032\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp033\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp034\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp035\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp036\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp037\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp038\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp039\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp040\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp041\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp042\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp043\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp044\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp045\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp046\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp047\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp048\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp049\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp050\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp051\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp052\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp053\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp054\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp055\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp056\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp057\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp058\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp059\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp060\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp061\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp062\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp063\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp064\fP=\fBSC_BIND_PROXY_NIL\fP)"
.br
.in -1c

Public Member Functions inherited from \fBsc_core::sc_object\fP
.in +1c
.ti -1c
.RI "\fBconst\fP \fBchar\fP * \fBname\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBchar\fP * \fBbasename\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBprint\fP (::std::ostream &\fBos\fP=::std::cout) \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBdump\fP (::std::ostream &\fBos\fP=::std::cout) \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBtrace\fP (\fBsc_trace_file\fP *tf) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_simcontext\fP * \fBsimcontext\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBadd_attribute\fP (\fBsc_attr_base\fP &)"
.br
.ti -1c
.RI "\fBsc_attr_base\fP * \fBget_attribute\fP (\fBconst\fP std::string &\fBname_\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_attr_base\fP * \fBget_attribute\fP (\fBconst\fP std::string &\fBname_\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_attr_base\fP * \fBremove_attribute\fP (\fBconst\fP std::string &\fBname_\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBremove_all_attributes\fP ()"
.br
.ti -1c
.RI "int \fBnum_attributes\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_attr_cltn\fP & \fBattr_cltn\fP ()"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_attr_cltn\fP & \fBattr_cltn\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP std::vector< \fBsc_event\fP * > & \fBget_child_events\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_object\fP * \fBget_parent\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_object\fP * \fBget_parent_object\fP () \fBconst\fP"
.br
.in -1c

Public Member Functions inherited from \fBsc_core::sc_process_host\fP
.in +1c
.ti -1c
.RI "\fBsc_process_host\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fB~sc_process_host\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBdefunct\fP ()"
.br
.in -1c
.SS "Additional Inherited Members"


Static Public Member Functions inherited from \fBSyscLogicGate_pv< N, W >\fP
.in +1c
.ti -1c
.RI "\fBstatic\fP \fBbool\fP \fBfind\fP (\fBQString\fP id, \fBQDomNodeList\fP children)"
.br
.ti -1c
.RI "\fBstatic\fP int \fBgetNInputs\fP (\fBQString\fP \fBgate\fP, \fBbool\fP &\fBok\fP)"
.br
.ti -1c
.RI "\fBstatic\fP int \fBgetWInputs\fP (\fBQString\fP \fBgate\fP, \fBbool\fP &\fBok\fP)"
.br
.ti -1c
.RI "\fBstatic\fP \fBbool\fP \fBvalidate\fP (\fBQString\fP \fBgate\fP, \fBQString\fP id, \fBQDomElement\fP \fBgElement\fP)"
.br
.ti -1c
.RI "\fBstatic\fP \fBbool\fP \fBfind\fP (\fBQString\fP id, \fBQDomNodeList\fP children)"
.br
.ti -1c
.RI "\fBstatic\fP int \fBgetNInputs\fP (\fBQString\fP \fBgate\fP, \fBbool\fP &\fBok\fP)"
.br
.ti -1c
.RI "\fBstatic\fP int \fBgetWInputs\fP (\fBQString\fP \fBgate\fP, \fBbool\fP &\fBok\fP)"
.br
.ti -1c
.RI "\fBstatic\fP \fBbool\fP \fBvalidate\fP (\fBQString\fP \fBgate\fP, \fBQString\fP id, \fBQDomElement\fP \fBgElement\fP)"
.br
.in -1c

Public Attributes inherited from \fBSyscLogicGate_pv< N, W >\fP
.in +1c
.ti -1c
.RI "\fBsc_vector\fP< \fBsc_in\fP< \fBdata_t\fP > > \fBd\fP"
.br
.ti -1c
.RI "\fBsc_out\fP< \fBdata_t\fP > \fBy\fP {'y'}"
.br
.in -1c

Protected Member Functions inherited from \fBsc_core::sc_module\fP
.in +1c
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBbefore_end_of_elaboration\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBconstruction_done\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBend_of_elaboration\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBelaboration_done\fP (\fBbool\fP &)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBstart_of_simulation\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBstart_simulation\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBend_of_simulation\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBsimulation_done\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBsc_module_init\fP ()"
.br
.ti -1c
.RI "\fBsc_module\fP ()"
.br
.ti -1c
.RI "\fBsc_module\fP (\fBconst\fP \fBsc_module_name\fP &\fBnm\fP)"
.br
.ti -1c
.RI "\fBsc_module\fP (\fBconst\fP \fBchar\fP *\fBnm\fP)"
.br
.ti -1c
.RI "\fBsc_module\fP (\fBconst\fP std::string &\fBnm\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBend_module\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBdont_initialize\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBpositional_bind\fP (\fBsc_interface\fP &)"
.br
.ti -1c
.RI "\fBvoid\fP \fBpositional_bind\fP (\fBsc_port_base\fP &)"
.br
.ti -1c
.RI "\fBvoid\fP \fBasync_reset_signal_is\fP (\fBconst\fP \fBsc_in\fP< \fBbool\fP > &port, \fBbool\fP level)"
.br
.ti -1c
.RI "\fBvoid\fP \fBasync_reset_signal_is\fP (\fBconst\fP \fBsc_inout\fP< \fBbool\fP > &port, \fBbool\fP level)"
.br
.ti -1c
.RI "\fBvoid\fP \fBasync_reset_signal_is\fP (\fBconst\fP \fBsc_out\fP< \fBbool\fP > &port, \fBbool\fP level)"
.br
.ti -1c
.RI "\fBvoid\fP \fBasync_reset_signal_is\fP (\fBconst\fP \fBsc_signal_in_if\fP< \fBbool\fP > &iface, \fBbool\fP level)"
.br
.ti -1c
.RI "\fBvoid\fP \fBreset_signal_is\fP (\fBconst\fP \fBsc_in\fP< \fBbool\fP > &port, \fBbool\fP level)"
.br
.ti -1c
.RI "\fBvoid\fP \fBreset_signal_is\fP (\fBconst\fP \fBsc_inout\fP< \fBbool\fP > &port, \fBbool\fP level)"
.br
.ti -1c
.RI "\fBvoid\fP \fBreset_signal_is\fP (\fBconst\fP \fBsc_out\fP< \fBbool\fP > &port, \fBbool\fP level)"
.br
.ti -1c
.RI "\fBvoid\fP \fBreset_signal_is\fP (\fBconst\fP \fBsc_signal_in_if\fP< \fBbool\fP > &iface, \fBbool\fP level)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBconst\fP \fBsc_event\fP &\fBe\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBconst\fP \fBsc_event_or_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBconst\fP \fBsc_event_and_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBconst\fP \fBsc_time\fP &t)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBdouble\fP v, \fBsc_time_unit\fP \fBtu\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBconst\fP \fBsc_time\fP &t, \fBconst\fP \fBsc_event\fP &\fBe\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBdouble\fP v, \fBsc_time_unit\fP \fBtu\fP, \fBconst\fP \fBsc_event\fP &\fBe\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBconst\fP \fBsc_time\fP &t, \fBconst\fP \fBsc_event_or_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBdouble\fP v, \fBsc_time_unit\fP \fBtu\fP, \fBconst\fP \fBsc_event_or_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBconst\fP \fBsc_time\fP &t, \fBconst\fP \fBsc_event_and_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBdouble\fP v, \fBsc_time_unit\fP \fBtu\fP, \fBconst\fP \fBsc_event_and_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBconst\fP \fBsc_event\fP &\fBe\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBconst\fP \fBsc_event_or_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBconst\fP \fBsc_event_and_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBconst\fP \fBsc_time\fP &t)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBdouble\fP v, \fBsc_time_unit\fP \fBtu\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBconst\fP \fBsc_time\fP &t, \fBconst\fP \fBsc_event\fP &\fBe\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBdouble\fP v, \fBsc_time_unit\fP \fBtu\fP, \fBconst\fP \fBsc_event\fP &\fBe\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBconst\fP \fBsc_time\fP &t, \fBconst\fP \fBsc_event_or_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBdouble\fP v, \fBsc_time_unit\fP \fBtu\fP, \fBconst\fP \fBsc_event_or_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBconst\fP \fBsc_time\fP &t, \fBconst\fP \fBsc_event_and_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBdouble\fP v, \fBsc_time_unit\fP \fBtu\fP, \fBconst\fP \fBsc_event_and_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBtimed_out\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBhalt\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (int \fBn\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBat_posedge\fP (\fBconst\fP \fBsc_signal_in_if\fP< \fBbool\fP > &s)"
.br
.ti -1c
.RI "\fBvoid\fP \fBat_posedge\fP (\fBconst\fP \fBsc_signal_in_if\fP< \fBsc_dt::sc_logic\fP > &s)"
.br
.ti -1c
.RI "\fBvoid\fP \fBat_negedge\fP (\fBconst\fP \fBsc_signal_in_if\fP< \fBbool\fP > &s)"
.br
.ti -1c
.RI "\fBvoid\fP \fBat_negedge\fP (\fBconst\fP \fBsc_signal_in_if\fP< \fBsc_dt::sc_logic\fP > &s)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwatching\fP (\fBbool\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBset_stack_size\fP (std::size_t)"
.br
.ti -1c
.RI "int \fBappend_port\fP (\fBsc_port_base\fP *)"
.br
.in -1c

Protected Member Functions inherited from \fBsc_core::sc_object\fP
.in +1c
.ti -1c
.RI "\fBsc_object\fP ()"
.br
.ti -1c
.RI "\fBsc_object\fP (\fBconst\fP \fBchar\fP *\fBnm\fP)"
.br
.ti -1c
.RI "\fBsc_object\fP (\fBconst\fP \fBsc_object\fP &)"
.br
.ti -1c
.RI "\fBsc_object\fP & \fBoperator=\fP (\fBconst\fP \fBsc_object\fP &)"
.br
.ti -1c
.RI "\fBvirtual\fP \fB~sc_object\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBadd_child_event\fP (\fBsc_event\fP *\fBevent_p\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBadd_child_object\fP (\fBsc_object\fP *\fBobject_p\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBbool\fP \fBremove_child_event\fP (\fBsc_event\fP *\fBevent_p\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBbool\fP \fBremove_child_object\fP (\fBsc_object\fP *\fBobject_p\fP)"
.br
.ti -1c
.RI "\fBphase_cb_mask\fP \fBregister_simulation_phase_callback\fP (\fBphase_cb_mask\fP)"
.br
.ti -1c
.RI "\fBphase_cb_mask\fP \fBunregister_simulation_phase_callback\fP (\fBphase_cb_mask\fP)"
.br
.in -1c

Protected Attributes inherited from \fBsc_core::sc_module\fP
.in +1c
.ti -1c
.RI "\fBsc_sensitive\fP \fBsensitive\fP"
.br
.ti -1c
.RI "\fBsc_sensitive_pos\fP \fBsensitive_pos\fP"
.br
.ti -1c
.RI "\fBsc_sensitive_neg\fP \fBsensitive_neg\fP"
.br
.in -1c
.SH "Member Typedef Documentation"
.PP 
.SS "template<\fBunsigned\fP int N = 2, \fBunsigned\fP int W = 1> \fBtypedef\fP \fBSyscLogicGate_pv\fP<\fBN\fP,\fBW\fP> \fBSyscAdd_pv\fP< \fBN\fP, \fBW\fP >::BASE_MODULE"

.SS "template<\fBunsigned\fP int N = 2, \fBunsigned\fP int W = 1> \fBtypedef\fP \fBSyscLogicGate_pv\fP<\fBN\fP,\fBW\fP> \fBSyscAdd_pv\fP< \fBN\fP, \fBW\fP >::BASE_MODULE"

.SS "template<\fBunsigned\fP int N = 2, \fBunsigned\fP int W = 1> \fBtypedef\fP \fBSyscAdd_pv\fP<\fBN\fP,\fBW\fP> \fBSyscAdd_pv\fP< \fBN\fP, \fBW\fP >::SC_CURRENT_USER_MODULE"

.SS "template<\fBunsigned\fP int N = 2, \fBunsigned\fP int W = 1> \fBtypedef\fP \fBSyscAdd_pv\fP<\fBN\fP,\fBW\fP> \fBSyscAdd_pv\fP< \fBN\fP, \fBW\fP >::SC_CURRENT_USER_MODULE"

.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<\fBunsigned\fP int N = 2, \fBunsigned\fP int W = 1> \fBSyscAdd_pv\fP< \fBN\fP, \fBW\fP >\fB::SyscAdd_pv\fP (\fB::sc_core::sc_module_name\fP name)\fR [inline]\fP"

.SS "template<\fBunsigned\fP int N = 2, \fBunsigned\fP int W = 1> \fBSyscAdd_pv\fP< \fBN\fP, \fBW\fP >\fB::SyscAdd_pv\fP (\fB::sc_core::sc_module_name\fP name)\fR [inline]\fP"

.SH "Member Function Documentation"
.PP 
.SS "template<\fBunsigned\fP int N = 2, \fBunsigned\fP int W = 1> \fBvirtual\fP \fBvoid\fP \fBSyscAdd_pv\fP< \fBN\fP, \fBW\fP >::combinational ()\fR [inline]\fP, \fR [virtual]\fP"

.PP
Reimplemented from \fBSyscLogicGate_pv< N, W >\fP\&.
.SS "template<\fBunsigned\fP int N = 2, \fBunsigned\fP int W = 1> \fBvirtual\fP \fBvoid\fP \fBSyscAdd_pv\fP< \fBN\fP, \fBW\fP >::combinational ()\fR [inline]\fP, \fR [virtual]\fP"

.PP
Reimplemented from \fBSyscLogicGate_pv< N, W >\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for VHDL simulator from the source code\&.
