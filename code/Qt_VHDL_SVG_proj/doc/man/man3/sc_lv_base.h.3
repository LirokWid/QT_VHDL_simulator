.TH "C:/Users/BJRODIER/Documents/QT_REPO/QT_VHDL_simulator/code/Ressources/SystemC/include/sysc/datatypes/bit/sc_lv_base.h" 3 "VHDL simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/BJRODIER/Documents/QT_REPO/QT_VHDL_simulator/code/Ressources/SystemC/include/sysc/datatypes/bit/sc_lv_base.h
.SH SYNOPSIS
.br
.PP
\fR#include 'sysc/datatypes/bit/sc_bit_ids\&.h'\fP
.br
\fR#include 'sysc/datatypes/bit/sc_bv_base\&.h'\fP
.br
\fR#include 'sysc/datatypes/bit/sc_logic\&.h'\fP
.br
\fR#include 'sysc/datatypes/int/sc_length_param\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBsc_dt::sc_lv_base\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBsc_dt\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_BITWISE_AND_ASN_OP_T\fP(\fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_BITWISE_AND_OP_T_A\fP(\fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_BITWISE_AND_OP_T_B\fP(\fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_BITWISE_OR_ASN_OP_T\fP(\fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_BITWISE_OR_OP_T_A\fP(\fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_BITWISE_OR_OP_T_B\fP(\fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_BITWISE_XOR_ASN_OP_T\fP(\fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_BITWISE_XOR_OP_T_A\fP(\fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_BITWISE_XOR_OP_T_B\fP(\fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_REL_OP_T\fP(\fBtp\fP)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > X & \fBsc_dt::operator&=\fP (\fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBpy\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::operator&\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBpy\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > X & \fBsc_dt::operator|=\fP (\fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBpy\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::operator|\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBpy\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > X & \fBsc_dt::operator^=\fP (\fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBpy\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::operator^\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBpy\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::lrotate\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBx\fP, int \fBn\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::rrotate\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBx\fP, int \fBn\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::reverse\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBx\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBbool\fP \fBsc_dt::operator==\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBpy\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT\fP >, \fBsc_lv_base\fP > \fBsc_dt::operator,\fP (\fBsc_bitref_r\fP< \fBT\fP >, \fBconst\fP \fBchar\fP *)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_bitref_r\fP< \fBT\fP > > \fBsc_dt::operator,\fP (\fBconst\fP \fBchar\fP *, \fBsc_bitref_r\fP< \fBT\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT\fP >, \fBsc_lv_base\fP > \fBsc_dt::operator,\fP (\fBsc_bitref_r\fP< \fBT\fP >, \fBconst\fP \fBsc_logic\fP &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_bitref_r\fP< \fBT\fP > > \fBsc_dt::operator,\fP (\fBconst\fP \fBsc_logic\fP &, \fBsc_bitref_r\fP< \fBT\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT\fP >, \fBsc_bv_base\fP > \fBsc_dt::operator,\fP (\fBsc_bitref_r\fP< \fBT\fP > \fBa\fP, \fBbool\fP \fBb\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bv_base\fP, \fBsc_bitref_r\fP< \fBT\fP > > \fBsc_dt::operator,\fP (\fBbool\fP \fBa\fP, \fBsc_bitref_r\fP< \fBT\fP > \fBb\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT\fP >, \fBsc_lv_base\fP > \fBsc_dt::concat\fP (\fBsc_bitref_r\fP< \fBT\fP >, \fBconst\fP \fBchar\fP *)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_bitref_r\fP< \fBT\fP > > \fBsc_dt::concat\fP (\fBconst\fP \fBchar\fP *, \fBsc_bitref_r\fP< \fBT\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT\fP >, \fBsc_lv_base\fP > \fBsc_dt::concat\fP (\fBsc_bitref_r\fP< \fBT\fP >, \fBconst\fP \fBsc_logic\fP &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_bitref_r\fP< \fBT\fP > > \fBsc_dt::concat\fP (\fBconst\fP \fBsc_logic\fP &, \fBsc_bitref_r\fP< \fBT\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT\fP >, \fBsc_bv_base\fP > \fBsc_dt::concat\fP (\fBsc_bitref_r\fP< \fBT\fP > \fBa\fP, \fBbool\fP \fBb\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bv_base\fP, \fBsc_bitref_r\fP< \fBT\fP > > \fBsc_dt::concat\fP (\fBbool\fP \fBa\fP, \fBsc_bitref_r\fP< \fBT\fP > \fBb\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT\fP >, \fBsc_lv_base\fP > \fBsc_dt::operator,\fP (\fBsc_subref_r\fP< \fBT\fP >, \fBconst\fP \fBchar\fP *)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_subref_r\fP< \fBT\fP > > \fBsc_dt::operator,\fP (\fBconst\fP \fBchar\fP *, \fBsc_subref_r\fP< \fBT\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT\fP >, \fBsc_lv_base\fP > \fBsc_dt::operator,\fP (\fBsc_subref_r\fP< \fBT\fP >, \fBconst\fP \fBsc_logic\fP &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_subref_r\fP< \fBT\fP > > \fBsc_dt::operator,\fP (\fBconst\fP \fBsc_logic\fP &, \fBsc_subref_r\fP< \fBT\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT\fP >, \fBsc_bv_base\fP > \fBsc_dt::operator,\fP (\fBsc_subref_r\fP< \fBT\fP >, \fBbool\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bv_base\fP, \fBsc_subref_r\fP< \fBT\fP > > \fBsc_dt::operator,\fP (\fBbool\fP, \fBsc_subref_r\fP< \fBT\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT\fP >, \fBsc_lv_base\fP > \fBsc_dt::concat\fP (\fBsc_subref_r\fP< \fBT\fP >, \fBconst\fP \fBchar\fP *)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_subref_r\fP< \fBT\fP > > \fBsc_dt::concat\fP (\fBconst\fP \fBchar\fP *, \fBsc_subref_r\fP< \fBT\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT\fP >, \fBsc_lv_base\fP > \fBsc_dt::concat\fP (\fBsc_subref_r\fP< \fBT\fP >, \fBconst\fP \fBsc_logic\fP &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_subref_r\fP< \fBT\fP > > \fBsc_dt::concat\fP (\fBconst\fP \fBsc_logic\fP &, \fBsc_subref_r\fP< \fBT\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT\fP >, \fBsc_bv_base\fP > \fBsc_dt::concat\fP (\fBsc_subref_r\fP< \fBT\fP >, \fBbool\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bv_base\fP, \fBsc_subref_r\fP< \fBT\fP > > \fBsc_dt::concat\fP (\fBbool\fP, \fBsc_subref_r\fP< \fBT\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_lv_base\fP > \fBsc_dt::operator,\fP (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBconst\fP \fBchar\fP *)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > > \fBsc_dt::operator,\fP (\fBconst\fP \fBchar\fP *, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_lv_base\fP > \fBsc_dt::operator,\fP (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBconst\fP \fBsc_logic\fP &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > > \fBsc_dt::operator,\fP (\fBconst\fP \fBsc_logic\fP &, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_bv_base\fP > \fBsc_dt::operator,\fP (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBbool\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_bv_base\fP, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > > \fBsc_dt::operator,\fP (\fBbool\fP, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_lv_base\fP > \fBsc_dt::concat\fP (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBconst\fP \fBchar\fP *)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > > \fBsc_dt::concat\fP (\fBconst\fP \fBchar\fP *, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_lv_base\fP > \fBsc_dt::concat\fP (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBconst\fP \fBsc_logic\fP &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > > \fBsc_dt::concat\fP (\fBconst\fP \fBsc_logic\fP &, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_bv_base\fP > \fBsc_dt::concat\fP (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBbool\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_bv_base\fP, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > > \fBsc_dt::concat\fP (\fBbool\fP, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBT\fP, \fBsc_lv_base\fP > \fBsc_dt::operator,\fP (\fBconst\fP \fBsc_proxy\fP< \fBT\fP > &, \fBconst\fP \fBchar\fP *)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBT\fP > \fBsc_dt::operator,\fP (\fBconst\fP \fBchar\fP *, \fBconst\fP \fBsc_proxy\fP< \fBT\fP > &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBT\fP, \fBsc_lv_base\fP > \fBsc_dt::operator,\fP (\fBconst\fP \fBsc_proxy\fP< \fBT\fP > &, \fBconst\fP \fBsc_logic\fP &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBT\fP > \fBsc_dt::operator,\fP (\fBconst\fP \fBsc_logic\fP &, \fBconst\fP \fBsc_proxy\fP< \fBT\fP > &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBT\fP, \fBsc_bv_base\fP > \fBsc_dt::operator,\fP (\fBconst\fP \fBsc_proxy\fP< \fBT\fP > &, \fBbool\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bv_base\fP, \fBT\fP > \fBsc_dt::operator,\fP (\fBbool\fP, \fBconst\fP \fBsc_proxy\fP< \fBT\fP > &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBT\fP, \fBsc_lv_base\fP > \fBsc_dt::concat\fP (\fBconst\fP \fBsc_proxy\fP< \fBT\fP > &, \fBconst\fP \fBchar\fP *)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBT\fP > \fBsc_dt::concat\fP (\fBconst\fP \fBchar\fP *, \fBconst\fP \fBsc_proxy\fP< \fBT\fP > &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBT\fP, \fBsc_lv_base\fP > \fBsc_dt::concat\fP (\fBconst\fP \fBsc_proxy\fP< \fBT\fP > &, \fBconst\fP \fBsc_logic\fP &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBT\fP > \fBsc_dt::concat\fP (\fBconst\fP \fBsc_logic\fP &, \fBconst\fP \fBsc_proxy\fP< \fBT\fP > &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBT\fP, \fBsc_bv_base\fP > \fBsc_dt::concat\fP (\fBconst\fP \fBsc_proxy\fP< \fBT\fP > &, \fBbool\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bv_base\fP, \fBT\fP > \fBsc_dt::concat\fP (\fBbool\fP, \fBconst\fP \fBsc_proxy\fP< \fBT\fP > &)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBSC_API_TEMPLATE_DECL_\fP \fBsc_dt::sc_proxy< sc_lv_base >\fP"
.br
.ti -1c
.RI "\fBSC_API_TEMPLATE_DECL_\fP \fBsc_dt::sc_proxy< sc_bv_base >\fP"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#\fBdefine\fP DEFN_BITWISE_AND_ASN_OP_T(\fBtp\fP)"
\fBValue:\fP.PP
.nf
template <class X>                                                            \\
inline                                                                        \\
X&                                                                            \\
sc_proxy<X>::operator &= ( tp b )                                             \\
{                                                                             \\
    X& x = back_cast();                                                       \\
    sc_lv_base a( x\&.length() );                                               \\
    a = b;                                                                    \\
    return b_and_assign_( x, a );                                             \\
}
.fi

.SS "#\fBdefine\fP DEFN_BITWISE_AND_OP_T_A(\fBtp\fP)"
\fBValue:\fP.PP
.nf
template <class X>                                                            \\
inline                                                                        \\
const sc_lv_base                                                              \\
sc_proxy<X>::operator & ( tp b ) const                                        \\
{                                                                             \\
    sc_lv_base a( back_cast() );                                              \\
    return ( a &= b );                                                        \\
}
.fi

.SS "#\fBdefine\fP DEFN_BITWISE_AND_OP_T_B(\fBtp\fP)"
\fBValue:\fP.PP
.nf
template <class X>                                                            \\
inline                                                                        \\
const sc_lv_base                                                              \\
operator & ( tp b, const sc_proxy<X>& px )                                    \\
{                                                                             \\
    return ( px & b );                                                        \\
}
.fi

.SS "#\fBdefine\fP DEFN_BITWISE_OR_ASN_OP_T(\fBtp\fP)"
\fBValue:\fP.PP
.nf
template <class X>                                                            \\
inline                                                                        \\
X&                                                                            \\
sc_proxy<X>::operator |= ( tp b )                                             \\
{                                                                             \\
    X& x = back_cast();                                                       \\
    sc_lv_base a( x\&.length() );                                               \\
    a = b;                                                                    \\
    return b_or_assign_( x, a );                                              \\
}
.fi

.SS "#\fBdefine\fP DEFN_BITWISE_OR_OP_T_A(\fBtp\fP)"
\fBValue:\fP.PP
.nf
template <class X>                                                            \\
inline                                                                        \\
const sc_lv_base                                                              \\
sc_proxy<X>::operator | ( tp b ) const                                        \\
{                                                                             \\
    sc_lv_base a( back_cast() );                                              \\
    return ( a |= b );                                                        \\
}
.fi

.SS "#\fBdefine\fP DEFN_BITWISE_OR_OP_T_B(\fBtp\fP)"
\fBValue:\fP.PP
.nf
template <class X>                                                            \\
inline                                                                        \\
const sc_lv_base                                                              \\
operator | ( tp b, const sc_proxy<X>& px )                                    \\
{                                                                             \\
    return ( px | b );                                                        \\
}
.fi

.SS "#\fBdefine\fP DEFN_BITWISE_XOR_ASN_OP_T(\fBtp\fP)"
\fBValue:\fP.PP
.nf
template <class X>                                                            \\
inline                                                                        \\
X&                                                                            \\
sc_proxy<X>::operator ^= ( tp b )                                             \\
{                                                                             \\
    X& x = back_cast();                                                       \\
    sc_lv_base a( x\&.length() );                                               \\
    a = b;                                                                    \\
    return b_xor_assign_( x, a );                                             \\
}
.fi

.SS "#\fBdefine\fP DEFN_BITWISE_XOR_OP_T_A(\fBtp\fP)"
\fBValue:\fP.PP
.nf
template <class X>                                                            \\
inline                                                                        \\
const sc_lv_base                                                              \\
sc_proxy<X>::operator ^ ( tp b ) const                                        \\
{                                                                             \\
    sc_lv_base a( back_cast() );                                              \\
    return ( a ^= b );                                                        \\
}
.fi

.SS "#\fBdefine\fP DEFN_BITWISE_XOR_OP_T_B(\fBtp\fP)"
\fBValue:\fP.PP
.nf
template <class X>                                                            \\
inline                                                                        \\
const sc_lv_base                                                              \\
operator ^ ( tp b, const sc_proxy<X>& px )                                    \\
{                                                                             \\
    return ( px ^ b );                                                        \\
}
.fi

.SS "#\fBdefine\fP DEFN_REL_OP_T(\fBtp\fP)"
\fBValue:\fP.PP
.nf
template <class X>                                                            \\
inline                                                                        \\
bool                                                                          \\
sc_proxy<X>::operator == ( tp b ) const                                       \\
{                                                                             \\
    const X& x = back_cast();                                                 \\
    sc_lv_base y( x\&.length() );                                               \\
    y = b;                                                                    \\
    return ( x == y );                                                        \\
}
.fi

.SH "Author"
.PP 
Generated automatically by Doxygen for VHDL simulator from the source code\&.
