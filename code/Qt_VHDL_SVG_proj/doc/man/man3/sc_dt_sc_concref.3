.TH "sc_dt::sc_concref< X, Y >" 3 "VHDL simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sc_dt::sc_concref< X, Y >
.SH SYNOPSIS
.br
.PP
.PP
\fR#include <sc_bit_proxies\&.h>\fP
.PP
Inherits \fBsc_dt::sc_concref_r< X, Y >\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBsc_concref_r\fP< X, \fBY\fP > \fBbase_type\fP"
.br
.in -1c

Public Types inherited from \fBsc_dt::sc_concref_r< X, Y >\fP
.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBsc_proxy\fP< \fBsc_concref_r\fP< X, \fBY\fP > >::value_type \fBvalue_type\fP"
.br
.in -1c

Public Types inherited from \fBsc_dt::sc_proxy< sc_concref_r< X, Y > >\fP
.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBsc_proxy_traits\fP< X >::traits_type \fBtraits_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP traits_type::bit_type \fBbit_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP traits_type::value_type \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBsc_concref\fP (X &\fBleft_\fP, \fBY\fP &\fBright_\fP, int \fBdelete_\fP=0)"
.br
.ti -1c
.RI "\fBsc_concref\fP (\fBconst\fP \fBsc_concref\fP< X, \fBY\fP > &\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_concref\fP< X, \fBY\fP > * \fBclone\fP () \fBconst\fP"
.br
.ti -1c
.RI "template<\fBclass\fP \fBZ\fP > \fBsc_concref\fP< X, \fBY\fP > & \fBoperator=\fP (\fBconst\fP \fBsc_proxy\fP< \fBZ\fP > &\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_concref\fP< X, \fBY\fP > & \fBoperator=\fP (\fBconst\fP \fBsc_concref\fP< X, \fBY\fP > &\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_concref\fP< X, \fBY\fP > & \fBoperator=\fP (\fBconst\fP \fBchar\fP *\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_concref\fP< X, \fBY\fP > & \fBoperator=\fP (\fBconst\fP \fBbool\fP *\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_concref\fP< X, \fBY\fP > & \fBoperator=\fP (\fBconst\fP \fBsc_logic\fP *\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_concref\fP< X, \fBY\fP > & \fBoperator=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_concref\fP< X, \fBY\fP > & \fBoperator=\fP (\fBconst\fP \fBsc_signed\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_concref\fP< X, \fBY\fP > & \fBoperator=\fP (\fBconst\fP \fBsc_uint_base\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_concref\fP< X, \fBY\fP > & \fBoperator=\fP (\fBconst\fP \fBsc_int_base\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_concref\fP< X, \fBY\fP > & \fBoperator=\fP (\fBunsigned\fP \fBlong\fP \fBa\fP)"
.br
.ti -1c
.RI "\fBsc_concref\fP< X, \fBY\fP > & \fBoperator=\fP (\fBlong\fP \fBa\fP)"
.br
.ti -1c
.RI "\fBsc_concref\fP< X, \fBY\fP > & \fBoperator=\fP (\fBunsigned\fP int \fBa\fP)"
.br
.ti -1c
.RI "\fBsc_concref\fP< X, \fBY\fP > & \fBoperator=\fP (int \fBa\fP)"
.br
.ti -1c
.RI "\fBsc_concref\fP< X, \fBY\fP > & \fBoperator=\fP (\fBuint64\fP \fBa\fP)"
.br
.ti -1c
.RI "\fBsc_concref\fP< X, \fBY\fP > & \fBoperator=\fP (\fBint64\fP \fBa\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBscan\fP (::std::istream &=::std::cin)"
.br
.in -1c

Public Member Functions inherited from \fBsc_dt::sc_concref_r< X, Y >\fP
.in +1c
.ti -1c
.RI "\fBsc_concref_r\fP (\fBconst\fP X &\fBleft_\fP, \fBconst\fP \fBY\fP &\fBright_\fP, int \fBdelete_\fP=0)"
.br
.ti -1c
.RI "\fBsc_concref_r\fP (\fBconst\fP \fBsc_concref_r\fP< X, \fBY\fP > &\fBa\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fB~sc_concref_r\fP ()"
.br
.ti -1c
.RI "\fBsc_concref_r\fP< X, \fBY\fP > * \fBclone\fP () \fBconst\fP"
.br
.ti -1c
.RI "int \fBlength\fP () \fBconst\fP"
.br
.ti -1c
.RI "int \fBsize\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvalue_type\fP \fBget_bit\fP (int \fBn\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBset_bit\fP (int \fBn\fP, \fBvalue_type\fP \fBvalue\fP)"
.br
.ti -1c
.RI "\fBsc_digit\fP \fBget_word\fP (int \fBi\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBset_word\fP (int \fBi\fP, \fBsc_digit\fP \fBw\fP)"
.br
.ti -1c
.RI "\fBsc_digit\fP \fBget_cword\fP (int \fBi\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBset_cword\fP (int \fBi\fP, \fBsc_digit\fP \fBw\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBclean_tail\fP ()"
.br
.ti -1c
.RI "\fBbool\fP \fBis_01\fP () \fBconst\fP"
.br
.in -1c

Public Member Functions inherited from \fBsc_dt::sc_proxy< sc_concref_r< X, Y > >\fP
.in +1c
.ti -1c
.RI "\fBvirtual\fP \fB~sc_proxy\fP ()"
.br
.ti -1c
.RI "X & \fBback_cast\fP ()"
.br
.ti -1c
.RI "\fBconst\fP X & \fBback_cast\fP () \fBconst\fP"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBconst\fP \fBchar\fP *\fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBconst\fP \fBbool\fP *\fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBconst\fP \fBsc_logic\fP *\fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBconst\fP \fBsc_unsigned\fP &\fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBconst\fP \fBsc_signed\fP &\fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBconst\fP \fBsc_uint_base\fP &\fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBconst\fP \fBsc_int_base\fP &\fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBunsigned\fP int \fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (int \fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBunsigned\fP \fBlong\fP \fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBlong\fP \fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBuint64\fP \fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBint64\fP \fBa\fP)"
.br
.ti -1c
.RI "X & \fBb_not\fP ()"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator~\fP () \fBconst\fP"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBconst\fP \fBchar\fP *b)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBconst\fP \fBbool\fP *b)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBconst\fP \fBsc_logic\fP *b)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBconst\fP \fBsc_unsigned\fP &b)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBconst\fP \fBsc_signed\fP &b)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBconst\fP \fBsc_uint_base\fP &b)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBconst\fP \fBsc_int_base\fP &b)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBunsigned\fP \fBlong\fP b)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBlong\fP b)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBunsigned\fP int b)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (int b)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBuint64\fP b)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBint64\fP b)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBconst\fP \fBchar\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBconst\fP \fBbool\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBconst\fP \fBsc_logic\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBconst\fP \fBsc_unsigned\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBconst\fP \fBsc_signed\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBconst\fP \fBsc_uint_base\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBconst\fP \fBsc_int_base\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBunsigned\fP \fBlong\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBlong\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBunsigned\fP int b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (int b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBuint64\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBint64\fP b) \fBconst\fP"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBconst\fP \fBchar\fP *b)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBconst\fP \fBbool\fP *b)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBconst\fP \fBsc_logic\fP *b)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBconst\fP \fBsc_unsigned\fP &b)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBconst\fP \fBsc_signed\fP &b)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBconst\fP \fBsc_uint_base\fP &b)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBconst\fP \fBsc_int_base\fP &b)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBunsigned\fP \fBlong\fP b)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBlong\fP b)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBunsigned\fP int b)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (int b)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBuint64\fP b)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBint64\fP b)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBconst\fP \fBchar\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBconst\fP \fBbool\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBconst\fP \fBsc_logic\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBconst\fP \fBsc_unsigned\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBconst\fP \fBsc_signed\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBconst\fP \fBsc_uint_base\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBconst\fP \fBsc_int_base\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBunsigned\fP \fBlong\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBlong\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBunsigned\fP int b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (int b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBuint64\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBint64\fP b) \fBconst\fP"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBconst\fP \fBchar\fP *b)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBconst\fP \fBbool\fP *b)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBconst\fP \fBsc_logic\fP *b)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBconst\fP \fBsc_unsigned\fP &b)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBconst\fP \fBsc_signed\fP &b)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBconst\fP \fBsc_uint_base\fP &b)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBconst\fP \fBsc_int_base\fP &b)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBunsigned\fP \fBlong\fP b)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBlong\fP b)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBunsigned\fP int b)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (int b)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBuint64\fP b)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBint64\fP b)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBconst\fP \fBchar\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBconst\fP \fBbool\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBconst\fP \fBsc_logic\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBconst\fP \fBsc_unsigned\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBconst\fP \fBsc_signed\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBconst\fP \fBsc_uint_base\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBconst\fP \fBsc_int_base\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBunsigned\fP \fBlong\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBlong\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBunsigned\fP int b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (int b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBuint64\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBint64\fP b) \fBconst\fP"
.br
.ti -1c
.RI "X & \fBoperator<<=\fP (int \fBn\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator<<\fP (int \fBn\fP) \fBconst\fP"
.br
.ti -1c
.RI "X & \fBoperator>>=\fP (int \fBn\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator>>\fP (int \fBn\fP) \fBconst\fP"
.br
.ti -1c
.RI "X & \fBlrotate\fP (int \fBn\fP)"
.br
.ti -1c
.RI "X & \fBrrotate\fP (int \fBn\fP)"
.br
.ti -1c
.RI "X & \fBreverse\fP ()"
.br
.ti -1c
.RI "\fBsc_bitref\fP< X > \fBoperator[]\fP (int \fBi\fP)"
.br
.ti -1c
.RI "\fBsc_bitref_r\fP< X > \fBoperator[]\fP (int \fBi\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_bitref\fP< X > \fBbit\fP (int \fBi\fP)"
.br
.ti -1c
.RI "\fBsc_bitref_r\fP< X > \fBbit\fP (int \fBi\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_subref\fP< X > \fBoperator()\fP (int \fBhi\fP, int \fBlo\fP)"
.br
.ti -1c
.RI "\fBsc_subref_r\fP< X > \fBoperator()\fP (int \fBhi\fP, int \fBlo\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_subref\fP< X > \fBrange\fP (int \fBhi\fP, int \fBlo\fP)"
.br
.ti -1c
.RI "\fBsc_subref_r\fP< X > \fBrange\fP (int \fBhi\fP, int \fBlo\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBvalue_type\fP \fBand_reduce\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvalue_type\fP \fBnand_reduce\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvalue_type\fP \fBor_reduce\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvalue_type\fP \fBnor_reduce\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvalue_type\fP \fBxor_reduce\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvalue_type\fP \fBxnor_reduce\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBchar\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBbool\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_logic\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_unsigned\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_signed\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_uint_base\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_int_base\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBunsigned\fP \fBlong\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBlong\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBunsigned\fP int b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (int b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBuint64\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBint64\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP (\fBsc_numrep\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP (\fBsc_numrep\fP, \fBbool\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBint64\fP \fBto_int64\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBuint64\fP \fBto_uint64\fP () \fBconst\fP"
.br
.ti -1c
.RI "int \fBto_int\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBunsigned\fP int \fBto_uint\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBlong\fP \fBto_long\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBunsigned\fP \fBlong\fP \fBto_ulong\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBprint\fP (::std::ostream &\fBos\fP=::std::cout) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBscan\fP (::std::istream &\fBis\fP=::std::cin)"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBsc_concref\fP ()"
.br
.in -1c
.SS "Additional Inherited Members"


Protected Member Functions inherited from \fBsc_dt::sc_proxy< sc_concref_r< X, Y > >\fP
.in +1c
.ti -1c
.RI "\fBvoid\fP \fBcheck_bounds\fP (int \fBn\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBcheck_wbounds\fP (int \fBn\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_digit\fP \fBto_anything_unsigned\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBint64\fP \fBto_anything_signed\fP () \fBconst\fP"
.br
.in -1c

Protected Attributes inherited from \fBsc_dt::sc_concref_r< X, Y >\fP
.in +1c
.ti -1c
.RI "X & \fBm_left\fP"
.br
.ti -1c
.RI "\fBY\fP & \fBm_right\fP"
.br
.ti -1c
.RI "int \fBm_delete\fP"
.br
.ti -1c
.RI "int & \fBm_refs\fP"
.br
.in -1c
.SH "Member Typedef Documentation"
.PP 
.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBtypedef\fP \fBsc_concref_r\fP<X,\fBY\fP> \fBsc_dt::sc_concref\fP< X, \fBY\fP >::base_type"

.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBsc_dt::sc_concref\fP< X, \fBY\fP >::sc_concref (X & left_, \fBY\fP & right_, int delete_ = \fR0\fP)\fR [inline]\fP"

.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBsc_dt::sc_concref\fP< X, \fBY\fP >::sc_concref (\fBconst\fP \fBsc_concref\fP< X, \fBY\fP > & a)\fR [inline]\fP"

.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBsc_dt::sc_concref\fP< X, \fBY\fP >::sc_concref ()\fR [private]\fP"

.SH "Member Function Documentation"
.PP 
.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBsc_concref\fP< X, \fBY\fP > * \fBsc_dt::sc_concref\fP< X, \fBY\fP >::clone () const\fR [inline]\fP"

.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBsc_concref\fP< X, \fBY\fP > & \fBsc_dt::sc_concref\fP< X, \fBY\fP >\fB::operator\fP= (\fBconst\fP \fBbool\fP * a)\fR [inline]\fP"

.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBsc_concref\fP< X, \fBY\fP > & \fBsc_dt::sc_concref\fP< X, \fBY\fP >\fB::operator\fP= (\fBconst\fP \fBchar\fP * a)\fR [inline]\fP"

.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBsc_concref\fP< X, \fBY\fP > & \fBsc_dt::sc_concref\fP< X, \fBY\fP >\fB::operator\fP= (\fBconst\fP \fBsc_concref\fP< X, \fBY\fP > & a)\fR [inline]\fP"

.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBsc_concref\fP< X, \fBY\fP > & \fBsc_dt::sc_concref\fP< X, \fBY\fP >\fB::operator\fP= (\fBconst\fP \fBsc_int_base\fP & a)\fR [inline]\fP"

.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBsc_concref\fP< X, \fBY\fP > & \fBsc_dt::sc_concref\fP< X, \fBY\fP >\fB::operator\fP= (\fBconst\fP \fBsc_logic\fP * a)\fR [inline]\fP"

.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > template<\fBclass\fP \fBZ\fP > \fBsc_concref\fP< X, \fBY\fP > & \fBsc_dt::sc_concref\fP< X, \fBY\fP >\fB::operator\fP= (\fBconst\fP \fBsc_proxy\fP< \fBZ\fP > & a)\fR [inline]\fP"

.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBsc_concref\fP< X, \fBY\fP > & \fBsc_dt::sc_concref\fP< X, \fBY\fP >\fB::operator\fP= (\fBconst\fP \fBsc_signed\fP & a)\fR [inline]\fP"

.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBsc_concref\fP< X, \fBY\fP > & \fBsc_dt::sc_concref\fP< X, \fBY\fP >\fB::operator\fP= (\fBconst\fP \fBsc_uint_base\fP & a)\fR [inline]\fP"

.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBsc_concref\fP< X, \fBY\fP > & \fBsc_dt::sc_concref\fP< X, \fBY\fP >\fB::operator\fP= (\fBconst\fP \fBsc_unsigned\fP & a)\fR [inline]\fP"

.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBsc_concref\fP< X, \fBY\fP > & \fBsc_dt::sc_concref\fP< X, \fBY\fP >\fB::operator\fP= (int a)\fR [inline]\fP"

.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBsc_concref\fP< X, \fBY\fP > & \fBsc_dt::sc_concref\fP< X, \fBY\fP >\fB::operator\fP= (\fBint64\fP a)\fR [inline]\fP"

.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBsc_concref\fP< X, \fBY\fP > & \fBsc_dt::sc_concref\fP< X, \fBY\fP >\fB::operator\fP= (\fBlong\fP a)\fR [inline]\fP"

.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBsc_concref\fP< X, \fBY\fP > & \fBsc_dt::sc_concref\fP< X, \fBY\fP >\fB::operator\fP= (\fBuint64\fP a)\fR [inline]\fP"

.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBsc_concref\fP< X, \fBY\fP > & \fBsc_dt::sc_concref\fP< X, \fBY\fP >\fB::operator\fP= (\fBunsigned\fP int a)\fR [inline]\fP"

.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBsc_concref\fP< X, \fBY\fP > & \fBsc_dt::sc_concref\fP< X, \fBY\fP >\fB::operator\fP= (\fBunsigned\fP \fBlong\fP a)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBvoid\fP \fBsc_dt::sc_concref\fP< \fBT1\fP, \fBT2\fP >::scan (::std::istream & is = \fR::std::cin\fP)\fR [inline]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for VHDL simulator from the source code\&.
