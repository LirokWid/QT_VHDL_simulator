.TH "sc_dt" 3 "VHDL simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sc_dt
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "union \fBieee_double\fP"
.br
.ti -1c
.RI "union \fBieee_float\fP"
.br
.ti -1c
.RI "class \fBsc_bigint\fP"
.br
.ti -1c
.RI "class \fBsc_biguint\fP"
.br
.ti -1c
.RI "class \fBsc_bit\fP"
.br
.ti -1c
.RI "class \fBsc_bitref\fP"
.br
.ti -1c
.RI "class \fBsc_bitref_conv_r\fP"
.br
.ti -1c
.RI "class \fBsc_bitref_conv_r< T, sc_proxy_traits< sc_bv_base > >\fP"
.br
.ti -1c
.RI "class \fBsc_bitref_r\fP"
.br
.ti -1c
.RI "class \fBsc_bv\fP"
.br
.ti -1c
.RI "class \fBsc_bv_base\fP"
.br
.ti -1c
.RI "class \fBsc_concat_bool\fP"
.br
.ti -1c
.RI "class \fBsc_concatref\fP"
.br
.ti -1c
.RI "class \fBsc_concref\fP"
.br
.ti -1c
.RI "class \fBsc_concref_r\fP"
.br
.ti -1c
.RI "class \fBsc_context\fP"
.br
.ti -1c
.RI "class \fBsc_fix\fP"
.br
.ti -1c
.RI "class \fBsc_fix_fast\fP"
.br
.ti -1c
.RI "class \fBsc_fixed\fP"
.br
.ti -1c
.RI "class \fBsc_fixed_fast\fP"
.br
.ti -1c
.RI "class \fBsc_fxcast_switch\fP"
.br
.ti -1c
.RI "class \fBsc_fxnum\fP"
.br
.ti -1c
.RI "class \fBsc_fxnum_bitref\fP"
.br
.ti -1c
.RI "class \fBsc_fxnum_bitref_r\fP"
.br
.ti -1c
.RI "class \fBsc_fxnum_fast\fP"
.br
.ti -1c
.RI "class \fBsc_fxnum_fast_bitref\fP"
.br
.ti -1c
.RI "class \fBsc_fxnum_fast_bitref_r\fP"
.br
.ti -1c
.RI "class \fBsc_fxnum_fast_observer\fP"
.br
.ti -1c
.RI "class \fBsc_fxnum_fast_subref\fP"
.br
.ti -1c
.RI "class \fBsc_fxnum_fast_subref_r\fP"
.br
.ti -1c
.RI "class \fBsc_fxnum_observer\fP"
.br
.ti -1c
.RI "class \fBsc_fxnum_subref\fP"
.br
.ti -1c
.RI "class \fBsc_fxnum_subref_r\fP"
.br
.ti -1c
.RI "class \fBsc_fxtype_params\fP"
.br
.ti -1c
.RI "class \fBsc_fxval\fP"
.br
.ti -1c
.RI "class \fBsc_fxval_fast\fP"
.br
.ti -1c
.RI "class \fBsc_fxval_fast_observer\fP"
.br
.ti -1c
.RI "class \fBsc_fxval_observer\fP"
.br
.ti -1c
.RI "class \fBsc_generic_base\fP"
.br
.ti -1c
.RI "class \fBsc_global\fP"
.br
.ti -1c
.RI "class \fBsc_int\fP"
.br
.ti -1c
.RI "class \fBsc_int_base\fP"
.br
.ti -1c
.RI "class \fBsc_int_bitref\fP"
.br
.ti -1c
.RI "class \fBsc_int_bitref_r\fP"
.br
.ti -1c
.RI "class \fBsc_int_subref\fP"
.br
.ti -1c
.RI "class \fBsc_int_subref_r\fP"
.br
.ti -1c
.RI "class \fBsc_length_param\fP"
.br
.ti -1c
.RI "class \fBsc_logic\fP"
.br
.ti -1c
.RI "class \fBsc_lv\fP"
.br
.ti -1c
.RI "class \fBsc_lv_base\fP"
.br
.ti -1c
.RI "struct \fBsc_mixed_proxy_traits_helper\fP"
.br
.ti -1c
.RI "struct \fBsc_mixed_proxy_traits_helper< X, X >\fP"
.br
.ti -1c
.RI "class \fBsc_proxy\fP"
.br
.ti -1c
.RI "struct \fBsc_proxy_traits\fP"
.br
.ti -1c
.RI "struct \fBsc_proxy_traits< sc_bitref< X > >\fP"
.br
.ti -1c
.RI "struct \fBsc_proxy_traits< sc_bitref_r< X > >\fP"
.br
.ti -1c
.RI "struct \fBsc_proxy_traits< sc_bv_base >\fP"
.br
.ti -1c
.RI "struct \fBsc_proxy_traits< sc_concref< X, Y > >\fP"
.br
.ti -1c
.RI "struct \fBsc_proxy_traits< sc_concref_r< X, Y > >\fP"
.br
.ti -1c
.RI "struct \fBsc_proxy_traits< sc_lv_base >\fP"
.br
.ti -1c
.RI "struct \fBsc_proxy_traits< sc_proxy< X > >\fP"
.br
.ti -1c
.RI "struct \fBsc_proxy_traits< sc_subref< X > >\fP"
.br
.ti -1c
.RI "struct \fBsc_proxy_traits< sc_subref_r< X > >\fP"
.br
.ti -1c
.RI "class \fBsc_signed\fP"
.br
.ti -1c
.RI "class \fBsc_signed_bitref\fP"
.br
.ti -1c
.RI "class \fBsc_signed_bitref_r\fP"
.br
.ti -1c
.RI "class \fBsc_signed_subref\fP"
.br
.ti -1c
.RI "class \fBsc_signed_subref_r\fP"
.br
.ti -1c
.RI "class \fBsc_string_old\fP"
.br
.ti -1c
.RI "class \fBsc_subref\fP"
.br
.ti -1c
.RI "class \fBsc_subref_r\fP"
.br
.ti -1c
.RI "class \fBsc_ufix\fP"
.br
.ti -1c
.RI "class \fBsc_ufix_fast\fP"
.br
.ti -1c
.RI "class \fBsc_ufixed\fP"
.br
.ti -1c
.RI "class \fBsc_ufixed_fast\fP"
.br
.ti -1c
.RI "class \fBsc_uint\fP"
.br
.ti -1c
.RI "class \fBsc_uint_base\fP"
.br
.ti -1c
.RI "class \fBsc_uint_bitref\fP"
.br
.ti -1c
.RI "class \fBsc_uint_bitref_r\fP"
.br
.ti -1c
.RI "class \fBsc_uint_subref\fP"
.br
.ti -1c
.RI "class \fBsc_uint_subref_r\fP"
.br
.ti -1c
.RI "class \fBsc_unsigned\fP"
.br
.ti -1c
.RI "class \fBsc_unsigned_bitref\fP"
.br
.ti -1c
.RI "class \fBsc_unsigned_bitref_r\fP"
.br
.ti -1c
.RI "class \fBsc_unsigned_subref\fP"
.br
.ti -1c
.RI "class \fBsc_unsigned_subref_r\fP"
.br
.ti -1c
.RI "class \fBsc_value_base\fP"
.br
.ti -1c
.RI "class \fBsc_without_context\fP"
.br
.ti -1c
.RI "class \fBscfx_ieee_double\fP"
.br
.ti -1c
.RI "class \fBscfx_ieee_float\fP"
.br
.ti -1c
.RI "class \fBscfx_index\fP"
.br
.ti -1c
.RI "class \fBscfx_mant\fP"
.br
.ti -1c
.RI "class \fBscfx_mant_ref\fP"
.br
.ti -1c
.RI "class \fBscfx_params\fP"
.br
.ti -1c
.RI "class \fBscfx_pow10\fP"
.br
.ti -1c
.RI "class \fBscfx_rep\fP"
.br
.ti -1c
.RI "class \fBscfx_string\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBsc_context\fP< \fBsc_fxcast_switch\fP > \fBsc_fxcast_context\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBsc_context\fP< \fBsc_fxtype_params\fP > \fBsc_fxtype_context\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBunsigned\fP int \fBword\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBunsigned\fP \fBshort\fP \fBhalf_word\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBsc_context\fP< \fBsc_length_param\fP > \fBsc_length_context\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBunsigned\fP \fBchar\fP \fBuchar\fP"
.br
.ti -1c
.RI "\fBtypedef\fP int \fBsmall_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBunsigned\fP int \fBsc_digit\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBint64_t\fP \fBint64\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBuint64_t\fP \fBuint64\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBint64\fP \fBint_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBuint64\fP \fBuint_type\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBsc_logic_value_t\fP { \fBLog_0\fP = 0, \fBLog_1\fP, \fBLog_Z\fP, \fBLog_X\fP }"
.br
.ti -1c
.RI "enum \fBsc_context_begin\fP { \fBSC_NOW\fP, \fBSC_LATER\fP }"
.br
.ti -1c
.RI "enum \fBsc_enc\fP { \fBSC_TC_\fP, \fBSC_US_\fP }"
.br
.ti -1c
.RI "enum \fBsc_q_mode\fP { \fBSC_RND\fP, \fBSC_RND_ZERO\fP, \fBSC_RND_MIN_INF\fP, \fBSC_RND_INF\fP, \fBSC_RND_CONV\fP, \fBSC_TRN\fP, \fBSC_TRN_ZERO\fP }"
.br
.ti -1c
.RI "enum \fBsc_o_mode\fP { \fBSC_SAT\fP, \fBSC_SAT_ZERO\fP, \fBSC_SAT_SYM\fP, \fBSC_WRAP\fP, \fBSC_WRAP_SM\fP }"
.br
.ti -1c
.RI "enum \fBsc_switch\fP { \fBSC_OFF\fP, \fBSC_ON\fP }"
.br
.ti -1c
.RI "enum \fBsc_fmt\fP { \fBSC_F\fP, \fBSC_E\fP }"
.br
.ti -1c
.RI "enum \fBsc_numrep\fP { \fBSC_NOBASE\fP = 0, \fBSC_BIN\fP = 2, \fBSC_OCT\fP = 8, \fBSC_DEC\fP = 10, \fBSC_HEX\fP = 16, \fBSC_BIN_US\fP, \fBSC_BIN_SM\fP, \fBSC_OCT_US\fP, \fBSC_OCT_SM\fP, \fBSC_HEX_US\fP, \fBSC_HEX_SM\fP, \fBSC_CSD\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBvoid\fP \fBsc_deprecated_sc_bit\fP ()"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_bit\fP &\fBa\fP, \fBconst\fP \fBsc_bit\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_bit\fP &\fBa\fP, \fBconst\fP \fBsc_bit\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBequal\fP (\fBconst\fP \fBsc_bit\fP &\fBa\fP, \fBconst\fP \fBsc_bit\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBnot_equal\fP (\fBconst\fP \fBsc_bit\fP &\fBa\fP, \fBconst\fP \fBsc_bit\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_bit\fP \fBoperator~\fP (\fBconst\fP \fBsc_bit\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_bit\fP \fBb_not\fP (\fBconst\fP \fBsc_bit\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBb_not\fP (\fBsc_bit\fP &\fBr\fP, \fBconst\fP \fBsc_bit\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_bit\fP \fBoperator&\fP (\fBconst\fP \fBsc_bit\fP &\fBa\fP, \fBconst\fP \fBsc_bit\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_bit\fP \fBoperator|\fP (\fBconst\fP \fBsc_bit\fP &\fBa\fP, \fBconst\fP \fBsc_bit\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_bit\fP \fBoperator^\fP (\fBconst\fP \fBsc_bit\fP &\fBa\fP, \fBconst\fP \fBsc_bit\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_bit\fP \fBb_and\fP (\fBconst\fP \fBsc_bit\fP &\fBa\fP, \fBconst\fP \fBsc_bit\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_bit\fP \fBb_or\fP (\fBconst\fP \fBsc_bit\fP &\fBa\fP, \fBconst\fP \fBsc_bit\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_bit\fP \fBb_xor\fP (\fBconst\fP \fBsc_bit\fP &\fBa\fP, \fBconst\fP \fBsc_bit\fP &\fBb\fP)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &\fBos\fP, \fBconst\fP \fBsc_bit\fP &\fBa\fP)"
.br
.ti -1c
.RI "inline::std::istream & \fBoperator>>\fP (::std::istream &\fBis\fP, \fBsc_bit\fP &\fBa\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_logic\fP \fBoperator&\fP (\fBconst\fP \fBsc_bitref_r\fP< \fBT1\fP > &\fBa\fP, \fBconst\fP \fBsc_bitref_r\fP< \fBT2\fP > &\fBb\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_logic\fP \fBoperator|\fP (\fBconst\fP \fBsc_bitref_r\fP< \fBT1\fP > &\fBa\fP, \fBconst\fP \fBsc_bitref_r\fP< \fBT2\fP > &\fBb\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_logic\fP \fBoperator^\fP (\fBconst\fP \fBsc_bitref_r\fP< \fBT1\fP > &\fBa\fP, \fBconst\fP \fBsc_bitref_r\fP< \fBT2\fP > &\fBb\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_bitref_r\fP< \fBT1\fP > &\fBa\fP, \fBconst\fP \fBsc_bitref_r\fP< \fBT2\fP > &\fBb\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_bitref_r\fP< \fBT1\fP > &\fBa\fP, \fBconst\fP \fBsc_bitref_r\fP< \fBT2\fP > &\fBb\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT1\fP >, \fBsc_bitref_r\fP< \fBT2\fP > > \fBoperator,\fP (\fBsc_bitref_r\fP< \fBT1\fP >, \fBsc_bitref_r\fP< \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT1\fP >, \fBsc_subref_r\fP< \fBT2\fP > > \fBoperator,\fP (\fBsc_bitref_r\fP< \fBT1\fP >, \fBsc_subref_r\fP< \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT1\fP >, \fBsc_concref_r\fP< \fBT2\fP, \fBT3\fP > > \fBoperator,\fP (\fBsc_bitref_r\fP< \fBT1\fP >, \fBsc_concref_r\fP< \fBT2\fP, \fBT3\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT1\fP >, \fBT2\fP > \fBoperator,\fP (\fBsc_bitref_r\fP< \fBT1\fP >, \fBconst\fP \fBsc_proxy\fP< \fBT2\fP > &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT\fP >, \fBsc_lv_base\fP > \fBoperator,\fP (\fBsc_bitref_r\fP< \fBT\fP >, \fBconst\fP \fBchar\fP *)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_bitref_r\fP< \fBT\fP > > \fBoperator,\fP (\fBconst\fP \fBchar\fP *, \fBsc_bitref_r\fP< \fBT\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT\fP >, \fBsc_lv_base\fP > \fBoperator,\fP (\fBsc_bitref_r\fP< \fBT\fP >, \fBconst\fP \fBsc_logic\fP &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_bitref_r\fP< \fBT\fP > > \fBoperator,\fP (\fBconst\fP \fBsc_logic\fP &, \fBsc_bitref_r\fP< \fBT\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT\fP >, \fBsc_lv_base\fP > \fBoperator,\fP (\fBsc_bitref_r\fP< \fBT\fP >, \fBbool\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_bitref_r\fP< \fBT\fP > > \fBoperator,\fP (\fBbool\fP, \fBsc_bitref_r\fP< \fBT\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT1\fP >, \fBsc_bitref_r\fP< \fBT2\fP > > \fBconcat\fP (\fBsc_bitref_r\fP< \fBT1\fP >, \fBsc_bitref_r\fP< \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT1\fP >, \fBsc_subref_r\fP< \fBT2\fP > > \fBconcat\fP (\fBsc_bitref_r\fP< \fBT1\fP >, \fBsc_subref_r\fP< \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT1\fP >, \fBsc_concref_r\fP< \fBT2\fP, \fBT3\fP > > \fBconcat\fP (\fBsc_bitref_r\fP< \fBT1\fP >, \fBsc_concref_r\fP< \fBT2\fP, \fBT3\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT1\fP >, \fBT2\fP > \fBconcat\fP (\fBsc_bitref_r\fP< \fBT1\fP >, \fBconst\fP \fBsc_proxy\fP< \fBT2\fP > &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT\fP >, \fBsc_lv_base\fP > \fBconcat\fP (\fBsc_bitref_r\fP< \fBT\fP >, \fBconst\fP \fBchar\fP *)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_bitref_r\fP< \fBT\fP > > \fBconcat\fP (\fBconst\fP \fBchar\fP *, \fBsc_bitref_r\fP< \fBT\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT\fP >, \fBsc_lv_base\fP > \fBconcat\fP (\fBsc_bitref_r\fP< \fBT\fP >, \fBconst\fP \fBsc_logic\fP &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_bitref_r\fP< \fBT\fP > > \fBconcat\fP (\fBconst\fP \fBsc_logic\fP &, \fBsc_bitref_r\fP< \fBT\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT\fP >, \fBsc_lv_base\fP > \fBconcat\fP (\fBsc_bitref_r\fP< \fBT\fP >, \fBbool\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_bitref_r\fP< \fBT\fP > > \fBconcat\fP (\fBbool\fP, \fBsc_bitref_r\fP< \fBT\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBsc_bitref\fP< \fBT1\fP >, \fBsc_bitref\fP< \fBT2\fP > > \fBoperator,\fP (\fBsc_bitref\fP< \fBT1\fP >, \fBsc_bitref\fP< \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBsc_bitref\fP< \fBT1\fP >, \fBsc_subref\fP< \fBT2\fP > > \fBoperator,\fP (\fBsc_bitref\fP< \fBT1\fP >, \fBsc_subref\fP< \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref\fP< \fBsc_bitref\fP< \fBT1\fP >, \fBsc_concref\fP< \fBT2\fP, \fBT3\fP > > \fBoperator,\fP (\fBsc_bitref\fP< \fBT1\fP >, \fBsc_concref\fP< \fBT2\fP, \fBT3\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBsc_bitref\fP< \fBT1\fP >, \fBT2\fP > \fBoperator,\fP (\fBsc_bitref\fP< \fBT1\fP >, \fBsc_proxy\fP< \fBT2\fP > &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBsc_bitref\fP< \fBT1\fP >, \fBsc_bitref\fP< \fBT2\fP > > \fBconcat\fP (\fBsc_bitref\fP< \fBT1\fP >, \fBsc_bitref\fP< \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBsc_bitref\fP< \fBT1\fP >, \fBsc_subref\fP< \fBT2\fP > > \fBconcat\fP (\fBsc_bitref\fP< \fBT1\fP >, \fBsc_subref\fP< \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref\fP< \fBsc_bitref\fP< \fBT1\fP >, \fBsc_concref\fP< \fBT2\fP, \fBT3\fP > > \fBconcat\fP (\fBsc_bitref\fP< \fBT1\fP >, \fBsc_concref\fP< \fBT2\fP, \fBT3\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBsc_bitref\fP< \fBT1\fP >, \fBT2\fP > \fBconcat\fP (\fBsc_bitref\fP< \fBT1\fP >, \fBsc_proxy\fP< \fBT2\fP > &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > ::std::istream & \fBoperator>>\fP (::std::istream &, \fBsc_bitref\fP< \fBT\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT1\fP >, \fBsc_bitref_r\fP< \fBT2\fP > > \fBoperator,\fP (\fBsc_subref_r\fP< \fBT1\fP >, \fBsc_bitref_r\fP< \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT1\fP >, \fBsc_subref_r\fP< \fBT2\fP > > \fBoperator,\fP (\fBsc_subref_r\fP< \fBT1\fP >, \fBsc_subref_r\fP< \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT1\fP >, \fBsc_concref_r\fP< \fBT2\fP, \fBT3\fP > > \fBoperator,\fP (\fBsc_subref_r\fP< \fBT1\fP >, \fBsc_concref_r\fP< \fBT2\fP, \fBT3\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT1\fP >, \fBT2\fP > \fBoperator,\fP (\fBsc_subref_r\fP< \fBT1\fP >, \fBconst\fP \fBsc_proxy\fP< \fBT2\fP > &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT\fP >, \fBsc_lv_base\fP > \fBoperator,\fP (\fBsc_subref_r\fP< \fBT\fP >, \fBconst\fP \fBchar\fP *)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_subref_r\fP< \fBT\fP > > \fBoperator,\fP (\fBconst\fP \fBchar\fP *, \fBsc_subref_r\fP< \fBT\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT\fP >, \fBsc_lv_base\fP > \fBoperator,\fP (\fBsc_subref_r\fP< \fBT\fP >, \fBconst\fP \fBsc_logic\fP &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_subref_r\fP< \fBT\fP > > \fBoperator,\fP (\fBconst\fP \fBsc_logic\fP &, \fBsc_subref_r\fP< \fBT\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT\fP >, \fBsc_bv_base\fP > \fBoperator,\fP (\fBsc_subref_r\fP< \fBT\fP >, \fBbool\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bv_base\fP, \fBsc_subref_r\fP< \fBT\fP > > \fBoperator,\fP (\fBbool\fP, \fBsc_subref_r\fP< \fBT\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT1\fP >, \fBsc_bitref_r\fP< \fBT2\fP > > \fBconcat\fP (\fBsc_subref_r\fP< \fBT1\fP >, \fBsc_bitref_r\fP< \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT1\fP >, \fBsc_subref_r\fP< \fBT2\fP > > \fBconcat\fP (\fBsc_subref_r\fP< \fBT1\fP >, \fBsc_subref_r\fP< \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT1\fP >, \fBsc_concref_r\fP< \fBT2\fP, \fBT3\fP > > \fBconcat\fP (\fBsc_subref_r\fP< \fBT1\fP >, \fBsc_concref_r\fP< \fBT2\fP, \fBT3\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT1\fP >, \fBT2\fP > \fBconcat\fP (\fBsc_subref_r\fP< \fBT1\fP >, \fBconst\fP \fBsc_proxy\fP< \fBT2\fP > &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT\fP >, \fBsc_lv_base\fP > \fBconcat\fP (\fBsc_subref_r\fP< \fBT\fP >, \fBconst\fP \fBchar\fP *)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_subref_r\fP< \fBT\fP > > \fBconcat\fP (\fBconst\fP \fBchar\fP *, \fBsc_subref_r\fP< \fBT\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT\fP >, \fBsc_lv_base\fP > \fBconcat\fP (\fBsc_subref_r\fP< \fBT\fP >, \fBconst\fP \fBsc_logic\fP &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_subref_r\fP< \fBT\fP > > \fBconcat\fP (\fBconst\fP \fBsc_logic\fP &, \fBsc_subref_r\fP< \fBT\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT\fP >, \fBsc_bv_base\fP > \fBconcat\fP (\fBsc_subref_r\fP< \fBT\fP >, \fBbool\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bv_base\fP, \fBsc_subref_r\fP< \fBT\fP > > \fBconcat\fP (\fBbool\fP, \fBsc_subref_r\fP< \fBT\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBsc_subref\fP< \fBT1\fP >, \fBsc_bitref\fP< \fBT2\fP > > \fBoperator,\fP (\fBsc_subref\fP< \fBT1\fP >, \fBsc_bitref\fP< \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBsc_subref\fP< \fBT1\fP >, \fBsc_subref\fP< \fBT2\fP > > \fBoperator,\fP (\fBsc_subref\fP< \fBT1\fP >, \fBsc_subref\fP< \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref\fP< \fBsc_subref\fP< \fBT1\fP >, \fBsc_concref\fP< \fBT2\fP, \fBT3\fP > > \fBoperator,\fP (\fBsc_subref\fP< \fBT1\fP >, \fBsc_concref\fP< \fBT2\fP, \fBT3\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBsc_subref\fP< \fBT1\fP >, \fBT2\fP > \fBoperator,\fP (\fBsc_subref\fP< \fBT1\fP >, \fBsc_proxy\fP< \fBT2\fP > &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBsc_subref\fP< \fBT1\fP >, \fBsc_bitref\fP< \fBT2\fP > > \fBconcat\fP (\fBsc_subref\fP< \fBT1\fP >, \fBsc_bitref\fP< \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBsc_subref\fP< \fBT1\fP >, \fBsc_subref\fP< \fBT2\fP > > \fBconcat\fP (\fBsc_subref\fP< \fBT1\fP >, \fBsc_subref\fP< \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref\fP< \fBsc_subref\fP< \fBT1\fP >, \fBsc_concref\fP< \fBT2\fP, \fBT3\fP > > \fBconcat\fP (\fBsc_subref\fP< \fBT1\fP >, \fBsc_concref\fP< \fBT2\fP, \fBT3\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBsc_subref\fP< \fBT1\fP >, \fBT2\fP > \fBconcat\fP (\fBsc_subref\fP< \fBT1\fP >, \fBsc_proxy\fP< \fBT2\fP > &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > inline::std::istream & \fBoperator>>\fP (::std::istream &, \fBsc_subref\fP< \fBT\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_bitref_r\fP< \fBT3\fP > > \fBoperator,\fP (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_bitref_r\fP< \fBT3\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_subref_r\fP< \fBT3\fP > > \fBoperator,\fP (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_subref_r\fP< \fBT3\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP , \fBclass\fP \fBT4\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_concref_r\fP< \fBT3\fP, \fBT4\fP > > \fBoperator,\fP (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_concref_r\fP< \fBT3\fP, \fBT4\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBT3\fP > \fBoperator,\fP (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBconst\fP \fBsc_proxy\fP< \fBT3\fP > &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_lv_base\fP > \fBoperator,\fP (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBconst\fP \fBchar\fP *)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > > \fBoperator,\fP (\fBconst\fP \fBchar\fP *, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_lv_base\fP > \fBoperator,\fP (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBconst\fP \fBsc_logic\fP &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > > \fBoperator,\fP (\fBconst\fP \fBsc_logic\fP &, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_bv_base\fP > \fBoperator,\fP (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBbool\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_bv_base\fP, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > > \fBoperator,\fP (\fBbool\fP, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_bitref_r\fP< \fBT3\fP > > \fBconcat\fP (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_bitref_r\fP< \fBT3\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_subref_r\fP< \fBT3\fP > > \fBconcat\fP (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_subref_r\fP< \fBT3\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP , \fBclass\fP \fBT4\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_concref_r\fP< \fBT3\fP, \fBT4\fP > > \fBconcat\fP (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_concref_r\fP< \fBT3\fP, \fBT4\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBT3\fP > \fBconcat\fP (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBconst\fP \fBsc_proxy\fP< \fBT3\fP > &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_lv_base\fP > \fBconcat\fP (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBconst\fP \fBchar\fP *)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > > \fBconcat\fP (\fBconst\fP \fBchar\fP *, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_lv_base\fP > \fBconcat\fP (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBconst\fP \fBsc_logic\fP &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > > \fBconcat\fP (\fBconst\fP \fBsc_logic\fP &, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_bv_base\fP > \fBconcat\fP (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBbool\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_bv_base\fP, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > > \fBconcat\fP (\fBbool\fP, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref\fP< \fBsc_concref\fP< \fBT1\fP, \fBT2\fP >, \fBsc_bitref\fP< \fBT3\fP > > \fBoperator,\fP (\fBsc_concref\fP< \fBT1\fP, \fBT2\fP >, \fBsc_bitref\fP< \fBT3\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref\fP< \fBsc_concref\fP< \fBT1\fP, \fBT2\fP >, \fBsc_subref\fP< \fBT3\fP > > \fBoperator,\fP (\fBsc_concref\fP< \fBT1\fP, \fBT2\fP >, \fBsc_subref\fP< \fBT3\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP , \fBclass\fP \fBT4\fP > \fBsc_concref\fP< \fBsc_concref\fP< \fBT1\fP, \fBT2\fP >, \fBsc_concref\fP< \fBT3\fP, \fBT4\fP > > \fBoperator,\fP (\fBsc_concref\fP< \fBT1\fP, \fBT2\fP >, \fBsc_concref\fP< \fBT3\fP, \fBT4\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref\fP< \fBsc_concref\fP< \fBT1\fP, \fBT2\fP >, \fBT3\fP > \fBoperator,\fP (\fBsc_concref\fP< \fBT1\fP, \fBT2\fP >, \fBsc_proxy\fP< \fBT3\fP > &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref\fP< \fBsc_concref\fP< \fBT1\fP, \fBT2\fP >, \fBsc_bitref\fP< \fBT3\fP > > \fBconcat\fP (\fBsc_concref\fP< \fBT1\fP, \fBT2\fP >, \fBsc_bitref\fP< \fBT3\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref\fP< \fBsc_concref\fP< \fBT1\fP, \fBT2\fP >, \fBsc_subref\fP< \fBT3\fP > > \fBconcat\fP (\fBsc_concref\fP< \fBT1\fP, \fBT2\fP >, \fBsc_subref\fP< \fBT3\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP , \fBclass\fP \fBT4\fP > \fBsc_concref\fP< \fBsc_concref\fP< \fBT1\fP, \fBT2\fP >, \fBsc_concref\fP< \fBT3\fP, \fBT4\fP > > \fBconcat\fP (\fBsc_concref\fP< \fBT1\fP, \fBT2\fP >, \fBsc_concref\fP< \fBT3\fP, \fBT4\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref\fP< \fBsc_concref\fP< \fBT1\fP, \fBT2\fP >, \fBT3\fP > \fBconcat\fP (\fBsc_concref\fP< \fBT1\fP, \fBT2\fP >, \fBsc_proxy\fP< \fBT3\fP > &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > inline::std::istream & \fBoperator>>\fP (::std::istream &, \fBsc_concref\fP< \fBT1\fP, \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBT1\fP, \fBsc_bitref_r\fP< \fBT2\fP > > \fBoperator,\fP (\fBconst\fP \fBsc_proxy\fP< \fBT1\fP > &, \fBsc_bitref_r\fP< \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBT1\fP, \fBsc_subref_r\fP< \fBT2\fP > > \fBoperator,\fP (\fBconst\fP \fBsc_proxy\fP< \fBT1\fP > &, \fBsc_subref_r\fP< \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref_r\fP< \fBT1\fP, \fBsc_concref_r\fP< \fBT2\fP, \fBT3\fP > > \fBoperator,\fP (\fBconst\fP \fBsc_proxy\fP< \fBT1\fP > &, \fBsc_concref_r\fP< \fBT2\fP, \fBT3\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > \fBoperator,\fP (\fBconst\fP \fBsc_proxy\fP< \fBT1\fP > &, \fBconst\fP \fBsc_proxy\fP< \fBT2\fP > &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBT\fP, \fBsc_lv_base\fP > \fBoperator,\fP (\fBconst\fP \fBsc_proxy\fP< \fBT\fP > &, \fBconst\fP \fBchar\fP *)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBT\fP > \fBoperator,\fP (\fBconst\fP \fBchar\fP *, \fBconst\fP \fBsc_proxy\fP< \fBT\fP > &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBT\fP, \fBsc_lv_base\fP > \fBoperator,\fP (\fBconst\fP \fBsc_proxy\fP< \fBT\fP > &, \fBconst\fP \fBsc_logic\fP &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBT\fP > \fBoperator,\fP (\fBconst\fP \fBsc_logic\fP &, \fBconst\fP \fBsc_proxy\fP< \fBT\fP > &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBT\fP, \fBsc_bv_base\fP > \fBoperator,\fP (\fBconst\fP \fBsc_proxy\fP< \fBT\fP > &, \fBbool\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bv_base\fP, \fBT\fP > \fBoperator,\fP (\fBbool\fP, \fBconst\fP \fBsc_proxy\fP< \fBT\fP > &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBT1\fP, \fBsc_bitref_r\fP< \fBT2\fP > > \fBconcat\fP (\fBconst\fP \fBsc_proxy\fP< \fBT1\fP > &, \fBsc_bitref_r\fP< \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBT1\fP, \fBsc_subref_r\fP< \fBT2\fP > > \fBconcat\fP (\fBconst\fP \fBsc_proxy\fP< \fBT1\fP > &, \fBsc_subref_r\fP< \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref_r\fP< \fBT1\fP, \fBsc_concref_r\fP< \fBT2\fP, \fBT3\fP > > \fBconcat\fP (\fBconst\fP \fBsc_proxy\fP< \fBT1\fP > &, \fBsc_concref_r\fP< \fBT2\fP, \fBT3\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > \fBconcat\fP (\fBconst\fP \fBsc_proxy\fP< \fBT1\fP > &, \fBconst\fP \fBsc_proxy\fP< \fBT2\fP > &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBT\fP, \fBsc_lv_base\fP > \fBconcat\fP (\fBconst\fP \fBsc_proxy\fP< \fBT\fP > &, \fBconst\fP \fBchar\fP *)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBT\fP > \fBconcat\fP (\fBconst\fP \fBchar\fP *, \fBconst\fP \fBsc_proxy\fP< \fBT\fP > &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBT\fP, \fBsc_lv_base\fP > \fBconcat\fP (\fBconst\fP \fBsc_proxy\fP< \fBT\fP > &, \fBconst\fP \fBsc_logic\fP &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBT\fP > \fBconcat\fP (\fBconst\fP \fBsc_logic\fP &, \fBconst\fP \fBsc_proxy\fP< \fBT\fP > &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBT\fP, \fBsc_bv_base\fP > \fBconcat\fP (\fBconst\fP \fBsc_proxy\fP< \fBT\fP > &, \fBbool\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bv_base\fP, \fBT\fP > \fBconcat\fP (\fBbool\fP, \fBconst\fP \fBsc_proxy\fP< \fBT\fP > &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBT1\fP, \fBsc_bitref\fP< \fBT2\fP > > \fBoperator,\fP (\fBsc_proxy\fP< \fBT1\fP > &, \fBsc_bitref\fP< \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBT1\fP, \fBsc_subref\fP< \fBT2\fP > > \fBoperator,\fP (\fBsc_proxy\fP< \fBT1\fP > &, \fBsc_subref\fP< \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref\fP< \fBT1\fP, \fBsc_concref\fP< \fBT2\fP, \fBT3\fP > > \fBoperator,\fP (\fBsc_proxy\fP< \fBT1\fP > &, \fBsc_concref\fP< \fBT2\fP, \fBT3\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBT1\fP, \fBT2\fP > \fBoperator,\fP (\fBsc_proxy\fP< \fBT1\fP > &, \fBsc_proxy\fP< \fBT2\fP > &)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBT1\fP, \fBsc_bitref\fP< \fBT2\fP > > \fBconcat\fP (\fBsc_proxy\fP< \fBT1\fP > &, \fBsc_bitref\fP< \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBT1\fP, \fBsc_subref\fP< \fBT2\fP > > \fBconcat\fP (\fBsc_proxy\fP< \fBT1\fP > &, \fBsc_subref\fP< \fBT2\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref\fP< \fBT1\fP, \fBsc_concref\fP< \fBT2\fP, \fBT3\fP > > \fBconcat\fP (\fBsc_proxy\fP< \fBT1\fP > &, \fBsc_concref\fP< \fBT2\fP, \fBT3\fP >)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBT1\fP, \fBT2\fP > \fBconcat\fP (\fBsc_proxy\fP< \fBT1\fP > &, \fBsc_proxy\fP< \fBT2\fP > &)"
.br
.ti -1c
.RI "template<\fBclass\fP X > inline::std::istream & \fBoperator>>\fP (::std::istream &\fBis\fP, \fBsc_bitref\fP< X > \fBa\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > inline::std::istream & \fBoperator>>\fP (::std::istream &\fBis\fP, \fBsc_subref\fP< X > \fBa\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > inline::std::istream & \fBoperator>>\fP (::std::istream &\fBis\fP, \fBsc_concref\fP< X, \fBY\fP > \fBa\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_logic\fP \fBoperator&\fP (\fBconst\fP \fBsc_logic\fP &\fBa\fP, \fBconst\fP \fBsc_logic\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_logic\fP \fBoperator|\fP (\fBconst\fP \fBsc_logic\fP &\fBa\fP, \fBconst\fP \fBsc_logic\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_logic\fP \fBoperator^\fP (\fBconst\fP \fBsc_logic\fP &\fBa\fP, \fBconst\fP \fBsc_logic\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_logic\fP &\fBa\fP, \fBconst\fP \fBsc_logic\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_logic\fP &\fBa\fP, \fBconst\fP \fBsc_logic\fP &\fBb\fP)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &\fBos\fP, \fBconst\fP \fBsc_logic\fP &\fBa\fP)"
.br
.ti -1c
.RI "inline::std::istream & \fBoperator>>\fP (::std::istream &\fBis\fP, \fBsc_logic\fP &\fBa\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > X & \fBoperator&=\fP (\fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBpy\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBpy\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > X & \fBoperator|=\fP (\fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBpy\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBpy\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > X & \fBoperator^=\fP (\fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBpy\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBpy\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBlrotate\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBx\fP, int \fBn\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBrrotate\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBx\fP, int \fBn\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBreverse\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBx\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBpy\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT\fP >, \fBsc_bv_base\fP > \fBoperator,\fP (\fBsc_bitref_r\fP< \fBT\fP > \fBa\fP, \fBbool\fP \fBb\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bv_base\fP, \fBsc_bitref_r\fP< \fBT\fP > > \fBoperator,\fP (\fBbool\fP \fBa\fP, \fBsc_bitref_r\fP< \fBT\fP > \fBb\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT\fP >, \fBsc_bv_base\fP > \fBconcat\fP (\fBsc_bitref_r\fP< \fBT\fP > \fBa\fP, \fBbool\fP \fBb\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bv_base\fP, \fBsc_bitref_r\fP< \fBT\fP > > \fBconcat\fP (\fBbool\fP \fBa\fP, \fBsc_bitref_r\fP< \fBT\fP > \fBb\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBsc_proxy_out_of_bounds\fP (\fBconst\fP \fBchar\fP *msg=\fBNULL\fP, \fBint64\fP \fBval\fP=0)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBvoid\fP \fBassign_p_\fP (\fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBpy\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBT\fP > \fBvoid\fP \fBassign_v_\fP (\fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBT\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBconst\fP std::string \fBconvert_to_bin\fP (\fBconst\fP \fBchar\fP *s)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBconst\fP std::string \fBconvert_to_fmt\fP (\fBconst\fP std::string &s, \fBsc_numrep\fP \fBnumrep\fP, \fBbool\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBpy\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBvoid\fP \fBget_words_\fP (\fBconst\fP X &\fBx\fP, int wi, \fBsc_digit\fP &\fBx_dw\fP, \fBsc_digit\fP &\fBx_cw\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBvoid\fP \fBset_words_\fP (X &\fBx\fP, int wi, \fBsc_digit\fP \fBx_dw\fP, \fBsc_digit\fP \fBx_cw\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBvoid\fP \fBextend_sign_w_\fP (X &\fBx\fP, int wi, \fBbool\fP sign)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBvoid\fP \fBassign_v_\fP (\fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_int_base\fP &\fBa\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBvoid\fP \fBassign_v_\fP (\fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_signed\fP &\fBa\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBvoid\fP \fBassign_v_\fP (\fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_uint_base\fP &\fBa\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBvoid\fP \fBassign_v_\fP (\fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_unsigned\fP &\fBa\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > X & \fBb_and_assign_\fP (\fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBpy\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > X & \fBb_or_assign_\fP (\fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBpy\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > X & \fBb_xor_assign_\fP (\fBsc_proxy\fP< X > &\fBa\fP, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBb\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBsc_proxy\fP< X >::value_type \fBand_reduce\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBa\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBsc_proxy\fP< X >::value_type \fBnand_reduce\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBa\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBsc_proxy\fP< X >::value_type \fBor_reduce\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBa\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBsc_proxy\fP< X >::value_type \fBnor_reduce\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBa\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBsc_proxy\fP< X >::value_type \fBxor_reduce\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBa\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBsc_proxy\fP< X >::value_type \fBxnor_reduce\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBa\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > inline::std::ostream & \fBoperator<<\fP (::std::ostream &\fBos\fP, \fBconst\fP \fBsc_proxy\fP< X > &\fBa\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > inline::std::istream & \fBoperator>>\fP (::std::istream &\fBis\fP, \fBsc_proxy\fP< X > &\fBa\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBb_not\fP (\fBsc_fix\fP &\fBc\fP, \fBconst\fP \fBsc_fix\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBb_not\fP (\fBsc_fix_fast\fP &\fBc\fP, \fBconst\fP \fBsc_fix_fast\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_fxcast_switch\fP &\fBa\fP, \fBconst\fP \fBsc_fxcast_switch\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_fxcast_switch\fP &\fBa\fP, \fBconst\fP \fBsc_fxcast_switch\fP &\fBb\fP)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &\fBos\fP, \fBconst\fP \fBsc_fxcast_switch\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBconst\fP std::string \fBto_string\fP (\fBsc_enc\fP)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &\fBos\fP, \fBsc_enc\fP enc)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBconst\fP std::string \fBto_string\fP (\fBsc_q_mode\fP)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &\fBos\fP, \fBsc_q_mode\fP q_mode)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBconst\fP std::string \fBto_string\fP (\fBsc_o_mode\fP)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &\fBos\fP, \fBsc_o_mode\fP o_mode)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBconst\fP std::string \fBto_string\fP (\fBsc_switch\fP)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &\fBos\fP, \fBsc_switch\fP \fBsw\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBconst\fP std::string \fBto_string\fP (\fBsc_fmt\fP)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &\fBos\fP, \fBsc_fmt\fP fmt)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &\fBos\fP, \fBconst\fP \fBsc_fxnum_bitref_r\fP &\fBa\fP)"
.br
.ti -1c
.RI "inline::std::istream & \fBoperator>>\fP (::std::istream &\fBis\fP, \fBsc_fxnum_bitref\fP &\fBa\fP)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &\fBos\fP, \fBconst\fP \fBsc_fxnum_fast_bitref_r\fP &\fBa\fP)"
.br
.ti -1c
.RI "inline::std::istream & \fBoperator>>\fP (::std::istream &\fBis\fP, \fBsc_fxnum_fast_bitref\fP &\fBa\fP)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &\fBos\fP, \fBconst\fP \fBsc_fxnum_subref\fP &\fBa\fP)"
.br
.ti -1c
.RI "inline::std::istream & \fBoperator>>\fP (::std::istream &\fBis\fP, \fBsc_fxnum_subref\fP &\fBa\fP)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &\fBos\fP, \fBconst\fP \fBsc_fxnum_fast_subref_r\fP &\fBa\fP)"
.br
.ti -1c
.RI "inline::std::istream & \fBoperator>>\fP (::std::istream &\fBis\fP, \fBsc_fxnum_fast_subref\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBneg\fP (\fBsc_fxval\fP &\fBc\fP, \fBconst\fP \fBsc_fxnum\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBneg\fP (\fBsc_fxnum\fP &\fBc\fP, \fBconst\fP \fBsc_fxnum\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval\fP \fBoperator/\fP (\fBconst\fP \fBsc_fxnum\fP &\fBa\fP, \fBconst\fP \fBsc_fxnum\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval\fP \fBoperator/\fP (\fBconst\fP \fBsc_fxnum\fP &\fBa\fP, \fBconst\fP \fBsc_fxval\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval\fP \fBoperator/\fP (\fBconst\fP \fBsc_fxval\fP &\fBa\fP, \fBconst\fP \fBsc_fxnum\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval\fP \fBoperator<<\fP (\fBconst\fP \fBsc_fxnum\fP &\fBa\fP, int \fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval\fP \fBoperator>>\fP (\fBconst\fP \fBsc_fxnum\fP &\fBa\fP, int \fBb\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBlshift\fP (\fBsc_fxval\fP &\fBc\fP, \fBconst\fP \fBsc_fxnum\fP &\fBa\fP, int \fBb\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBrshift\fP (\fBsc_fxval\fP &\fBc\fP, \fBconst\fP \fBsc_fxnum\fP &\fBa\fP, int \fBb\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBlshift\fP (\fBsc_fxnum\fP &\fBc\fP, \fBconst\fP \fBsc_fxnum\fP &\fBa\fP, int \fBb\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBrshift\fP (\fBsc_fxnum\fP &\fBc\fP, \fBconst\fP \fBsc_fxnum\fP &\fBa\fP, int \fBb\fP)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &\fBos\fP, \fBconst\fP \fBsc_fxnum\fP &\fBa\fP)"
.br
.ti -1c
.RI "inline::std::istream & \fBoperator>>\fP (::std::istream &\fBis\fP, \fBsc_fxnum\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBneg\fP (\fBsc_fxval_fast\fP &\fBc\fP, \fBconst\fP \fBsc_fxnum_fast\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBneg\fP (\fBsc_fxnum_fast\fP &\fBc\fP, \fBconst\fP \fBsc_fxnum_fast\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval_fast\fP \fBoperator/\fP (\fBconst\fP \fBsc_fxnum_fast\fP &\fBa\fP, \fBconst\fP \fBsc_fxnum_fast\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval_fast\fP \fBoperator/\fP (\fBconst\fP \fBsc_fxnum_fast\fP &\fBa\fP, \fBconst\fP \fBsc_fxval_fast\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval_fast\fP \fBoperator/\fP (\fBconst\fP \fBsc_fxval_fast\fP &\fBa\fP, \fBconst\fP \fBsc_fxnum_fast\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval_fast\fP \fBoperator<<\fP (\fBconst\fP \fBsc_fxnum_fast\fP &\fBa\fP, int \fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval_fast\fP \fBoperator>>\fP (\fBconst\fP \fBsc_fxnum_fast\fP &\fBa\fP, int \fBb\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBlshift\fP (\fBsc_fxval_fast\fP &\fBc\fP, \fBconst\fP \fBsc_fxnum_fast\fP &\fBa\fP, int \fBb\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBrshift\fP (\fBsc_fxval_fast\fP &\fBc\fP, \fBconst\fP \fBsc_fxnum_fast\fP &\fBa\fP, int \fBb\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBlshift\fP (\fBsc_fxnum_fast\fP &\fBc\fP, \fBconst\fP \fBsc_fxnum_fast\fP &\fBa\fP, int \fBb\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBrshift\fP (\fBsc_fxnum_fast\fP &\fBc\fP, \fBconst\fP \fBsc_fxnum_fast\fP &\fBa\fP, int \fBb\fP)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &\fBos\fP, \fBconst\fP \fBsc_fxnum_fast\fP &\fBa\fP)"
.br
.ti -1c
.RI "inline::std::istream & \fBoperator>>\fP (::std::istream &\fBis\fP, \fBsc_fxnum_fast\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_fxtype_params\fP &\fBa\fP, \fBconst\fP \fBsc_fxtype_params\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_fxtype_params\fP &\fBa\fP, \fBconst\fP \fBsc_fxtype_params\fP &\fBb\fP)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &\fBos\fP, \fBconst\fP \fBsc_fxtype_params\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBneg\fP (\fBsc_fxval\fP &\fBc\fP, \fBconst\fP \fBsc_fxval\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval\fP \fBoperator/\fP (\fBconst\fP \fBsc_fxval\fP &\fBa\fP, \fBconst\fP \fBsc_fxval\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBDEFN_BIN_OP_T\fP (/, \fBdiv\fP, \fBint64\fP) DEFN_BIN_OP_T(/"
.br
.ti -1c
.RI "\fBuint64\fP \fBDEFN_BIN_OP_T\fP (/, \fBdiv\fP, \fBconst\fP \fBsc_int_base\fP &) DEFN_BIN_OP_T(/"
.br
.ti -1c
.RI "\fBuint64\fP \fBconst\fP \fBsc_uint_base\fP & \fBDEFN_BIN_OP_T\fP (/, \fBdiv\fP, \fBconst\fP \fBsc_signed\fP &) \fBinline\fP \fBconst\fP \fBsc_fxval\fP \fBoperator\fP<<(\fBconst\fP \fBsc_fxval\fP &\fBa\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval\fP \fBoperator>>\fP (\fBconst\fP \fBsc_fxval\fP &\fBa\fP, int \fBb\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBlshift\fP (\fBsc_fxval\fP &\fBc\fP, \fBconst\fP \fBsc_fxval\fP &\fBa\fP, int \fBb\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBrshift\fP (\fBsc_fxval\fP &\fBc\fP, \fBconst\fP \fBsc_fxval\fP &\fBa\fP, int \fBb\fP)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &\fBos\fP, \fBconst\fP \fBsc_fxval\fP &\fBa\fP)"
.br
.ti -1c
.RI "inline::std::istream & \fBoperator>>\fP (::std::istream &\fBis\fP, \fBsc_fxval\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBneg\fP (\fBsc_fxval_fast\fP &\fBc\fP, \fBconst\fP \fBsc_fxval_fast\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval_fast\fP \fBoperator/\fP (\fBconst\fP \fBsc_fxval_fast\fP &\fBa\fP, \fBconst\fP \fBsc_fxval_fast\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval_fast\fP \fBoperator<<\fP (\fBconst\fP \fBsc_fxval_fast\fP &\fBa\fP, int \fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval_fast\fP \fBoperator>>\fP (\fBconst\fP \fBsc_fxval_fast\fP &\fBa\fP, int \fBb\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBlshift\fP (\fBsc_fxval_fast\fP &\fBc\fP, \fBconst\fP \fBsc_fxval_fast\fP &\fBa\fP, int \fBb\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBrshift\fP (\fBsc_fxval_fast\fP &\fBc\fP, \fBconst\fP \fBsc_fxval_fast\fP &\fBa\fP, int \fBb\fP)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &\fBos\fP, \fBconst\fP \fBsc_fxval_fast\fP &\fBa\fP)"
.br
.ti -1c
.RI "inline::std::istream & \fBoperator>>\fP (::std::istream &\fBis\fP, \fBsc_fxval_fast\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBb_not\fP (\fBsc_ufix\fP &\fBc\fP, \fBconst\fP \fBsc_ufix\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBb_not\fP (\fBsc_ufix_fast\fP &\fBc\fP, \fBconst\fP \fBsc_ufix_fast\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBdouble\fP \fBscfx_pow2\fP (int \fBexp\fP)"
.br
.ti -1c
.RI "\fBdouble\fP \fBuint64_to_double\fP (\fBuint64\fP \fBa\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBcomplement\fP (\fBscfx_mant\fP &target, \fBconst\fP \fBscfx_mant\fP &\fBsource\fP, int size)"
.br
.ti -1c
.RI "\fBvoid\fP \fBinc\fP (\fBscfx_mant\fP &\fBmant\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBmultiply\fP (\fBscfx_rep\fP &, \fBconst\fP \fBscfx_rep\fP &, \fBconst\fP \fBscfx_rep\fP &, int \fBmax_wl\fP=\fBSC_DEFAULT_MAX_WL_\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBscfx_rep\fP * \fBneg_scfx_rep\fP (\fBconst\fP \fBscfx_rep\fP &)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBscfx_rep\fP * \fBmult_scfx_rep\fP (\fBconst\fP \fBscfx_rep\fP &, \fBconst\fP \fBscfx_rep\fP &, int \fBmax_wl\fP=\fBSC_DEFAULT_MAX_WL_\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBscfx_rep\fP * \fBdiv_scfx_rep\fP (\fBconst\fP \fBscfx_rep\fP &, \fBconst\fP \fBscfx_rep\fP &, int \fBmax_wl\fP=\fBSC_DEFAULT_DIV_WL_\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBscfx_rep\fP * \fBadd_scfx_rep\fP (\fBconst\fP \fBscfx_rep\fP &, \fBconst\fP \fBscfx_rep\fP &, int \fBmax_wl\fP=\fBSC_DEFAULT_MAX_WL_\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBscfx_rep\fP * \fBsub_scfx_rep\fP (\fBconst\fP \fBscfx_rep\fP &, \fBconst\fP \fBscfx_rep\fP &, int \fBmax_wl\fP=\fBSC_DEFAULT_MAX_WL_\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBscfx_rep\fP * \fBlsh_scfx_rep\fP (\fBconst\fP \fBscfx_rep\fP &, int)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBscfx_rep\fP * \fBrsh_scfx_rep\fP (\fBconst\fP \fBscfx_rep\fP &, int)"
.br
.ti -1c
.RI "\fBSC_API\fP int \fBcmp_scfx_rep\fP (\fBconst\fP \fBscfx_rep\fP &, \fBconst\fP \fBscfx_rep\fP &)"
.br
.ti -1c
.RI "\fBscfx_rep\fP * \fBquantization_scfx_rep\fP (\fBconst\fP \fBscfx_rep\fP &\fBa\fP, \fBconst\fP \fBscfx_params\fP &\fBparams\fP, \fBbool\fP &\fBq_flag\fP)"
.br
.ti -1c
.RI "\fBscfx_rep\fP * \fBoverflow_scfx_rep\fP (\fBconst\fP \fBscfx_rep\fP &\fBa\fP, \fBconst\fP \fBscfx_params\fP &\fBparams\fP, \fBbool\fP &\fBo_flag\fP)"
.br
.ti -1c
.RI "int \fBscfx_find_msb\fP (\fBunsigned\fP \fBlong\fP \fBx\fP)"
.br
.ti -1c
.RI "int \fBscfx_find_lsb\fP (\fBunsigned\fP \fBlong\fP \fBx\fP)"
.br
.ti -1c
.RI "int \fBscfx_parse_sign\fP (\fBconst\fP \fBchar\fP *&s, \fBbool\fP &\fBsign_char\fP)"
.br
.ti -1c
.RI "\fBsc_numrep\fP \fBscfx_parse_prefix\fP (\fBconst\fP \fBchar\fP *&s)"
.br
.ti -1c
.RI "int \fBscfx_parse_base\fP (\fBconst\fP \fBchar\fP *&s)"
.br
.ti -1c
.RI "\fBbool\fP \fBscfx_is_equal\fP (\fBconst\fP \fBchar\fP *\fBa\fP, \fBconst\fP \fBchar\fP *\fBb\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBscfx_is_nan\fP (\fBconst\fP \fBchar\fP *s)"
.br
.ti -1c
.RI "\fBbool\fP \fBscfx_is_inf\fP (\fBconst\fP \fBchar\fP *s)"
.br
.ti -1c
.RI "\fBbool\fP \fBscfx_exp_start\fP (\fBconst\fP \fBchar\fP *s)"
.br
.ti -1c
.RI "\fBbool\fP \fBscfx_is_digit\fP (\fBchar\fP \fBc\fP, \fBsc_numrep\fP \fBnumrep\fP)"
.br
.ti -1c
.RI "int \fBscfx_to_digit\fP (\fBchar\fP \fBc\fP, \fBsc_numrep\fP \fBnumrep\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBscfx_print_nan\fP (\fBscfx_string\fP &s)"
.br
.ti -1c
.RI "\fBvoid\fP \fBscfx_print_inf\fP (\fBscfx_string\fP &s, \fBbool\fP negative)"
.br
.ti -1c
.RI "\fBvoid\fP \fBscfx_print_prefix\fP (\fBscfx_string\fP &s, \fBsc_numrep\fP \fBnumrep\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBscfx_print_exp\fP (\fBscfx_string\fP &s, int \fBexp\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBscfx_tc2csd\fP (\fBscfx_string\fP &, int)"
.br
.ti -1c
.RI "\fBvoid\fP \fBscfx_csd2tc\fP (\fBscfx_string\fP &)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_int_base\fP &\fBa\fP, \fBconst\fP \fBsc_int_base\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_int_base\fP &\fBa\fP, \fBconst\fP \fBsc_int_base\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator<\fP (\fBconst\fP \fBsc_int_base\fP &\fBa\fP, \fBconst\fP \fBsc_int_base\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator<=\fP (\fBconst\fP \fBsc_int_base\fP &\fBa\fP, \fBconst\fP \fBsc_int_base\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator>\fP (\fBconst\fP \fBsc_int_base\fP &\fBa\fP, \fBconst\fP \fBsc_int_base\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator>=\fP (\fBconst\fP \fBsc_int_base\fP &\fBa\fP, \fBconst\fP \fBsc_int_base\fP &\fBb\fP)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &, \fBconst\fP \fBsc_int_bitref_r\fP &)"
.br
.ti -1c
.RI "inline::std::istream & \fBoperator>>\fP (::std::istream &, \fBsc_int_bitref\fP &)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &, \fBconst\fP \fBsc_int_subref_r\fP &)"
.br
.ti -1c
.RI "inline::std::istream & \fBoperator>>\fP (::std::istream &, \fBsc_int_subref\fP &)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &, \fBconst\fP \fBsc_int_base\fP &)"
.br
.ti -1c
.RI "inline::std::istream & \fBoperator>>\fP (::std::istream &, \fBsc_int_base\fP &)"
.br
.ti -1c
.RI "\fBbool\fP \fBand_reduce\fP (\fBconst\fP \fBsc_int_subref_r\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBnand_reduce\fP (\fBconst\fP \fBsc_int_subref_r\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBor_reduce\fP (\fBconst\fP \fBsc_int_subref_r\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBnor_reduce\fP (\fBconst\fP \fBsc_int_subref_r\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBxor_reduce\fP (\fBconst\fP \fBsc_int_subref_r\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBxnor_reduce\fP (\fBconst\fP \fBsc_int_subref_r\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBand_reduce\fP (\fBconst\fP \fBsc_int_base\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBnand_reduce\fP (\fBconst\fP \fBsc_int_base\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBor_reduce\fP (\fBconst\fP \fBsc_int_base\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBnor_reduce\fP (\fBconst\fP \fBsc_int_base\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBxor_reduce\fP (\fBconst\fP \fBsc_int_base\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBxnor_reduce\fP (\fBconst\fP \fBsc_int_base\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_length_param\fP &, \fBconst\fP \fBsc_length_param\fP &)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_length_param\fP &, \fBconst\fP \fBsc_length_param\fP &)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &\fBos\fP, \fBconst\fP \fBsc_length_param\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBadd_on_help\fP (\fBsmall_type\fP &\fBus\fP, int \fBunb\fP, int \fBund\fP, \fBsc_digit\fP *\fBud\fP, \fBsmall_type\fP \fBvs\fP, int \fBvnb\fP, int \fBvnd\fP, \fBconst\fP \fBsc_digit\fP *\fBvd\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBmul_on_help_signed\fP (\fBsmall_type\fP &\fBus\fP, int \fBunb\fP, int \fBund\fP, \fBsc_digit\fP *\fBud\fP, int \fBvnb\fP, int \fBvnd\fP, \fBconst\fP \fBsc_digit\fP *\fBvd\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBdiv_on_help_signed\fP (\fBsmall_type\fP &\fBus\fP, int \fBunb\fP, int \fBund\fP, \fBsc_digit\fP *\fBud\fP, int \fBvnb\fP, int \fBvnd\fP, \fBconst\fP \fBsc_digit\fP *\fBvd\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBmod_on_help_signed\fP (\fBsmall_type\fP &\fBus\fP, int \fBunb\fP, int \fBund\fP, \fBsc_digit\fP *\fBud\fP, int \fBvnb\fP, int \fBvnd\fP, \fBconst\fP \fBsc_digit\fP *\fBvd\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBmul_on_help_unsigned\fP (\fBsmall_type\fP &\fBus\fP, int \fBunb\fP, int \fBund\fP, \fBsc_digit\fP *\fBud\fP, int \fBvnb\fP, int \fBvnd\fP, \fBconst\fP \fBsc_digit\fP *\fBvd\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBdiv_on_help_unsigned\fP (\fBsmall_type\fP &\fBus\fP, int \fBunb\fP, int \fBund\fP, \fBsc_digit\fP *\fBud\fP, int \fBvnb\fP, int \fBvnd\fP, \fBconst\fP \fBsc_digit\fP *\fBvd\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBmod_on_help_unsigned\fP (\fBsmall_type\fP &\fBus\fP, int \fBunb\fP, int \fBund\fP, \fBsc_digit\fP *\fBud\fP, int \fBvnb\fP, int \fBvnd\fP, \fBconst\fP \fBsc_digit\fP *\fBvd\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBand_on_help\fP (\fBsmall_type\fP \fBus\fP, int \fBunb\fP, int \fBund\fP, \fBsc_digit\fP *\fBud\fP, \fBsmall_type\fP \fBvs\fP, int \fBvnb\fP, int \fBvnd\fP, \fBconst\fP \fBsc_digit\fP *\fBvd\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBor_on_help\fP (\fBsmall_type\fP \fBus\fP, int \fBunb\fP, int \fBund\fP, \fBsc_digit\fP *\fBud\fP, \fBsmall_type\fP \fBvs\fP, int \fBvnb\fP, int \fBvnd\fP, \fBconst\fP \fBsc_digit\fP *\fBvd\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBxor_on_help\fP (\fBsmall_type\fP \fBus\fP, int \fBunb\fP, int \fBund\fP, \fBsc_digit\fP *\fBud\fP, \fBsmall_type\fP \fBvs\fP, int \fBvnb\fP, int \fBvnd\fP, \fBconst\fP \fBsc_digit\fP *\fBvd\fP)"
.br
.ti -1c
.RI "\fBsc_numrep\fP \fBsc_io_base\fP (::std::ostream &, \fBsc_numrep\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBsc_io_show_base\fP (::std::ostream &)"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP (\fBsc_numrep\fP)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &\fBos\fP, \fBsc_numrep\fP \fBnumrep\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsmall_type\fP \fBfsm_move\fP (\fBchar\fP \fBc\fP, \fBsmall_type\fP &\fBb\fP, \fBsmall_type\fP &s, \fBsmall_type\fP &state)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBparse_binary_bits\fP (\fBconst\fP \fBchar\fP *\fBsrc_p\fP, int \fBdst_n\fP, \fBsc_digit\fP *\fBdata_p\fP, \fBsc_digit\fP *\fBctrl_p\fP=0)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBparse_hex_bits\fP (\fBconst\fP \fBchar\fP *\fBsrc_p\fP, int \fBdst_n\fP, \fBsc_digit\fP *\fBdata_p\fP, \fBsc_digit\fP *\fBctrl_p\fP=0)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBconst\fP \fBchar\fP * \fBget_base_and_sign\fP (\fBconst\fP \fBchar\fP *v, \fBsmall_type\fP &\fBbase\fP, \fBsmall_type\fP &sign)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsmall_type\fP \fBvec_from_str\fP (int \fBunb\fP, int \fBund\fP, \fBsc_digit\fP *\fBu\fP, \fBconst\fP \fBchar\fP *v, \fBsc_numrep\fP \fBbase\fP=\fBSC_NOBASE\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBvec_add\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP, int \fBvlen\fP, \fBconst\fP \fBsc_digit\fP *v, \fBsc_digit\fP *\fBw\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBvec_add_on\fP (int \fBulen\fP, \fBsc_digit\fP *\fBu\fP, int \fBvlen\fP, \fBconst\fP \fBsc_digit\fP *v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBvec_add_on2\fP (int \fBulen\fP, \fBsc_digit\fP *\fBu\fP, int \fBvlen\fP, \fBconst\fP \fBsc_digit\fP *v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBvec_add_small\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP, \fBsc_digit\fP v, \fBsc_digit\fP *\fBw\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBvec_add_small_on\fP (int \fBulen\fP, \fBsc_digit\fP *\fBu\fP, \fBsc_digit\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBvec_sub\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP, int \fBvlen\fP, \fBconst\fP \fBsc_digit\fP *v, \fBsc_digit\fP *\fBw\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBvec_sub_on\fP (int \fBulen\fP, \fBsc_digit\fP *\fBu\fP, int \fBvlen\fP, \fBconst\fP \fBsc_digit\fP *v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBvec_sub_on2\fP (int \fBulen\fP, \fBsc_digit\fP *\fBu\fP, int \fBvlen\fP, \fBconst\fP \fBsc_digit\fP *v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBvec_sub_small\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP, \fBsc_digit\fP v, \fBsc_digit\fP *\fBw\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBvec_sub_small_on\fP (int \fBulen\fP, \fBsc_digit\fP *\fBu\fP, \fBsc_digit\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBvec_mul\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP, int \fBvlen\fP, \fBconst\fP \fBsc_digit\fP *v, \fBsc_digit\fP *\fBw\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBvec_mul_small\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP, \fBsc_digit\fP v, \fBsc_digit\fP *\fBw\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBvec_mul_small_on\fP (int \fBulen\fP, \fBsc_digit\fP *\fBu\fP, \fBsc_digit\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBvec_div_large\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP, int \fBvlen\fP, \fBconst\fP \fBsc_digit\fP *v, \fBsc_digit\fP *\fBw\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBvec_div_small\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP, \fBsc_digit\fP v, \fBsc_digit\fP *\fBw\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBvec_rem_large\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP, int \fBvlen\fP, \fBconst\fP \fBsc_digit\fP *v, \fBsc_digit\fP *\fBw\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_digit\fP \fBvec_rem_small\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP, \fBsc_digit\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_digit\fP \fBvec_rem_on_small\fP (int \fBulen\fP, \fBsc_digit\fP *\fBu\fP, \fBsc_digit\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP int \fBvec_to_char\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP, int \fBvlen\fP, \fBuchar\fP *v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBvec_from_char\fP (int \fBulen\fP, \fBconst\fP \fBuchar\fP *\fBu\fP, int \fBvlen\fP, \fBsc_digit\fP *v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBvec_shift_left\fP (int \fBulen\fP, \fBsc_digit\fP *\fBu\fP, int \fBnsl\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBvec_shift_right\fP (int \fBvlen\fP, \fBsc_digit\fP *\fBu\fP, int \fBnsr\fP, \fBsc_digit\fP \fBfill\fP=0)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBvec_reverse\fP (int \fBunb\fP, int \fBund\fP, \fBsc_digit\fP *\fBud\fP, int \fBl\fP, int \fBr\fP=0)"
.br
.ti -1c
.RI "\fBsc_digit\fP \fBlow_half\fP (\fBsc_digit\fP d)"
.br
.ti -1c
.RI "\fBsc_digit\fP \fBhigh_half\fP (\fBsc_digit\fP d)"
.br
.ti -1c
.RI "\fBsc_digit\fP \fBhigh_half_masked\fP (\fBsc_digit\fP d)"
.br
.ti -1c
.RI "\fBsc_digit\fP \fBconcat\fP (\fBsc_digit\fP \fBh\fP, \fBsc_digit\fP \fBl\fP)"
.br
.ti -1c
.RI "\fBsc_digit\fP \fBone_and_ones\fP (int \fBn\fP)"
.br
.ti -1c
.RI "\fBsc_digit\fP \fBone_and_zeros\fP (int \fBn\fP)"
.br
.ti -1c
.RI "int \fBdigit_ord\fP (int \fBi\fP)"
.br
.ti -1c
.RI "int \fBbit_ord\fP (int \fBi\fP)"
.br
.ti -1c
.RI "int \fBvec_cmp\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP, int \fBvlen\fP, \fBconst\fP \fBsc_digit\fP *v)"
.br
.ti -1c
.RI "int \fBvec_find_first_nonzero\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP)"
.br
.ti -1c
.RI "int \fBvec_skip_leading_zeros\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP)"
.br
.ti -1c
.RI "int \fBvec_skip_and_cmp\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP, int \fBvlen\fP, \fBconst\fP \fBsc_digit\fP *v)"
.br
.ti -1c
.RI "\fBvoid\fP \fBvec_zero\fP (int \fBfrom\fP, int \fBulen\fP, \fBsc_digit\fP *\fBu\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBvec_zero\fP (int \fBulen\fP, \fBsc_digit\fP *\fBu\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBvec_copy\fP (int \fBn\fP, \fBsc_digit\fP *\fBu\fP, \fBconst\fP \fBsc_digit\fP *v)"
.br
.ti -1c
.RI "\fBvoid\fP \fBvec_copy_and_zero\fP (int \fBulen\fP, \fBsc_digit\fP *\fBu\fP, int \fBvlen\fP, \fBconst\fP \fBsc_digit\fP *v)"
.br
.ti -1c
.RI "\fBvoid\fP \fBvec_complement\fP (int \fBulen\fP, \fBsc_digit\fP *\fBu\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBType\fP > \fBvoid\fP \fBfrom_uint\fP (int \fBulen\fP, \fBsc_digit\fP *\fBu\fP, \fBType\fP v)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBType\fP > \fBsmall_type\fP \fBget_sign\fP (\fBType\fP &\fBu\fP)"
.br
.ti -1c
.RI "\fBsmall_type\fP \fBmul_signs\fP (\fBsmall_type\fP \fBus\fP, \fBsmall_type\fP \fBvs\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBType\fP > \fBvoid\fP \fBdiv_by_zero\fP (\fBType\fP s)"
.br
.ti -1c
.RI "\fBsmall_type\fP \fBcheck_for_zero\fP (\fBsmall_type\fP s, int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBcheck_for_zero\fP (int \fBulen\fP, \fBconst\fP \fBsc_digit\fP *\fBu\fP)"
.br
.ti -1c
.RI "\fBsmall_type\fP \fBmake_zero\fP (int \fBnd\fP, \fBsc_digit\fP *d)"
.br
.ti -1c
.RI "\fBvoid\fP \fBtrim\fP (\fBsmall_type\fP \fBadded\fP, int \fBnb\fP, int \fBnd\fP, \fBsc_digit\fP *d)"
.br
.ti -1c
.RI "\fBvoid\fP \fBconvert_SM_to_2C_trimmed\fP (\fBsmall_type\fP \fBadded\fP, \fBsmall_type\fP s, int \fBnb\fP, int \fBnd\fP, \fBsc_digit\fP *d)"
.br
.ti -1c
.RI "\fBvoid\fP \fBconvert_SM_to_2C\fP (\fBsmall_type\fP s, int \fBnd\fP, \fBsc_digit\fP *d)"
.br
.ti -1c
.RI "\fBvoid\fP \fBtrim_signed\fP (int \fBnb\fP, int \fBnd\fP, \fBsc_digit\fP *d)"
.br
.ti -1c
.RI "\fBsmall_type\fP \fBconvert_signed_2C_to_SM\fP (int \fBnb\fP, int \fBnd\fP, \fBsc_digit\fP *d)"
.br
.ti -1c
.RI "\fBsmall_type\fP \fBconvert_signed_SM_to_2C_to_SM\fP (\fBsmall_type\fP s, int \fBnb\fP, int \fBnd\fP, \fBsc_digit\fP *d)"
.br
.ti -1c
.RI "\fBvoid\fP \fBconvert_signed_SM_to_2C_trimmed\fP (\fBsmall_type\fP s, int \fBnb\fP, int \fBnd\fP, \fBsc_digit\fP *d)"
.br
.ti -1c
.RI "\fBvoid\fP \fBconvert_signed_SM_to_2C\fP (\fBsmall_type\fP s, int \fBnd\fP, \fBsc_digit\fP *d)"
.br
.ti -1c
.RI "\fBvoid\fP \fBtrim_unsigned\fP (int \fBnb\fP, int \fBnd\fP, \fBsc_digit\fP *d)"
.br
.ti -1c
.RI "\fBsmall_type\fP \fBconvert_unsigned_2C_to_SM\fP (int \fBnb\fP, int \fBnd\fP, \fBsc_digit\fP *d)"
.br
.ti -1c
.RI "\fBsmall_type\fP \fBconvert_unsigned_SM_to_2C_to_SM\fP (\fBsmall_type\fP s, int \fBnb\fP, int \fBnd\fP, \fBsc_digit\fP *d)"
.br
.ti -1c
.RI "\fBvoid\fP \fBconvert_unsigned_SM_to_2C_trimmed\fP (\fBsmall_type\fP s, int \fBnb\fP, int \fBnd\fP, \fBsc_digit\fP *d)"
.br
.ti -1c
.RI "\fBvoid\fP \fBconvert_unsigned_SM_to_2C\fP (\fBsmall_type\fP s, int \fBnd\fP, \fBsc_digit\fP *d)"
.br
.ti -1c
.RI "\fBvoid\fP \fBcopy_digits_signed\fP (\fBsmall_type\fP &\fBus\fP, int \fBunb\fP, int \fBund\fP, \fBsc_digit\fP *\fBud\fP, int \fBvnb\fP, int \fBvnd\fP, \fBconst\fP \fBsc_digit\fP *\fBvd\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBcopy_digits_unsigned\fP (\fBsmall_type\fP &\fBus\fP, int \fBunb\fP, int \fBund\fP, \fBsc_digit\fP *\fBud\fP, int, int \fBvnd\fP, \fBconst\fP \fBsc_digit\fP *\fBvd\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBsafe_set\fP (int \fBi\fP, \fBbool\fP v, \fBsc_digit\fP *d)"
.br
.ti -1c
.RI "\fBbool\fP \fBis_nan\fP (\fBdouble\fP v)"
.br
.ti -1c
.RI "\fBbool\fP \fBis_inf\fP (\fBdouble\fP v)"
.br
.ti -1c
.RI "\fBvoid\fP \fBis_bad_double\fP (\fBdouble\fP v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBadd_signed_friend\fP (\fBsmall_type\fP \fBus\fP, int \fBunb\fP, int \fBund\fP, \fBconst\fP \fBsc_digit\fP *\fBud\fP, \fBsmall_type\fP \fBvs\fP, int \fBvnb\fP, int \fBvnd\fP, \fBconst\fP \fBsc_digit\fP *\fBvd\fP)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBsub_signed_friend\fP (\fBsmall_type\fP \fBus\fP, int \fBunb\fP, int \fBund\fP, \fBconst\fP \fBsc_digit\fP *\fBud\fP, \fBsmall_type\fP \fBvs\fP, int \fBvnb\fP, int \fBvnd\fP, \fBconst\fP \fBsc_digit\fP *\fBvd\fP)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBmul_signed_friend\fP (\fBsmall_type\fP s, int \fBunb\fP, int \fBund\fP, \fBconst\fP \fBsc_digit\fP *\fBud\fP, int \fBvnb\fP, int \fBvnd\fP, \fBconst\fP \fBsc_digit\fP *\fBvd\fP)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBdiv_signed_friend\fP (\fBsmall_type\fP s, int \fBunb\fP, int \fBund\fP, \fBconst\fP \fBsc_digit\fP *\fBud\fP, int \fBvnb\fP, int \fBvnd\fP, \fBconst\fP \fBsc_digit\fP *\fBvd\fP)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBmod_signed_friend\fP (\fBsmall_type\fP \fBus\fP, int \fBunb\fP, int \fBund\fP, \fBconst\fP \fBsc_digit\fP *\fBud\fP, int \fBvnb\fP, int \fBvnd\fP, \fBconst\fP \fBsc_digit\fP *\fBvd\fP)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBand_signed_friend\fP (\fBsmall_type\fP \fBus\fP, int \fBunb\fP, int \fBund\fP, \fBconst\fP \fBsc_digit\fP *\fBud\fP, \fBsmall_type\fP \fBvs\fP, int \fBvnb\fP, int \fBvnd\fP, \fBconst\fP \fBsc_digit\fP *\fBvd\fP)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBor_signed_friend\fP (\fBsmall_type\fP \fBus\fP, int \fBunb\fP, int \fBund\fP, \fBconst\fP \fBsc_digit\fP *\fBud\fP, \fBsmall_type\fP \fBvs\fP, int \fBvnb\fP, int \fBvnd\fP, \fBconst\fP \fBsc_digit\fP *\fBvd\fP)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBxor_signed_friend\fP (\fBsmall_type\fP \fBus\fP, int \fBunb\fP, int \fBund\fP, \fBconst\fP \fBsc_digit\fP *\fBud\fP, \fBsmall_type\fP \fBvs\fP, int \fBvnb\fP, int \fBvnd\fP, \fBconst\fP \fBsc_digit\fP *\fBvd\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator+\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator+\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator+\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator+\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator+\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator+\fP (\fBint64\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator+\fP (\fBlong\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator+\fP (int \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator+\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator+\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator+\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator+\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator+\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator+\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator+\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator+\fP (\fBint64\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator+\fP (\fBuint64\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator+\fP (\fBlong\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator+\fP (\fBunsigned\fP \fBlong\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator+\fP (int \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator+\fP (\fBunsigned\fP int \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator+\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator+\fP (\fBconst\fP \fBsc_int_base\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator+\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator+\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator+\fP (\fBconst\fP \fBsc_int_base\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator+\fP (\fBconst\fP \fBsc_uint_base\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator\-\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator\-\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator\-\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator\-\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator\-\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator\-\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator\-\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator\-\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator\-\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator\-\fP (\fBint64\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator\-\fP (\fBuint64\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator\-\fP (\fBlong\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator\-\fP (\fBunsigned\fP \fBlong\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator\-\fP (int \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator\-\fP (\fBunsigned\fP int \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator\-\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator\-\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator\-\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator\-\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator\-\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator\-\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator\-\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator\-\fP (\fBint64\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator\-\fP (\fBuint64\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator\-\fP (\fBlong\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator\-\fP (\fBunsigned\fP \fBlong\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator\-\fP (int \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator\-\fP (\fBunsigned\fP int \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator\-\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator\-\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator\-\fP (\fBconst\fP \fBsc_int_base\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator\-\fP (\fBconst\fP \fBsc_uint_base\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator\-\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator\-\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator\-\fP (\fBconst\fP \fBsc_int_base\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator\-\fP (\fBconst\fP \fBsc_uint_base\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator*\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator*\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator*\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator*\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator*\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator*\fP (\fBint64\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator*\fP (\fBlong\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator*\fP (int \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator*\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator*\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator*\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator*\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator*\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator*\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator*\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator*\fP (\fBint64\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator*\fP (\fBuint64\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator*\fP (\fBlong\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator*\fP (\fBunsigned\fP \fBlong\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator*\fP (int \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator*\fP (\fBunsigned\fP int \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator*\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator*\fP (\fBconst\fP \fBsc_int_base\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator*\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator*\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator*\fP (\fBconst\fP \fBsc_int_base\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator*\fP (\fBconst\fP \fBsc_uint_base\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator/\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator/\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator/\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator/\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator/\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator/\fP (\fBint64\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator/\fP (\fBlong\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator/\fP (int \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator/\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator/\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator/\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator/\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator/\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator/\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator/\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator/\fP (\fBint64\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator/\fP (\fBuint64\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator/\fP (\fBlong\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator/\fP (\fBunsigned\fP \fBlong\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator/\fP (int \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator/\fP (\fBunsigned\fP int \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator/\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator/\fP (\fBconst\fP \fBsc_int_base\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator/\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator/\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator/\fP (\fBconst\fP \fBsc_int_base\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator/\fP (\fBconst\fP \fBsc_uint_base\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator%\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator%\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator%\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator%\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator%\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator%\fP (\fBint64\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator%\fP (\fBlong\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator%\fP (int \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator%\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator%\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator%\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator%\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator%\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator%\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator%\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator%\fP (\fBint64\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator%\fP (\fBuint64\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator%\fP (\fBlong\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator%\fP (\fBunsigned\fP \fBlong\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator%\fP (int \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator%\fP (\fBunsigned\fP int \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator%\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator%\fP (\fBconst\fP \fBsc_int_base\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator%\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator%\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator%\fP (\fBconst\fP \fBsc_int_base\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator%\fP (\fBconst\fP \fBsc_uint_base\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator&\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator&\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator&\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator&\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator&\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator&\fP (\fBint64\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator&\fP (\fBlong\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator&\fP (int \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator&\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator&\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator&\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator&\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator&\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator&\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator&\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator&\fP (\fBint64\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator&\fP (\fBuint64\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator&\fP (\fBlong\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator&\fP (\fBunsigned\fP \fBlong\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator&\fP (int \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator&\fP (\fBunsigned\fP int \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator&\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator&\fP (\fBconst\fP \fBsc_int_base\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator&\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator&\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator&\fP (\fBconst\fP \fBsc_int_base\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator&\fP (\fBconst\fP \fBsc_uint_base\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator|\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator|\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator|\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator|\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator|\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator|\fP (\fBint64\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator|\fP (\fBlong\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator|\fP (int \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator|\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator|\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator|\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator|\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator|\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator|\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator|\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator|\fP (\fBint64\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator|\fP (\fBuint64\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator|\fP (\fBlong\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator|\fP (\fBunsigned\fP \fBlong\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator|\fP (int \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator|\fP (\fBunsigned\fP int \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator|\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator|\fP (\fBconst\fP \fBsc_int_base\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator|\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator|\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator|\fP (\fBconst\fP \fBsc_int_base\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator|\fP (\fBconst\fP \fBsc_uint_base\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator^\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator^\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator^\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator^\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator^\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator^\fP (\fBint64\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator^\fP (\fBlong\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator^\fP (int \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator^\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator^\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator^\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator^\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator^\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator^\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator^\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator^\fP (\fBint64\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator^\fP (\fBuint64\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator^\fP (\fBlong\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator^\fP (\fBunsigned\fP \fBlong\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator^\fP (int \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator^\fP (\fBunsigned\fP int \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator^\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator^\fP (\fBconst\fP \fBsc_int_base\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator^\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator^\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator^\fP (\fBconst\fP \fBsc_int_base\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator^\fP (\fBconst\fP \fBsc_uint_base\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator<<\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator<<\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator<<\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator<<\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator<<\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator<<\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator<<\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator<<\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator<<\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator<<\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator<<\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator>>\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator>>\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator>>\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator>>\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator>>\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator>>\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator>>\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator>>\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBsc_signed\fP \fBoperator>>\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator>>\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator>>\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator+\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator\-\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator\-\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator==\fP (\fBint64\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator==\fP (\fBuint64\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator==\fP (\fBlong\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator==\fP (\fBunsigned\fP \fBlong\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (int \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBunsigned\fP int \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_int_base\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_uint_base\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator!=\fP (\fBint64\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator!=\fP (\fBuint64\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator!=\fP (\fBlong\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator!=\fP (\fBunsigned\fP \fBlong\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator!=\fP (int \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator!=\fP (\fBunsigned\fP int \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_int_base\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_uint_base\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator<\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator<\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<\fP (\fBint64\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<\fP (\fBuint64\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<\fP (\fBlong\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<\fP (\fBunsigned\fP \fBlong\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator<\fP (int \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator<\fP (\fBunsigned\fP int \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<\fP (\fBconst\fP \fBsc_int_base\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<\fP (\fBconst\fP \fBsc_uint_base\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<=\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<=\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<=\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<=\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<=\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<=\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator<=\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator<=\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<=\fP (\fBint64\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<=\fP (\fBuint64\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<=\fP (\fBlong\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<=\fP (\fBunsigned\fP \fBlong\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator<=\fP (int \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator<=\fP (\fBunsigned\fP int \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<=\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<=\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<=\fP (\fBconst\fP \fBsc_int_base\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<=\fP (\fBconst\fP \fBsc_uint_base\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator>\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator>\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>\fP (\fBint64\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>\fP (\fBuint64\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>\fP (\fBlong\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>\fP (\fBunsigned\fP \fBlong\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator>\fP (int \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator>\fP (\fBunsigned\fP int \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>\fP (\fBconst\fP \fBsc_int_base\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>\fP (\fBconst\fP \fBsc_uint_base\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>=\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>=\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>=\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>=\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>=\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>=\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator>=\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator>=\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>=\fP (\fBint64\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>=\fP (\fBuint64\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>=\fP (\fBlong\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>=\fP (\fBunsigned\fP \fBlong\fP \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator>=\fP (int \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator>=\fP (\fBunsigned\fP int \fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>=\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>=\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP, \fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>=\fP (\fBconst\fP \fBsc_int_base\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>=\fP (\fBconst\fP \fBsc_uint_base\fP &\fBu\fP, \fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_signed\fP \fBoperator~\fP (\fBconst\fP \fBsc_signed\fP &\fBu\fP)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &, \fBconst\fP \fBsc_signed_bitref_r\fP &)"
.br
.ti -1c
.RI "inline::std::istream & \fBoperator>>\fP (::std::istream &, \fBsc_signed_bitref\fP &)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &, \fBconst\fP \fBsc_signed_subref_r\fP &)"
.br
.ti -1c
.RI "inline::std::istream & \fBoperator>>\fP (::std::istream &, \fBsc_signed_subref\fP &)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &, \fBconst\fP \fBsc_signed\fP &)"
.br
.ti -1c
.RI "inline::std::istream & \fBoperator>>\fP (::std::istream &, \fBsc_signed\fP &)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_uint_base\fP &\fBa\fP, \fBconst\fP \fBsc_uint_base\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_uint_base\fP &\fBa\fP, \fBconst\fP \fBsc_uint_base\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator<\fP (\fBconst\fP \fBsc_uint_base\fP &\fBa\fP, \fBconst\fP \fBsc_uint_base\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator<=\fP (\fBconst\fP \fBsc_uint_base\fP &\fBa\fP, \fBconst\fP \fBsc_uint_base\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator>\fP (\fBconst\fP \fBsc_uint_base\fP &\fBa\fP, \fBconst\fP \fBsc_uint_base\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator>=\fP (\fBconst\fP \fBsc_uint_base\fP &\fBa\fP, \fBconst\fP \fBsc_uint_base\fP &\fBb\fP)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &, \fBconst\fP \fBsc_uint_bitref_r\fP &)"
.br
.ti -1c
.RI "inline::std::istream & \fBoperator>>\fP (::std::istream &, \fBsc_uint_bitref\fP &)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &, \fBconst\fP \fBsc_uint_subref_r\fP &)"
.br
.ti -1c
.RI "inline::std::istream & \fBoperator>>\fP (::std::istream &, \fBsc_uint_subref\fP &)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &, \fBconst\fP \fBsc_uint_base\fP &)"
.br
.ti -1c
.RI "inline::std::istream & \fBoperator>>\fP (::std::istream &, \fBsc_uint_base\fP &)"
.br
.ti -1c
.RI "\fBbool\fP \fBand_reduce\fP (\fBconst\fP \fBsc_uint_subref_r\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBnand_reduce\fP (\fBconst\fP \fBsc_uint_subref_r\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBor_reduce\fP (\fBconst\fP \fBsc_uint_subref_r\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBnor_reduce\fP (\fBconst\fP \fBsc_uint_subref_r\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBxor_reduce\fP (\fBconst\fP \fBsc_uint_subref_r\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBxnor_reduce\fP (\fBconst\fP \fBsc_uint_subref_r\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBand_reduce\fP (\fBconst\fP \fBsc_uint_base\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBnand_reduce\fP (\fBconst\fP \fBsc_uint_base\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBor_reduce\fP (\fBconst\fP \fBsc_uint_base\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBnor_reduce\fP (\fBconst\fP \fBsc_uint_base\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBxor_reduce\fP (\fBconst\fP \fBsc_uint_base\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBxnor_reduce\fP (\fBconst\fP \fBsc_uint_base\fP &\fBa\fP)"
.br
.ti -1c
.RI "int \fBcompare_unsigned\fP (\fBsmall_type\fP \fBus\fP, int \fBunb\fP, int \fBund\fP, \fBconst\fP \fBsc_digit\fP *\fBud\fP, \fBsmall_type\fP \fBvs\fP, int \fBvnb\fP, int \fBvnd\fP, \fBconst\fP \fBsc_digit\fP *\fBvd\fP, \fBsmall_type\fP \fBif_u_signed\fP=0, \fBsmall_type\fP \fBif_v_signed\fP=0)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP \fBadd_unsigned_friend\fP (\fBsmall_type\fP \fBus\fP, int \fBunb\fP, int \fBund\fP, \fBconst\fP \fBsc_digit\fP *\fBud\fP, \fBsmall_type\fP \fBvs\fP, int \fBvnb\fP, int \fBvnd\fP, \fBconst\fP \fBsc_digit\fP *\fBvd\fP)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP \fBsub_unsigned_friend\fP (\fBsmall_type\fP \fBus\fP, int \fBunb\fP, int \fBund\fP, \fBconst\fP \fBsc_digit\fP *\fBud\fP, \fBsmall_type\fP \fBvs\fP, int \fBvnb\fP, int \fBvnd\fP, \fBconst\fP \fBsc_digit\fP *\fBvd\fP)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP \fBmul_unsigned_friend\fP (\fBsmall_type\fP s, int \fBunb\fP, int \fBund\fP, \fBconst\fP \fBsc_digit\fP *\fBud\fP, int \fBvnb\fP, int \fBvnd\fP, \fBconst\fP \fBsc_digit\fP *\fBvd\fP)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP \fBdiv_unsigned_friend\fP (\fBsmall_type\fP s, int \fBunb\fP, int \fBund\fP, \fBconst\fP \fBsc_digit\fP *\fBud\fP, int \fBvnb\fP, int \fBvnd\fP, \fBconst\fP \fBsc_digit\fP *\fBvd\fP)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP \fBmod_unsigned_friend\fP (\fBsmall_type\fP \fBus\fP, int \fBunb\fP, int \fBund\fP, \fBconst\fP \fBsc_digit\fP *\fBud\fP, int \fBvnb\fP, int \fBvnd\fP, \fBconst\fP \fBsc_digit\fP *\fBvd\fP)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP \fBand_unsigned_friend\fP (\fBsmall_type\fP \fBus\fP, int \fBunb\fP, int \fBund\fP, \fBconst\fP \fBsc_digit\fP *\fBud\fP, \fBsmall_type\fP \fBvs\fP, int \fBvnb\fP, int \fBvnd\fP, \fBconst\fP \fBsc_digit\fP *\fBvd\fP)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP \fBor_unsigned_friend\fP (\fBsmall_type\fP \fBus\fP, int \fBunb\fP, int \fBund\fP, \fBconst\fP \fBsc_digit\fP *\fBud\fP, \fBsmall_type\fP \fBvs\fP, int \fBvnb\fP, int \fBvnd\fP, \fBconst\fP \fBsc_digit\fP *\fBvd\fP)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP \fBxor_unsigned_friend\fP (\fBsmall_type\fP \fBus\fP, int \fBunb\fP, int \fBund\fP, \fBconst\fP \fBsc_digit\fP *\fBud\fP, \fBsmall_type\fP \fBvs\fP, int \fBvnb\fP, int \fBvnd\fP, \fBconst\fP \fBsc_digit\fP *\fBvd\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator+\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator+\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator+\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP \fBoperator+\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator+\fP (\fBuint64\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator+\fP (\fBunsigned\fP \fBlong\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP \fBoperator+\fP (\fBunsigned\fP int \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator+\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator+\fP (\fBconst\fP \fBsc_uint_base\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator*\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator*\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator*\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP \fBoperator*\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator*\fP (\fBuint64\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator*\fP (\fBunsigned\fP \fBlong\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP \fBoperator*\fP (\fBunsigned\fP int \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator*\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator*\fP (\fBconst\fP \fBsc_uint_base\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator/\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator/\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator/\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP \fBoperator/\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator/\fP (\fBuint64\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator/\fP (\fBunsigned\fP \fBlong\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP \fBoperator/\fP (\fBunsigned\fP int \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator/\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator/\fP (\fBconst\fP \fBsc_uint_base\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator%\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator%\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator%\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP \fBoperator%\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator%\fP (\fBuint64\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator%\fP (\fBunsigned\fP \fBlong\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP \fBoperator%\fP (\fBunsigned\fP int \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator%\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator%\fP (\fBconst\fP \fBsc_uint_base\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator&\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator&\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator&\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP \fBoperator&\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator&\fP (\fBuint64\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator&\fP (\fBunsigned\fP \fBlong\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP \fBoperator&\fP (\fBunsigned\fP int \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator&\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator&\fP (\fBconst\fP \fBsc_uint_base\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator|\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator|\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator|\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP \fBoperator|\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator|\fP (\fBuint64\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator|\fP (\fBunsigned\fP \fBlong\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP \fBoperator|\fP (\fBunsigned\fP int \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator|\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator|\fP (\fBconst\fP \fBsc_uint_base\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator^\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator^\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator^\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP \fBoperator^\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator^\fP (\fBuint64\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator^\fP (\fBunsigned\fP \fBlong\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP \fBoperator^\fP (\fBunsigned\fP int \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator^\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator^\fP (\fBconst\fP \fBsc_uint_base\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator<<\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator<<\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator<<\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator<<\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator<<\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP \fBoperator<<\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP \fBoperator<<\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator<<\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator<<\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator>>\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator>>\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator>>\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator>>\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator>>\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP \fBoperator>>\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP \fBoperator>>\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator>>\fP (\fBconst\fP \fBsc_unsigned\fP &, \fBconst\fP \fBsc_uint_base\fP &)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator>>\fP (\fBconst\fP \fBsc_unsigned\fP &, \fBconst\fP \fBsc_int_base\fP &)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator+\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator==\fP (\fBint64\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator==\fP (\fBuint64\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator==\fP (\fBlong\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator==\fP (\fBunsigned\fP \fBlong\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (int \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBunsigned\fP int \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_uint_base\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_int_base\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator!=\fP (\fBint64\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator!=\fP (\fBuint64\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator!=\fP (\fBlong\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator!=\fP (\fBunsigned\fP \fBlong\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator!=\fP (int \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator!=\fP (\fBunsigned\fP int \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_uint_base\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBsc_int_base\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator<\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator<\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<\fP (\fBint64\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<\fP (\fBuint64\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<\fP (\fBlong\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<\fP (\fBunsigned\fP \fBlong\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator<\fP (int \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator<\fP (\fBunsigned\fP int \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<\fP (\fBconst\fP \fBsc_uint_base\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<\fP (\fBconst\fP \fBsc_int_base\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator<=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator<=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<=\fP (\fBint64\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<=\fP (\fBuint64\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<=\fP (\fBlong\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<=\fP (\fBunsigned\fP \fBlong\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator<=\fP (int \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator<=\fP (\fBunsigned\fP int \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<=\fP (\fBconst\fP \fBsc_uint_base\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator<=\fP (\fBconst\fP \fBsc_int_base\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator>\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator>\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>\fP (\fBint64\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>\fP (\fBuint64\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>\fP (\fBlong\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>\fP (\fBunsigned\fP \fBlong\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator>\fP (int \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator>\fP (\fBunsigned\fP int \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>\fP (\fBconst\fP \fBsc_uint_base\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>\fP (\fBconst\fP \fBsc_int_base\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBuint64\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBlong\fP v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator>=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, int v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator>=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>=\fP (\fBint64\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>=\fP (\fBuint64\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>=\fP (\fBlong\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>=\fP (\fBunsigned\fP \fBlong\fP \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator>=\fP (int \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator>=\fP (\fBunsigned\fP int \fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP, \fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>=\fP (\fBconst\fP \fBsc_uint_base\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBbool\fP \fBoperator>=\fP (\fBconst\fP \fBsc_int_base\fP &\fBu\fP, \fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBsc_unsigned\fP \fBoperator~\fP (\fBconst\fP \fBsc_unsigned\fP &\fBu\fP)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &, \fBconst\fP \fBsc_unsigned_bitref_r\fP &)"
.br
.ti -1c
.RI "inline::std::istream & \fBoperator>>\fP (::std::istream &, \fBsc_unsigned_bitref\fP &)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &, \fBconst\fP \fBsc_unsigned_subref_r\fP &)"
.br
.ti -1c
.RI "inline::std::istream & \fBoperator>>\fP (::std::istream &, \fBsc_unsigned_subref\fP &)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &, \fBconst\fP \fBsc_unsigned\fP &)"
.br
.ti -1c
.RI "inline::std::istream & \fBoperator>>\fP (::std::istream &, \fBsc_unsigned\fP &)"
.br
.ti -1c
.RI "\fBbool\fP \fBand_reduce\fP (\fBconst\fP \fBsc_concatref\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBnand_reduce\fP (\fBconst\fP \fBsc_concatref\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBor_reduce\fP (\fBconst\fP \fBsc_concatref\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBnor_reduce\fP (\fBconst\fP \fBsc_concatref\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBxor_reduce\fP (\fBconst\fP \fBsc_concatref\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBxnor_reduce\fP (\fBconst\fP \fBsc_concatref\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP \fBoperator<<\fP (\fBconst\fP \fBsc_concatref\fP &target, \fBuint64\fP \fBshift\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP \fBoperator<<\fP (\fBconst\fP \fBsc_concatref\fP &target, \fBint64\fP \fBshift\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP \fBoperator<<\fP (\fBconst\fP \fBsc_concatref\fP &target, \fBunsigned\fP \fBlong\fP \fBshift\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP \fBoperator<<\fP (\fBconst\fP \fBsc_concatref\fP &target, int \fBshift\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP \fBoperator<<\fP (\fBconst\fP \fBsc_concatref\fP &target, \fBunsigned\fP int \fBshift\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP \fBoperator<<\fP (\fBconst\fP \fBsc_concatref\fP &target, \fBlong\fP \fBshift\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP \fBoperator>>\fP (\fBconst\fP \fBsc_concatref\fP &target, \fBuint64\fP \fBshift\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP \fBoperator>>\fP (\fBconst\fP \fBsc_concatref\fP &target, \fBint64\fP \fBshift\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP \fBoperator>>\fP (\fBconst\fP \fBsc_concatref\fP &target, \fBunsigned\fP \fBlong\fP \fBshift\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP \fBoperator>>\fP (\fBconst\fP \fBsc_concatref\fP &target, int \fBshift\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP \fBoperator>>\fP (\fBconst\fP \fBsc_concatref\fP &target, \fBunsigned\fP int \fBshift\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP \fBoperator>>\fP (\fBconst\fP \fBsc_concatref\fP &target, \fBlong\fP \fBshift\fP)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &\fBos\fP, \fBconst\fP \fBsc_concatref\fP &v)"
.br
.ti -1c
.RI "inline::std::istream & \fBoperator>>\fP (::std::istream &\fBis\fP, \fBsc_concatref\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_dt::sc_concatref\fP & \fBconcat\fP (\fBsc_dt::sc_value_base\fP &\fBa\fP, \fBsc_dt::sc_value_base\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_dt::sc_concatref\fP & \fBconcat\fP (\fBconst\fP \fBsc_dt::sc_value_base\fP &\fBa\fP, \fBconst\fP \fBsc_dt::sc_value_base\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_dt::sc_concatref\fP & \fBconcat\fP (\fBconst\fP \fBsc_dt::sc_value_base\fP &\fBa\fP, \fBbool\fP \fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_dt::sc_concatref\fP & \fBconcat\fP (\fBbool\fP \fBa\fP, \fBconst\fP \fBsc_dt::sc_value_base\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBsc_dt::sc_concatref\fP & \fBoperator,\fP (\fBsc_dt::sc_value_base\fP &\fBa\fP, \fBsc_dt::sc_value_base\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_dt::sc_concatref\fP & \fBoperator,\fP (\fBconst\fP \fBsc_dt::sc_value_base\fP &\fBa\fP, \fBconst\fP \fBsc_dt::sc_value_base\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_dt::sc_concatref\fP & \fBoperator,\fP (\fBconst\fP \fBsc_dt::sc_value_base\fP &\fBa\fP, \fBbool\fP \fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_dt::sc_concatref\fP & \fBoperator,\fP (\fBbool\fP \fBa\fP, \fBconst\fP \fBsc_dt::sc_value_base\fP &\fBb\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBconst\fP \fBT\fP \fBsc_min\fP (\fBconst\fP \fBT\fP &\fBa\fP, \fBconst\fP \fBT\fP &\fBb\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBconst\fP \fBT\fP \fBsc_max\fP (\fBconst\fP \fBT\fP &\fBa\fP, \fBconst\fP \fBT\fP &\fBb\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBconst\fP \fBT\fP \fBsc_abs\fP (\fBconst\fP \fBT\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_string_old\fP \fBoperator+\fP (\fBconst\fP \fBchar\fP *s, \fBconst\fP \fBsc_string_old\fP &t)"
.br
.ti -1c
.RI "inline::std::ostream & \fBoperator<<\fP (::std::ostream &\fBos\fP, \fBconst\fP \fBsc_string_old\fP &\fBa\fP)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBclass\fP \fBSC_API\fP \fBsc_logic\fP"
.br
.ti -1c
.RI "\fBSC_API\fP \fBconst\fP \fBsc_logic\fP \fBSC_LOGIC_0\fP"
.br
.ti -1c
.RI "\fBSC_API\fP \fBconst\fP \fBsc_logic\fP \fBSC_LOGIC_1\fP"
.br
.ti -1c
.RI "\fBSC_API\fP \fBconst\fP \fBsc_logic\fP \fBSC_LOGIC_Z\fP"
.br
.ti -1c
.RI "\fBSC_API\fP \fBconst\fP \fBsc_logic\fP \fBSC_LOGIC_X\fP"
.br
.ti -1c
.RI "\fBSC_API\fP \fBconst\fP \fBsc_logic\fP \fBsc_logic_0\fP"
.br
.ti -1c
.RI "\fBSC_API\fP \fBconst\fP \fBsc_logic\fP \fBsc_logic_1\fP"
.br
.ti -1c
.RI "\fBSC_API\fP \fBconst\fP \fBsc_logic\fP \fBsc_logic_Z\fP"
.br
.ti -1c
.RI "\fBSC_API\fP \fBconst\fP \fBsc_logic\fP \fBsc_logic_X\fP"
.br
.ti -1c
.RI "\fBSC_API_TEMPLATE_DECL_\fP \fBsc_proxy< sc_lv_base >\fP"
.br
.ti -1c
.RI "\fBSC_API_TEMPLATE_DECL_\fP \fBsc_proxy< sc_bv_base >\fP"
.br
.ti -1c
.RI "\fBconst\fP int \fBSC_DIGIT_SIZE\fP = \fBBITS_PER_BYTE\fP * \fBsizeof\fP( \fBsc_digit\fP )"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_digit\fP \fBSC_DIGIT_ZERO\fP = (\fBsc_digit\fP)0"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_digit\fP \fBSC_DIGIT_ONE\fP = (\fBsc_digit\fP)1"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_digit\fP \fBSC_DIGIT_TWO\fP = (\fBsc_digit\fP)2"
.br
.ti -1c
.RI "\fBSC_API_TEMPLATE_DECL_\fP \fBsc_global< sc_fxcast_switch >\fP"
.br
.ti -1c
.RI "\fBSC_API_TEMPLATE_DECL_\fP \fBsc_context< sc_fxcast_switch >\fP"
.br
.ti -1c
.RI "\fBconst\fP int \fBSC_BUILTIN_WL_\fP = 32"
.br
.ti -1c
.RI "\fBconst\fP int \fBSC_BUILTIN_IWL_\fP = 32"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_q_mode\fP \fBSC_BUILTIN_Q_MODE_\fP = \fBSC_TRN\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_o_mode\fP \fBSC_BUILTIN_O_MODE_\fP = \fBSC_WRAP\fP"
.br
.ti -1c
.RI "\fBconst\fP int \fBSC_BUILTIN_N_BITS_\fP = 0"
.br
.ti -1c
.RI "\fBconst\fP int \fBSC_DEFAULT_WL_\fP = \fBSC_BUILTIN_WL_\fP"
.br
.ti -1c
.RI "\fBconst\fP int \fBSC_DEFAULT_IWL_\fP = \fBSC_BUILTIN_IWL_\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_q_mode\fP \fBSC_DEFAULT_Q_MODE_\fP = \fBSC_BUILTIN_Q_MODE_\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_o_mode\fP \fBSC_DEFAULT_O_MODE_\fP = \fBSC_BUILTIN_O_MODE_\fP"
.br
.ti -1c
.RI "\fBconst\fP int \fBSC_DEFAULT_N_BITS_\fP = \fBSC_BUILTIN_N_BITS_\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_switch\fP \fBSC_BUILTIN_CAST_SWITCH_\fP = \fBSC_ON\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_switch\fP \fBSC_DEFAULT_CAST_SWITCH_\fP = \fBSC_BUILTIN_CAST_SWITCH_\fP"
.br
.ti -1c
.RI "\fBconst\fP int \fBSC_BUILTIN_DIV_WL_\fP = 64"
.br
.ti -1c
.RI "\fBconst\fP int \fBSC_BUILTIN_CTE_WL_\fP = 64"
.br
.ti -1c
.RI "\fBconst\fP int \fBSC_BUILTIN_MAX_WL_\fP = 1024"
.br
.ti -1c
.RI "\fBconst\fP int \fBSC_DEFAULT_DIV_WL_\fP = \fBSC_BUILTIN_DIV_WL_\fP"
.br
.ti -1c
.RI "\fBconst\fP int \fBSC_DEFAULT_CTE_WL_\fP = \fBSC_BUILTIN_CTE_WL_\fP"
.br
.ti -1c
.RI "\fBconst\fP int \fBSC_DEFAULT_MAX_WL_\fP = \fBSC_BUILTIN_MAX_WL_\fP"
.br
.ti -1c
.RI "\fBSC_API_TEMPLATE_DECL_\fP \fBsc_global< sc_fxtype_params >\fP"
.br
.ti -1c
.RI "\fBSC_API_TEMPLATE_DECL_\fP \fBsc_context< sc_fxtype_params >\fP"
.br
.ti -1c
.RI "\fBdiv\fP"
.br
.ti -1c
.RI "\fBuint64\fP \fBconst\fP \fBsc_uint_base\fP int \fBb\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBunsigned\fP int \fBSCFX_IEEE_DOUBLE_BIAS\fP = 1023\fBU\fP"
.br
.ti -1c
.RI "\fBconst\fP int \fBSCFX_IEEE_DOUBLE_E_MAX\fP = 1023"
.br
.ti -1c
.RI "\fBconst\fP int \fBSCFX_IEEE_DOUBLE_E_MIN\fP = \-1022"
.br
.ti -1c
.RI "\fBconst\fP \fBunsigned\fP int \fBSCFX_IEEE_DOUBLE_M_SIZE\fP = 52"
.br
.ti -1c
.RI "\fBconst\fP \fBunsigned\fP int \fBSCFX_IEEE_DOUBLE_M0_SIZE\fP = 20"
.br
.ti -1c
.RI "\fBconst\fP \fBunsigned\fP int \fBSCFX_IEEE_DOUBLE_M1_SIZE\fP = 32"
.br
.ti -1c
.RI "\fBconst\fP \fBunsigned\fP int \fBSCFX_IEEE_DOUBLE_E_SIZE\fP = 11"
.br
.ti -1c
.RI "\fBconst\fP \fBunsigned\fP int \fBSCFX_IEEE_FLOAT_BIAS\fP = 127\fBU\fP"
.br
.ti -1c
.RI "\fBconst\fP int \fBSCFX_IEEE_FLOAT_E_MAX\fP = 127"
.br
.ti -1c
.RI "\fBconst\fP int \fBSCFX_IEEE_FLOAT_E_MIN\fP = \-126"
.br
.ti -1c
.RI "\fBconst\fP \fBunsigned\fP int \fBSCFX_IEEE_FLOAT_M_SIZE\fP = 23"
.br
.ti -1c
.RI "\fBconst\fP \fBunsigned\fP int \fBSCFX_IEEE_FLOAT_E_SIZE\fP = 8"
.br
.ti -1c
.RI "\fBconst\fP int \fBSCFX_POW10_TABLE_SIZE\fP = 32"
.br
.ti -1c
.RI "\fBconst\fP int \fBmin_mant\fP = 4"
.br
.ti -1c
.RI "\fBconst\fP int \fBbits_in_int\fP = \fBsizeof\fP(int) * \fBCHAR_BIT\fP"
.br
.ti -1c
.RI "\fBconst\fP int \fBbits_in_word\fP = \fBsizeof\fP(\fBword\fP) * \fBCHAR_BIT\fP"
.br
.ti -1c
.RI "\fBSC_API\fP \fBconst\fP \fBuint_type\fP \fBmask_int\fP [\fBSC_INTWIDTH\fP][\fBSC_INTWIDTH\fP]"
.br
.ti -1c
.RI "\fBSC_API_TEMPLATE_DECL_\fP \fBsc_global< sc_length_param >\fP"
.br
.ti -1c
.RI "\fBSC_API_TEMPLATE_DECL_\fP \fBsc_context< sc_length_param >\fP"
.br
.in -1c
.SH "Typedef Documentation"
.PP 
.SS "\fBtypedef\fP \fBunsigned\fP \fBshort\fP \fBsc_dt::half_word\fP"

.SS "\fBtypedef\fP \fBint64_t\fP \fBsc_dt::int64\fP"

.SS "\fBtypedef\fP \fBint64\fP \fBsc_dt::int_type\fP"

.SS "\fBtypedef\fP \fBunsigned\fP int \fBsc_dt::sc_digit\fP"

.SS "\fBtypedef\fP \fBsc_context\fP<\fBsc_fxcast_switch\fP> \fBsc_dt::sc_fxcast_context\fP"

.SS "\fBtypedef\fP \fBsc_context\fP<\fBsc_fxtype_params\fP> \fBsc_dt::sc_fxtype_context\fP"

.SS "\fBtypedef\fP \fBsc_context\fP<\fBsc_length_param\fP> \fBsc_dt::sc_length_context\fP"

.SS "\fBtypedef\fP int \fBsc_dt::small_type\fP"

.SS "\fBtypedef\fP \fBunsigned\fP \fBchar\fP \fBsc_dt::uchar\fP"

.SS "\fBtypedef\fP \fBuint64_t\fP \fBsc_dt::uint64\fP"

.SS "\fBtypedef\fP \fBuint64\fP \fBsc_dt::uint_type\fP"

.SS "\fBtypedef\fP \fBunsigned\fP int \fBsc_dt::word\fP"

.SH "Enumeration Type Documentation"
.PP 
.SS "\fBenum\fP \fBsc_dt::sc_context_begin\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISC_NOW \fP\fP
.TP
\fB\fISC_LATER \fP\fP
.SS "\fBenum\fP \fBsc_dt::sc_enc\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISC_TC_ \fP\fP
.TP
\fB\fISC_US_ \fP\fP
.SS "\fBenum\fP \fBsc_dt::sc_fmt\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISC_F \fP\fP
.TP
\fB\fISC_E \fP\fP
.SS "\fBenum\fP \fBsc_dt::sc_logic_value_t\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILog_0 \fP\fP
.TP
\fB\fILog_1 \fP\fP
.TP
\fB\fILog_Z \fP\fP
.TP
\fB\fILog_X \fP\fP
.SS "\fBenum\fP \fBsc_dt::sc_numrep\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISC_NOBASE \fP\fP
.TP
\fB\fISC_BIN \fP\fP
.TP
\fB\fISC_OCT \fP\fP
.TP
\fB\fISC_DEC \fP\fP
.TP
\fB\fISC_HEX \fP\fP
.TP
\fB\fISC_BIN_US \fP\fP
.TP
\fB\fISC_BIN_SM \fP\fP
.TP
\fB\fISC_OCT_US \fP\fP
.TP
\fB\fISC_OCT_SM \fP\fP
.TP
\fB\fISC_HEX_US \fP\fP
.TP
\fB\fISC_HEX_SM \fP\fP
.TP
\fB\fISC_CSD \fP\fP
.SS "\fBenum\fP \fBsc_dt::sc_o_mode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISC_SAT \fP\fP
.TP
\fB\fISC_SAT_ZERO \fP\fP
.TP
\fB\fISC_SAT_SYM \fP\fP
.TP
\fB\fISC_WRAP \fP\fP
.TP
\fB\fISC_WRAP_SM \fP\fP
.SS "\fBenum\fP \fBsc_dt::sc_q_mode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISC_RND \fP\fP
.TP
\fB\fISC_RND_ZERO \fP\fP
.TP
\fB\fISC_RND_MIN_INF \fP\fP
.TP
\fB\fISC_RND_INF \fP\fP
.TP
\fB\fISC_RND_CONV \fP\fP
.TP
\fB\fISC_TRN \fP\fP
.TP
\fB\fISC_TRN_ZERO \fP\fP
.SS "\fBenum\fP \fBsc_dt::sc_switch\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISC_OFF \fP\fP
.TP
\fB\fISC_ON \fP\fP
.SH "Function Documentation"
.PP 
.SS "\fBvoid\fP sc_dt::add_on_help (\fBsmall_type\fP & us, int unb, int und, \fBsc_digit\fP * ud, \fBsmall_type\fP vs, int vnb, int vnd, \fBconst\fP \fBsc_digit\fP * vd)\fR [extern]\fP"

.SS "\fBSC_API\fP \fBscfx_rep\fP * sc_dt::add_scfx_rep (\fBconst\fP \fBscfx_rep\fP &, \fBconst\fP \fBscfx_rep\fP &, int max_wl = \fR\fBSC_DEFAULT_MAX_WL_\fP\fP)"

.SS "\fBsc_signed\fP sc_dt::add_signed_friend (\fBsmall_type\fP us, int unb, int und, \fBconst\fP \fBsc_digit\fP * ud, \fBsmall_type\fP vs, int vnb, int vnd, \fBconst\fP \fBsc_digit\fP * vd)"

.SS "\fBsc_unsigned\fP sc_dt::add_unsigned_friend (\fBsmall_type\fP us, int unb, int und, \fBconst\fP \fBsc_digit\fP * ud, \fBsmall_type\fP vs, int vnb, int vnd, \fBconst\fP \fBsc_digit\fP * vd)"

.SS "\fBvoid\fP sc_dt::and_on_help (\fBsmall_type\fP us, int unb, int und, \fBsc_digit\fP * ud, \fBsmall_type\fP vs, int vnb, int vnd, \fBconst\fP \fBsc_digit\fP * vd)\fR [extern]\fP"

.SS "\fBbool\fP sc_dt::and_reduce (\fBconst\fP \fBsc_concatref\fP & a)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::and_reduce (\fBconst\fP \fBsc_int_base\fP & a)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::and_reduce (\fBconst\fP \fBsc_int_subref_r\fP & a)\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBsc_proxy\fP< X >::value_type sc_dt::and_reduce (\fBconst\fP \fBsc_proxy\fP< X > & a)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::and_reduce (\fBconst\fP \fBsc_uint_base\fP & a)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::and_reduce (\fBconst\fP \fBsc_uint_subref_r\fP & a)\fR [inline]\fP"

.SS "\fBsc_signed\fP sc_dt::and_signed_friend (\fBsmall_type\fP us, int unb, int und, \fBconst\fP \fBsc_digit\fP * ud, \fBsmall_type\fP vs, int vnb, int vnd, \fBconst\fP \fBsc_digit\fP * vd)"

.SS "\fBsc_unsigned\fP sc_dt::and_unsigned_friend (\fBsmall_type\fP us, int unb, int und, \fBconst\fP \fBsc_digit\fP * ud, \fBsmall_type\fP vs, int vnb, int vnd, \fBconst\fP \fBsc_digit\fP * vd)"

.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBvoid\fP sc_dt::assign_p_ (\fBsc_proxy\fP< X > & px, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > & py)\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBvoid\fP sc_dt::assign_v_ (\fBsc_proxy\fP< X > & px, \fBconst\fP \fBsc_int_base\fP & a)\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBvoid\fP sc_dt::assign_v_ (\fBsc_proxy\fP< X > & px, \fBconst\fP \fBsc_signed\fP & a)\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBvoid\fP sc_dt::assign_v_ (\fBsc_proxy\fP< X > & px, \fBconst\fP \fBsc_uint_base\fP & a)\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBvoid\fP sc_dt::assign_v_ (\fBsc_proxy\fP< X > & px, \fBconst\fP \fBsc_unsigned\fP & a)\fR [inline]\fP"

.SS "template<\fBclass\fP X , \fBclass\fP \fBT\fP > \fBvoid\fP sc_dt::assign_v_ (\fBsc_proxy\fP< X > & px, \fBconst\fP \fBT\fP & a)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_bit\fP sc_dt::b_and (\fBconst\fP \fBsc_bit\fP & a, \fBconst\fP \fBsc_bit\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > X & sc_dt::b_and_assign_ (\fBsc_proxy\fP< X > & px, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > & py)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_bit\fP sc_dt::b_not (\fBconst\fP \fBsc_bit\fP & a)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::b_not (\fBsc_bit\fP & r, \fBconst\fP \fBsc_bit\fP & a)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::b_not (\fBsc_fix\fP & c, \fBconst\fP \fBsc_fix\fP & a)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::b_not (\fBsc_fix_fast\fP & c, \fBconst\fP \fBsc_fix_fast\fP & a)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::b_not (\fBsc_ufix\fP & c, \fBconst\fP \fBsc_ufix\fP & a)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::b_not (\fBsc_ufix_fast\fP & c, \fBconst\fP \fBsc_ufix_fast\fP & a)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_bit\fP sc_dt::b_or (\fBconst\fP \fBsc_bit\fP & a, \fBconst\fP \fBsc_bit\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > X & sc_dt::b_or_assign_ (\fBsc_proxy\fP< X > & px, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > & py)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_bit\fP sc_dt::b_xor (\fBconst\fP \fBsc_bit\fP & a, \fBconst\fP \fBsc_bit\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > X & sc_dt::b_xor_assign_ (\fBsc_proxy\fP< X > & a, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > & b)\fR [inline]\fP"

.SS "int sc_dt::bit_ord (int i)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::check_for_zero (int ulen, \fBconst\fP \fBsc_digit\fP * u)\fR [inline]\fP"

.SS "\fBsmall_type\fP sc_dt::check_for_zero (\fBsmall_type\fP s, int ulen, \fBconst\fP \fBsc_digit\fP * u)\fR [inline]\fP"

.SS "\fBSC_API\fP int sc_dt::cmp_scfx_rep (\fBconst\fP \fBscfx_rep\fP &, \fBconst\fP \fBscfx_rep\fP &)"

.SS "int sc_dt::compare_unsigned (\fBsmall_type\fP us, int unb, int und, \fBconst\fP \fBsc_digit\fP * ud, \fBsmall_type\fP vs, int vnb, int vnd, \fBconst\fP \fBsc_digit\fP * vd, \fBsmall_type\fP if_u_signed = \fR0\fP, \fBsmall_type\fP if_v_signed = \fR0\fP)"

.SS "\fBvoid\fP sc_dt::complement (\fBscfx_mant\fP & target, \fBconst\fP \fBscfx_mant\fP & source, int size)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_dt::sc_concatref\fP & sc_dt::concat (\fBbool\fP a, \fBconst\fP \fBsc_dt::sc_value_base\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bv_base\fP, \fBsc_bitref_r\fP< \fBT\fP > > sc_dt::concat (\fBbool\fP a, \fBsc_bitref_r\fP< \fBT\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bv_base\fP, \fBT\fP > sc_dt::concat (\fBbool\fP a, \fBconst\fP \fBsc_proxy\fP< \fBT\fP > & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_bitref_r\fP< \fBT\fP > > sc_dt::concat (\fBbool\fP a, \fBsc_bitref_r\fP< \fBT\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_bv_base\fP, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > > sc_dt::concat (\fBbool\fP a, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bv_base\fP, \fBsc_subref_r\fP< \fBT\fP > > sc_dt::concat (\fBbool\fP a, \fBsc_subref_r\fP< \fBT\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBT\fP > sc_dt::concat (\fBconst\fP \fBchar\fP * a, \fBconst\fP \fBsc_proxy\fP< \fBT\fP > & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_bitref_r\fP< \fBT\fP > > sc_dt::concat (\fBconst\fP \fBchar\fP * a, \fBsc_bitref_r\fP< \fBT\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > > sc_dt::concat (\fBconst\fP \fBchar\fP * a, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_subref_r\fP< \fBT\fP > > sc_dt::concat (\fBconst\fP \fBchar\fP * a, \fBsc_subref_r\fP< \fBT\fP > b)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_dt::sc_concatref\fP & sc_dt::concat (\fBconst\fP \fBsc_dt::sc_value_base\fP & a, \fBbool\fP b)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_dt::sc_concatref\fP & sc_dt::concat (\fBconst\fP \fBsc_dt::sc_value_base\fP & a, \fBconst\fP \fBsc_dt::sc_value_base\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBT\fP > sc_dt::concat (\fBconst\fP \fBsc_logic\fP & a, \fBconst\fP \fBsc_proxy\fP< \fBT\fP > & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_bitref_r\fP< \fBT\fP > > sc_dt::concat (\fBconst\fP \fBsc_logic\fP & a, \fBsc_bitref_r\fP< \fBT\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > > sc_dt::concat (\fBconst\fP \fBsc_logic\fP & a, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_subref_r\fP< \fBT\fP > > sc_dt::concat (\fBconst\fP \fBsc_logic\fP & a, \fBsc_subref_r\fP< \fBT\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBT\fP, \fBsc_bv_base\fP > sc_dt::concat (\fBconst\fP \fBsc_proxy\fP< \fBT\fP > & a, \fBbool\fP b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBT\fP, \fBsc_lv_base\fP > sc_dt::concat (\fBconst\fP \fBsc_proxy\fP< \fBT\fP > & a, \fBconst\fP \fBchar\fP * b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBT\fP, \fBsc_lv_base\fP > sc_dt::concat (\fBconst\fP \fBsc_proxy\fP< \fBT\fP > & a, \fBconst\fP \fBsc_logic\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > sc_dt::concat (\fBconst\fP \fBsc_proxy\fP< \fBT1\fP > & a, \fBconst\fP \fBsc_proxy\fP< \fBT2\fP > & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBT1\fP, \fBsc_bitref_r\fP< \fBT2\fP > > sc_dt::concat (\fBconst\fP \fBsc_proxy\fP< \fBT1\fP > & a, \fBsc_bitref_r\fP< \fBT2\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref_r\fP< \fBT1\fP, \fBsc_concref_r\fP< \fBT2\fP, \fBT3\fP > > sc_dt::concat (\fBconst\fP \fBsc_proxy\fP< \fBT1\fP > & a, \fBsc_concref_r\fP< \fBT2\fP, \fBT3\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBT1\fP, \fBsc_subref_r\fP< \fBT2\fP > > sc_dt::concat (\fBconst\fP \fBsc_proxy\fP< \fBT1\fP > & a, \fBsc_subref_r\fP< \fBT2\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBsc_bitref\fP< \fBT1\fP >, \fBsc_bitref\fP< \fBT2\fP > > sc_dt::concat (\fBsc_bitref\fP< \fBT1\fP > a, \fBsc_bitref\fP< \fBT2\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref\fP< \fBsc_bitref\fP< \fBT1\fP >, \fBsc_concref\fP< \fBT2\fP, \fBT3\fP > > sc_dt::concat (\fBsc_bitref\fP< \fBT1\fP > a, \fBsc_concref\fP< \fBT2\fP, \fBT3\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBsc_bitref\fP< \fBT1\fP >, \fBT2\fP > sc_dt::concat (\fBsc_bitref\fP< \fBT1\fP > a, \fBsc_proxy\fP< \fBT2\fP > & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBsc_bitref\fP< \fBT1\fP >, \fBsc_subref\fP< \fBT2\fP > > sc_dt::concat (\fBsc_bitref\fP< \fBT1\fP > a, \fBsc_subref\fP< \fBT2\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT\fP >, \fBsc_bv_base\fP > sc_dt::concat (\fBsc_bitref_r\fP< \fBT\fP > a, \fBbool\fP b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT\fP >, \fBsc_lv_base\fP > sc_dt::concat (\fBsc_bitref_r\fP< \fBT\fP > a, \fBbool\fP b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT\fP >, \fBsc_lv_base\fP > sc_dt::concat (\fBsc_bitref_r\fP< \fBT\fP > a, \fBconst\fP \fBchar\fP * b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT\fP >, \fBsc_lv_base\fP > sc_dt::concat (\fBsc_bitref_r\fP< \fBT\fP > a, \fBconst\fP \fBsc_logic\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT1\fP >, \fBT2\fP > sc_dt::concat (\fBsc_bitref_r\fP< \fBT1\fP > a, \fBconst\fP \fBsc_proxy\fP< \fBT2\fP > & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT1\fP >, \fBsc_bitref_r\fP< \fBT2\fP > > sc_dt::concat (\fBsc_bitref_r\fP< \fBT1\fP > a, \fBsc_bitref_r\fP< \fBT2\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT1\fP >, \fBsc_concref_r\fP< \fBT2\fP, \fBT3\fP > > sc_dt::concat (\fBsc_bitref_r\fP< \fBT1\fP > a, \fBsc_concref_r\fP< \fBT2\fP, \fBT3\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT1\fP >, \fBsc_subref_r\fP< \fBT2\fP > > sc_dt::concat (\fBsc_bitref_r\fP< \fBT1\fP > a, \fBsc_subref_r\fP< \fBT2\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref\fP< \fBsc_concref\fP< \fBT1\fP, \fBT2\fP >, \fBsc_bitref\fP< \fBT3\fP > > sc_dt::concat (\fBsc_concref\fP< \fBT1\fP, \fBT2\fP > a, \fBsc_bitref\fP< \fBT3\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP , \fBclass\fP \fBT4\fP > \fBsc_concref\fP< \fBsc_concref\fP< \fBT1\fP, \fBT2\fP >, \fBsc_concref\fP< \fBT3\fP, \fBT4\fP > > sc_dt::concat (\fBsc_concref\fP< \fBT1\fP, \fBT2\fP > a, \fBsc_concref\fP< \fBT3\fP, \fBT4\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref\fP< \fBsc_concref\fP< \fBT1\fP, \fBT2\fP >, \fBT3\fP > sc_dt::concat (\fBsc_concref\fP< \fBT1\fP, \fBT2\fP > a, \fBsc_proxy\fP< \fBT3\fP > & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref\fP< \fBsc_concref\fP< \fBT1\fP, \fBT2\fP >, \fBsc_subref\fP< \fBT3\fP > > sc_dt::concat (\fBsc_concref\fP< \fBT1\fP, \fBT2\fP > a, \fBsc_subref\fP< \fBT3\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_bv_base\fP > sc_dt::concat (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > a, \fBbool\fP b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_lv_base\fP > sc_dt::concat (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > a, \fBconst\fP \fBchar\fP * b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_lv_base\fP > sc_dt::concat (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > a, \fBconst\fP \fBsc_logic\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBT3\fP > sc_dt::concat (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > a, \fBconst\fP \fBsc_proxy\fP< \fBT3\fP > & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_bitref_r\fP< \fBT3\fP > > sc_dt::concat (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > a, \fBsc_bitref_r\fP< \fBT3\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP , \fBclass\fP \fBT4\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_concref_r\fP< \fBT3\fP, \fBT4\fP > > sc_dt::concat (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > a, \fBsc_concref_r\fP< \fBT3\fP, \fBT4\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_subref_r\fP< \fBT3\fP > > sc_dt::concat (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > a, \fBsc_subref_r\fP< \fBT3\fP > b)\fR [inline]\fP"

.SS "\fBsc_digit\fP sc_dt::concat (\fBsc_digit\fP h, \fBsc_digit\fP l)\fR [inline]\fP"

.SS "\fBsc_dt::sc_concatref\fP & sc_dt::concat (\fBsc_dt::sc_value_base\fP & a, \fBsc_dt::sc_value_base\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBT1\fP, \fBsc_bitref\fP< \fBT2\fP > > sc_dt::concat (\fBsc_proxy\fP< \fBT1\fP > & a, \fBsc_bitref\fP< \fBT2\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref\fP< \fBT1\fP, \fBsc_concref\fP< \fBT2\fP, \fBT3\fP > > sc_dt::concat (\fBsc_proxy\fP< \fBT1\fP > & a, \fBsc_concref\fP< \fBT2\fP, \fBT3\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBT1\fP, \fBT2\fP > sc_dt::concat (\fBsc_proxy\fP< \fBT1\fP > & a, \fBsc_proxy\fP< \fBT2\fP > & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBT1\fP, \fBsc_subref\fP< \fBT2\fP > > sc_dt::concat (\fBsc_proxy\fP< \fBT1\fP > & a, \fBsc_subref\fP< \fBT2\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBsc_subref\fP< \fBT1\fP >, \fBsc_bitref\fP< \fBT2\fP > > sc_dt::concat (\fBsc_subref\fP< \fBT1\fP > a, \fBsc_bitref\fP< \fBT2\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref\fP< \fBsc_subref\fP< \fBT1\fP >, \fBsc_concref\fP< \fBT2\fP, \fBT3\fP > > sc_dt::concat (\fBsc_subref\fP< \fBT1\fP > a, \fBsc_concref\fP< \fBT2\fP, \fBT3\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBsc_subref\fP< \fBT1\fP >, \fBT2\fP > sc_dt::concat (\fBsc_subref\fP< \fBT1\fP > a, \fBsc_proxy\fP< \fBT2\fP > & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBsc_subref\fP< \fBT1\fP >, \fBsc_subref\fP< \fBT2\fP > > sc_dt::concat (\fBsc_subref\fP< \fBT1\fP > a, \fBsc_subref\fP< \fBT2\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT\fP >, \fBsc_bv_base\fP > sc_dt::concat (\fBsc_subref_r\fP< \fBT\fP > a, \fBbool\fP b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT\fP >, \fBsc_lv_base\fP > sc_dt::concat (\fBsc_subref_r\fP< \fBT\fP > a, \fBconst\fP \fBchar\fP * b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT\fP >, \fBsc_lv_base\fP > sc_dt::concat (\fBsc_subref_r\fP< \fBT\fP > a, \fBconst\fP \fBsc_logic\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT1\fP >, \fBT2\fP > sc_dt::concat (\fBsc_subref_r\fP< \fBT1\fP > a, \fBconst\fP \fBsc_proxy\fP< \fBT2\fP > & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT1\fP >, \fBsc_bitref_r\fP< \fBT2\fP > > sc_dt::concat (\fBsc_subref_r\fP< \fBT1\fP > a, \fBsc_bitref_r\fP< \fBT2\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT1\fP >, \fBsc_concref_r\fP< \fBT2\fP, \fBT3\fP > > sc_dt::concat (\fBsc_subref_r\fP< \fBT1\fP > a, \fBsc_concref_r\fP< \fBT2\fP, \fBT3\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT1\fP >, \fBsc_subref_r\fP< \fBT2\fP > > sc_dt::concat (\fBsc_subref_r\fP< \fBT1\fP > a, \fBsc_subref_r\fP< \fBT2\fP > b)\fR [inline]\fP"

.SS "\fBsmall_type\fP sc_dt::convert_signed_2C_to_SM (int nb, int nd, \fBsc_digit\fP * d)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::convert_signed_SM_to_2C (\fBsmall_type\fP s, int nd, \fBsc_digit\fP * d)\fR [inline]\fP"

.SS "\fBsmall_type\fP sc_dt::convert_signed_SM_to_2C_to_SM (\fBsmall_type\fP s, int nb, int nd, \fBsc_digit\fP * d)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::convert_signed_SM_to_2C_trimmed (\fBsmall_type\fP s, int nb, int nd, \fBsc_digit\fP * d)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::convert_SM_to_2C (\fBsmall_type\fP s, int nd, \fBsc_digit\fP * d)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::convert_SM_to_2C_trimmed (\fBsmall_type\fP added, \fBsmall_type\fP s, int nb, int nd, \fBsc_digit\fP * d)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBconst\fP std::string sc_dt::convert_to_bin (\fBconst\fP \fBchar\fP * s)"

.SS "\fBSC_API\fP \fBconst\fP std::string sc_dt::convert_to_fmt (\fBconst\fP std::string & s, \fBsc_numrep\fP numrep, \fBbool\fP)"

.SS "\fBsmall_type\fP sc_dt::convert_unsigned_2C_to_SM (int nb, int nd, \fBsc_digit\fP * d)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::convert_unsigned_SM_to_2C (\fBsmall_type\fP s, int nd, \fBsc_digit\fP * d)\fR [inline]\fP"

.SS "\fBsmall_type\fP sc_dt::convert_unsigned_SM_to_2C_to_SM (\fBsmall_type\fP s, int nb, int nd, \fBsc_digit\fP * d)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::convert_unsigned_SM_to_2C_trimmed (\fBsmall_type\fP s, int nb, int nd, \fBsc_digit\fP * d)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::copy_digits_signed (\fBsmall_type\fP & us, int unb, int und, \fBsc_digit\fP * ud, int vnb, int vnd, \fBconst\fP \fBsc_digit\fP * vd)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::copy_digits_unsigned (\fBsmall_type\fP & us, int unb, int und, \fBsc_digit\fP * ud, int, int vnd, \fBconst\fP \fBsc_digit\fP * vd)\fR [inline]\fP"

.SS "\fBuint64\fP sc_dt::DEFN_BIN_OP_T (/, \fBdiv\fP, \fBconst\fP \fBsc_int_base\fP &)"

.SS "\fBuint64\fP \fBconst\fP \fBsc_uint_base\fP & sc_dt::DEFN_BIN_OP_T (/, \fBdiv\fP, \fBconst\fP \fBsc_signed\fP &) const &"

.SS "sc_dt::DEFN_BIN_OP_T (/, \fBdiv\fP, \fBint64\fP)"

.SS "int sc_dt::digit_ord (int i)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBType\fP > \fBvoid\fP sc_dt::div_by_zero (\fBType\fP s)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::div_on_help_signed (\fBsmall_type\fP & us, int unb, int und, \fBsc_digit\fP * ud, int vnb, int vnd, \fBconst\fP \fBsc_digit\fP * vd)"

.SS "\fBvoid\fP sc_dt::div_on_help_unsigned (\fBsmall_type\fP & us, int unb, int und, \fBsc_digit\fP * ud, int vnb, int vnd, \fBconst\fP \fBsc_digit\fP * vd)"

.SS "\fBSC_API\fP \fBscfx_rep\fP * sc_dt::div_scfx_rep (\fBconst\fP \fBscfx_rep\fP &, \fBconst\fP \fBscfx_rep\fP &, int max_wl = \fR\fBSC_DEFAULT_DIV_WL_\fP\fP)"

.SS "\fBsc_signed\fP sc_dt::div_signed_friend (\fBsmall_type\fP s, int unb, int und, \fBconst\fP \fBsc_digit\fP * ud, int vnb, int vnd, \fBconst\fP \fBsc_digit\fP * vd)"

.SS "\fBsc_unsigned\fP sc_dt::div_unsigned_friend (\fBsmall_type\fP s, int unb, int und, \fBconst\fP \fBsc_digit\fP * ud, int vnb, int vnd, \fBconst\fP \fBsc_digit\fP * vd)"

.SS "\fBbool\fP sc_dt::equal (\fBconst\fP \fBsc_bit\fP & a, \fBconst\fP \fBsc_bit\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBvoid\fP sc_dt::extend_sign_w_ (X & x, int wi, \fBbool\fP sign)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBType\fP > \fBvoid\fP sc_dt::from_uint (int ulen, \fBsc_digit\fP * u, \fBType\fP v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsmall_type\fP sc_dt::fsm_move (\fBchar\fP c, \fBsmall_type\fP & b, \fBsmall_type\fP & s, \fBsmall_type\fP & state)\fR [extern]\fP"

.SS "\fBSC_API\fP \fBconst\fP \fBchar\fP * sc_dt::get_base_and_sign (\fBconst\fP \fBchar\fP * v, \fBsmall_type\fP & base, \fBsmall_type\fP & sign)\fR [extern]\fP"

.SS "template<\fBclass\fP \fBType\fP > \fBsmall_type\fP sc_dt::get_sign (\fBType\fP & u)\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBvoid\fP sc_dt::get_words_ (\fBconst\fP X & x, int wi, \fBsc_digit\fP & x_dw, \fBsc_digit\fP & x_cw)\fR [inline]\fP"

.SS "\fBsc_digit\fP sc_dt::high_half (\fBsc_digit\fP d)\fR [inline]\fP"

.SS "\fBsc_digit\fP sc_dt::high_half_masked (\fBsc_digit\fP d)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::inc (\fBscfx_mant\fP & mant)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::is_bad_double (\fBdouble\fP v)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::is_inf (\fBdouble\fP v)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::is_nan (\fBdouble\fP v)\fR [inline]\fP"

.SS "\fBsc_digit\fP sc_dt::low_half (\fBsc_digit\fP d)\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP sc_dt::lrotate (\fBconst\fP \fBsc_proxy\fP< X > & x, int n)\fR [inline]\fP"

.SS "\fBscfx_rep\fP * sc_dt::lsh_scfx_rep (\fBconst\fP \fBscfx_rep\fP & a, int b)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::lshift (\fBsc_fxnum\fP & c, \fBconst\fP \fBsc_fxnum\fP & a, int b)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::lshift (\fBsc_fxnum_fast\fP & c, \fBconst\fP \fBsc_fxnum_fast\fP & a, int b)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::lshift (\fBsc_fxval\fP & c, \fBconst\fP \fBsc_fxnum\fP & a, int b)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::lshift (\fBsc_fxval\fP & c, \fBconst\fP \fBsc_fxval\fP & a, int b)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::lshift (\fBsc_fxval_fast\fP & c, \fBconst\fP \fBsc_fxnum_fast\fP & a, int b)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::lshift (\fBsc_fxval_fast\fP & c, \fBconst\fP \fBsc_fxval_fast\fP & a, int b)\fR [inline]\fP"

.SS "\fBsmall_type\fP sc_dt::make_zero (int nd, \fBsc_digit\fP * d)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::mod_on_help_signed (\fBsmall_type\fP & us, int unb, int und, \fBsc_digit\fP * ud, int vnb, int vnd, \fBconst\fP \fBsc_digit\fP * vd)\fR [extern]\fP"

.SS "\fBvoid\fP sc_dt::mod_on_help_unsigned (\fBsmall_type\fP & us, int unb, int und, \fBsc_digit\fP * ud, int vnb, int vnd, \fBconst\fP \fBsc_digit\fP * vd)\fR [extern]\fP"

.SS "\fBsc_signed\fP sc_dt::mod_signed_friend (\fBsmall_type\fP us, int unb, int und, \fBconst\fP \fBsc_digit\fP * ud, int vnb, int vnd, \fBconst\fP \fBsc_digit\fP * vd)"

.SS "\fBsc_unsigned\fP sc_dt::mod_unsigned_friend (\fBsmall_type\fP us, int unb, int und, \fBconst\fP \fBsc_digit\fP * ud, int vnb, int vnd, \fBconst\fP \fBsc_digit\fP * vd)"

.SS "\fBvoid\fP sc_dt::mul_on_help_signed (\fBsmall_type\fP & us, int unb, int und, \fBsc_digit\fP * ud, int vnb, int vnd, \fBconst\fP \fBsc_digit\fP * vd)\fR [extern]\fP"

.SS "\fBvoid\fP sc_dt::mul_on_help_unsigned (\fBsmall_type\fP & us, int unb, int und, \fBsc_digit\fP * ud, int vnb, int vnd, \fBconst\fP \fBsc_digit\fP * vd)\fR [extern]\fP"

.SS "\fBsc_signed\fP sc_dt::mul_signed_friend (\fBsmall_type\fP s, int unb, int und, \fBconst\fP \fBsc_digit\fP * ud, int vnb, int vnd, \fBconst\fP \fBsc_digit\fP * vd)"

.SS "\fBsmall_type\fP sc_dt::mul_signs (\fBsmall_type\fP us, \fBsmall_type\fP vs)\fR [inline]\fP"

.SS "\fBsc_unsigned\fP sc_dt::mul_unsigned_friend (\fBsmall_type\fP s, int unb, int und, \fBconst\fP \fBsc_digit\fP * ud, int vnb, int vnd, \fBconst\fP \fBsc_digit\fP * vd)"

.SS "\fBscfx_rep\fP * sc_dt::mult_scfx_rep (\fBconst\fP \fBscfx_rep\fP & a, \fBconst\fP \fBscfx_rep\fP & b, int max_wl = \fR\fBSC_DEFAULT_MAX_WL_\fP\fP)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBvoid\fP sc_dt::multiply (\fBscfx_rep\fP &, \fBconst\fP \fBscfx_rep\fP &, \fBconst\fP \fBscfx_rep\fP &, int max_wl = \fR\fBSC_DEFAULT_MAX_WL_\fP\fP)"

.SS "\fBbool\fP sc_dt::nand_reduce (\fBconst\fP \fBsc_concatref\fP & a)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::nand_reduce (\fBconst\fP \fBsc_int_base\fP & a)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::nand_reduce (\fBconst\fP \fBsc_int_subref_r\fP & a)\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBsc_proxy\fP< X >::value_type sc_dt::nand_reduce (\fBconst\fP \fBsc_proxy\fP< X > & a)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::nand_reduce (\fBconst\fP \fBsc_uint_base\fP & a)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::nand_reduce (\fBconst\fP \fBsc_uint_subref_r\fP & a)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::neg (\fBsc_fxnum\fP & c, \fBconst\fP \fBsc_fxnum\fP & a)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::neg (\fBsc_fxnum_fast\fP & c, \fBconst\fP \fBsc_fxnum_fast\fP & a)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::neg (\fBsc_fxval\fP & c, \fBconst\fP \fBsc_fxnum\fP & a)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::neg (\fBsc_fxval\fP & c, \fBconst\fP \fBsc_fxval\fP & a)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::neg (\fBsc_fxval_fast\fP & c, \fBconst\fP \fBsc_fxnum_fast\fP & a)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::neg (\fBsc_fxval_fast\fP & c, \fBconst\fP \fBsc_fxval_fast\fP & a)\fR [inline]\fP"

.SS "\fBscfx_rep\fP * sc_dt::neg_scfx_rep (\fBconst\fP \fBscfx_rep\fP & a)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::nor_reduce (\fBconst\fP \fBsc_concatref\fP & a)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::nor_reduce (\fBconst\fP \fBsc_int_base\fP & a)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::nor_reduce (\fBconst\fP \fBsc_int_subref_r\fP & a)\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBsc_proxy\fP< X >::value_type sc_dt::nor_reduce (\fBconst\fP \fBsc_proxy\fP< X > & a)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::nor_reduce (\fBconst\fP \fBsc_uint_base\fP & a)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::nor_reduce (\fBconst\fP \fBsc_uint_subref_r\fP & a)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::not_equal (\fBconst\fP \fBsc_bit\fP & a, \fBconst\fP \fBsc_bit\fP & b)\fR [inline]\fP"

.SS "\fBsc_digit\fP sc_dt::one_and_ones (int n)\fR [inline]\fP"

.SS "\fBsc_digit\fP sc_dt::one_and_zeros (int n)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_bit\fP & a, \fBconst\fP \fBsc_bit\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_bitref_r\fP< \fBT1\fP > & a, \fBconst\fP \fBsc_bitref_r\fP< \fBT2\fP > & b)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_fxcast_switch\fP & a, \fBconst\fP \fBsc_fxcast_switch\fP & b)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_fxtype_params\fP & a, \fBconst\fP \fBsc_fxtype_params\fP & b)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_int_base\fP & a, \fBconst\fP \fBsc_int_base\fP & b)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_int_base\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_int_base\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_length_param\fP & a, \fBconst\fP \fBsc_length_param\fP & b)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_logic\fP & a, \fBconst\fP \fBsc_logic\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_proxy\fP< X > & px, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > & py)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_int_base\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_uint_base\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_signed\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_signed\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_signed\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_signed\fP & u, \fBuint64\fP v)"

.SS "\fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_uint_base\fP & a, \fBconst\fP \fBsc_uint_base\fP & b)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_uint_base\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_uint_base\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_int_base\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_uint_base\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_unsigned\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_unsigned\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_unsigned\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_unsigned\fP & u, \fBuint64\fP v)"

.SS "\fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator!= (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBbool\fP sc_dt::operator!= (int u, \fBconst\fP \fBsc_signed\fP & v)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::operator!= (int u, \fBconst\fP \fBsc_unsigned\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator!= (\fBint64\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator!= (\fBint64\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator!= (\fBlong\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator!= (\fBlong\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator!= (\fBuint64\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator!= (\fBuint64\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBbool\fP sc_dt::operator!= (\fBunsigned\fP int u, \fBconst\fP \fBsc_signed\fP & v)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::operator!= (\fBunsigned\fP int u, \fBconst\fP \fBsc_unsigned\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator!= (\fBunsigned\fP \fBlong\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator!= (\fBunsigned\fP \fBlong\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator% (\fBconst\fP \fBsc_int_base\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator% (\fBconst\fP \fBsc_int_base\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator% (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_int_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator% (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator% (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_uint_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator% (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBsc_signed\fP sc_dt::operator% (\fBconst\fP \fBsc_signed\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator% (\fBconst\fP \fBsc_signed\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator% (\fBconst\fP \fBsc_signed\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator% (\fBconst\fP \fBsc_signed\fP & u, \fBuint64\fP v)"

.SS "\fBsc_signed\fP sc_dt::operator% (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator% (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator% (\fBconst\fP \fBsc_uint_base\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator% (\fBconst\fP \fBsc_uint_base\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator% (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_int_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator% (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator% (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_uint_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator% (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator% (\fBconst\fP \fBsc_unsigned\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator% (\fBconst\fP \fBsc_unsigned\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator% (\fBconst\fP \fBsc_unsigned\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator% (\fBconst\fP \fBsc_unsigned\fP & u, \fBuint64\fP v)"

.SS "\fBsc_unsigned\fP sc_dt::operator% (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator% (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBsc_signed\fP sc_dt::operator% (int u, \fBconst\fP \fBsc_signed\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator% (int u, \fBconst\fP \fBsc_unsigned\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator% (\fBint64\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator% (\fBint64\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator% (\fBlong\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator% (\fBlong\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator% (\fBuint64\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator% (\fBuint64\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBsc_signed\fP sc_dt::operator% (\fBunsigned\fP int u, \fBconst\fP \fBsc_signed\fP & v)\fR [inline]\fP"

.SS "\fBsc_unsigned\fP sc_dt::operator% (\fBunsigned\fP int u, \fBconst\fP \fBsc_unsigned\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator% (\fBunsigned\fP \fBlong\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator% (\fBunsigned\fP \fBlong\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBconst\fP \fBsc_bit\fP sc_dt::operator& (\fBconst\fP \fBsc_bit\fP & a, \fBconst\fP \fBsc_bit\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_logic\fP sc_dt::operator& (\fBconst\fP \fBsc_bitref_r\fP< \fBT1\fP > & a, \fBconst\fP \fBsc_bitref_r\fP< \fBT2\fP > & b)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator& (\fBconst\fP \fBsc_int_base\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator& (\fBconst\fP \fBsc_int_base\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBconst\fP \fBsc_logic\fP sc_dt::operator& (\fBconst\fP \fBsc_logic\fP & a, \fBconst\fP \fBsc_logic\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBconst\fP \fBsc_lv_base\fP sc_dt::operator& (\fBconst\fP \fBsc_proxy\fP< X > & px, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > & py)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator& (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_int_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator& (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator& (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_uint_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator& (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBsc_signed\fP sc_dt::operator& (\fBconst\fP \fBsc_signed\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator& (\fBconst\fP \fBsc_signed\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator& (\fBconst\fP \fBsc_signed\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator& (\fBconst\fP \fBsc_signed\fP & u, \fBuint64\fP v)"

.SS "\fBsc_signed\fP sc_dt::operator& (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator& (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator& (\fBconst\fP \fBsc_uint_base\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator& (\fBconst\fP \fBsc_uint_base\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator& (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_int_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator& (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator& (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_uint_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator& (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator& (\fBconst\fP \fBsc_unsigned\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator& (\fBconst\fP \fBsc_unsigned\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator& (\fBconst\fP \fBsc_unsigned\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator& (\fBconst\fP \fBsc_unsigned\fP & u, \fBuint64\fP v)"

.SS "\fBsc_unsigned\fP sc_dt::operator& (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator& (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBsc_signed\fP sc_dt::operator& (int u, \fBconst\fP \fBsc_signed\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator& (int u, \fBconst\fP \fBsc_unsigned\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator& (\fBint64\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator& (\fBint64\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator& (\fBlong\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator& (\fBlong\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator& (\fBuint64\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator& (\fBuint64\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBsc_signed\fP sc_dt::operator& (\fBunsigned\fP int u, \fBconst\fP \fBsc_signed\fP & v)\fR [inline]\fP"

.SS "\fBsc_unsigned\fP sc_dt::operator& (\fBunsigned\fP int u, \fBconst\fP \fBsc_unsigned\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator& (\fBunsigned\fP \fBlong\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator& (\fBunsigned\fP \fBlong\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > X & sc_dt::operator&= (\fBsc_proxy\fP< X > & px, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > & py)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator* (\fBconst\fP \fBsc_int_base\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator* (\fBconst\fP \fBsc_int_base\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator* (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_int_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator* (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator* (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_uint_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator* (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBsc_signed\fP sc_dt::operator* (\fBconst\fP \fBsc_signed\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator* (\fBconst\fP \fBsc_signed\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator* (\fBconst\fP \fBsc_signed\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator* (\fBconst\fP \fBsc_signed\fP & u, \fBuint64\fP v)"

.SS "\fBsc_signed\fP sc_dt::operator* (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator* (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator* (\fBconst\fP \fBsc_uint_base\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator* (\fBconst\fP \fBsc_uint_base\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator* (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_int_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator* (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator* (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_uint_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator* (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator* (\fBconst\fP \fBsc_unsigned\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator* (\fBconst\fP \fBsc_unsigned\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator* (\fBconst\fP \fBsc_unsigned\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator* (\fBconst\fP \fBsc_unsigned\fP & u, \fBuint64\fP v)"

.SS "\fBsc_unsigned\fP sc_dt::operator* (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator* (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBsc_signed\fP sc_dt::operator* (int u, \fBconst\fP \fBsc_signed\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator* (int u, \fBconst\fP \fBsc_unsigned\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator* (\fBint64\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator* (\fBint64\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator* (\fBlong\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator* (\fBlong\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator* (\fBuint64\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator* (\fBuint64\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBsc_signed\fP sc_dt::operator* (\fBunsigned\fP int u, \fBconst\fP \fBsc_signed\fP & v)\fR [inline]\fP"

.SS "\fBsc_unsigned\fP sc_dt::operator* (\fBunsigned\fP int u, \fBconst\fP \fBsc_unsigned\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator* (\fBunsigned\fP \fBlong\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator* (\fBunsigned\fP \fBlong\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBsc_string_old\fP sc_dt::operator+ (\fBconst\fP \fBchar\fP * s, \fBconst\fP \fBsc_string_old\fP & t)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator+ (\fBconst\fP \fBsc_int_base\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator+ (\fBconst\fP \fBsc_int_base\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator+ (\fBconst\fP \fBsc_signed\fP & u)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator+ (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_int_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator+ (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator+ (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_uint_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator+ (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBsc_signed\fP sc_dt::operator+ (\fBconst\fP \fBsc_signed\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator+ (\fBconst\fP \fBsc_signed\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator+ (\fBconst\fP \fBsc_signed\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator+ (\fBconst\fP \fBsc_signed\fP & u, \fBuint64\fP v)"

.SS "\fBsc_signed\fP sc_dt::operator+ (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator+ (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator+ (\fBconst\fP \fBsc_uint_base\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator+ (\fBconst\fP \fBsc_uint_base\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator+ (\fBconst\fP \fBsc_unsigned\fP & u)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator+ (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_int_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator+ (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator+ (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_uint_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator+ (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator+ (\fBconst\fP \fBsc_unsigned\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator+ (\fBconst\fP \fBsc_unsigned\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator+ (\fBconst\fP \fBsc_unsigned\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator+ (\fBconst\fP \fBsc_unsigned\fP & u, \fBuint64\fP v)"

.SS "\fBsc_unsigned\fP sc_dt::operator+ (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator+ (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBsc_signed\fP sc_dt::operator+ (int u, \fBconst\fP \fBsc_signed\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator+ (int u, \fBconst\fP \fBsc_unsigned\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator+ (\fBint64\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator+ (\fBint64\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator+ (\fBlong\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator+ (\fBlong\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator+ (\fBuint64\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator+ (\fBuint64\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBsc_signed\fP sc_dt::operator+ (\fBunsigned\fP int u, \fBconst\fP \fBsc_signed\fP & v)\fR [inline]\fP"

.SS "\fBsc_unsigned\fP sc_dt::operator+ (\fBunsigned\fP int u, \fBconst\fP \fBsc_unsigned\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator+ (\fBunsigned\fP \fBlong\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator+ (\fBunsigned\fP \fBlong\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBconst\fP \fBsc_dt::sc_concatref\fP & sc_dt::operator, (\fBbool\fP a, \fBconst\fP \fBsc_dt::sc_value_base\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bv_base\fP, \fBsc_bitref_r\fP< \fBT\fP > > sc_dt::operator, (\fBbool\fP a, \fBsc_bitref_r\fP< \fBT\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bv_base\fP, \fBT\fP > sc_dt::operator, (\fBbool\fP a, \fBconst\fP \fBsc_proxy\fP< \fBT\fP > & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_bitref_r\fP< \fBT\fP > > sc_dt::operator, (\fBbool\fP a, \fBsc_bitref_r\fP< \fBT\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_bv_base\fP, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > > sc_dt::operator, (\fBbool\fP a, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bv_base\fP, \fBsc_subref_r\fP< \fBT\fP > > sc_dt::operator, (\fBbool\fP a, \fBsc_subref_r\fP< \fBT\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBT\fP > sc_dt::operator, (\fBconst\fP \fBchar\fP * a, \fBconst\fP \fBsc_proxy\fP< \fBT\fP > & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_bitref_r\fP< \fBT\fP > > sc_dt::operator, (\fBconst\fP \fBchar\fP * a, \fBsc_bitref_r\fP< \fBT\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > > sc_dt::operator, (\fBconst\fP \fBchar\fP * a, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_subref_r\fP< \fBT\fP > > sc_dt::operator, (\fBconst\fP \fBchar\fP * a, \fBsc_subref_r\fP< \fBT\fP > b)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_dt::sc_concatref\fP & sc_dt::operator, (\fBconst\fP \fBsc_dt::sc_value_base\fP & a, \fBbool\fP b)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_dt::sc_concatref\fP & sc_dt::operator, (\fBconst\fP \fBsc_dt::sc_value_base\fP & a, \fBconst\fP \fBsc_dt::sc_value_base\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBT\fP > sc_dt::operator, (\fBconst\fP \fBsc_logic\fP & a, \fBconst\fP \fBsc_proxy\fP< \fBT\fP > & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_bitref_r\fP< \fBT\fP > > sc_dt::operator, (\fBconst\fP \fBsc_logic\fP & a, \fBsc_bitref_r\fP< \fBT\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > > sc_dt::operator, (\fBconst\fP \fBsc_logic\fP & a, \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_lv_base\fP, \fBsc_subref_r\fP< \fBT\fP > > sc_dt::operator, (\fBconst\fP \fBsc_logic\fP & a, \fBsc_subref_r\fP< \fBT\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBT\fP, \fBsc_bv_base\fP > sc_dt::operator, (\fBconst\fP \fBsc_proxy\fP< \fBT\fP > & a, \fBbool\fP b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBT\fP, \fBsc_lv_base\fP > sc_dt::operator, (\fBconst\fP \fBsc_proxy\fP< \fBT\fP > & a, \fBconst\fP \fBchar\fP * b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBT\fP, \fBsc_lv_base\fP > sc_dt::operator, (\fBconst\fP \fBsc_proxy\fP< \fBT\fP > & a, \fBconst\fP \fBsc_logic\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > sc_dt::operator, (\fBconst\fP \fBsc_proxy\fP< \fBT1\fP > & a, \fBconst\fP \fBsc_proxy\fP< \fBT2\fP > & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBT1\fP, \fBsc_bitref_r\fP< \fBT2\fP > > sc_dt::operator, (\fBconst\fP \fBsc_proxy\fP< \fBT1\fP > & a, \fBsc_bitref_r\fP< \fBT2\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref_r\fP< \fBT1\fP, \fBsc_concref_r\fP< \fBT2\fP, \fBT3\fP > > sc_dt::operator, (\fBconst\fP \fBsc_proxy\fP< \fBT1\fP > & a, \fBsc_concref_r\fP< \fBT2\fP, \fBT3\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBT1\fP, \fBsc_subref_r\fP< \fBT2\fP > > sc_dt::operator, (\fBconst\fP \fBsc_proxy\fP< \fBT1\fP > & a, \fBsc_subref_r\fP< \fBT2\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBsc_bitref\fP< \fBT1\fP >, \fBsc_bitref\fP< \fBT2\fP > > sc_dt::operator, (\fBsc_bitref\fP< \fBT1\fP > a, \fBsc_bitref\fP< \fBT2\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref\fP< \fBsc_bitref\fP< \fBT1\fP >, \fBsc_concref\fP< \fBT2\fP, \fBT3\fP > > sc_dt::operator, (\fBsc_bitref\fP< \fBT1\fP > a, \fBsc_concref\fP< \fBT2\fP, \fBT3\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBsc_bitref\fP< \fBT1\fP >, \fBT2\fP > sc_dt::operator, (\fBsc_bitref\fP< \fBT1\fP > a, \fBsc_proxy\fP< \fBT2\fP > & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBsc_bitref\fP< \fBT1\fP >, \fBsc_subref\fP< \fBT2\fP > > sc_dt::operator, (\fBsc_bitref\fP< \fBT1\fP > a, \fBsc_subref\fP< \fBT2\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT\fP >, \fBsc_bv_base\fP > sc_dt::operator, (\fBsc_bitref_r\fP< \fBT\fP > a, \fBbool\fP b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT\fP >, \fBsc_lv_base\fP > sc_dt::operator, (\fBsc_bitref_r\fP< \fBT\fP > a, \fBbool\fP b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT\fP >, \fBsc_lv_base\fP > sc_dt::operator, (\fBsc_bitref_r\fP< \fBT\fP > a, \fBconst\fP \fBchar\fP * b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT\fP >, \fBsc_lv_base\fP > sc_dt::operator, (\fBsc_bitref_r\fP< \fBT\fP > a, \fBconst\fP \fBsc_logic\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT1\fP >, \fBT2\fP > sc_dt::operator, (\fBsc_bitref_r\fP< \fBT1\fP > a, \fBconst\fP \fBsc_proxy\fP< \fBT2\fP > & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT1\fP >, \fBsc_bitref_r\fP< \fBT2\fP > > sc_dt::operator, (\fBsc_bitref_r\fP< \fBT1\fP > a, \fBsc_bitref_r\fP< \fBT2\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT1\fP >, \fBsc_concref_r\fP< \fBT2\fP, \fBT3\fP > > sc_dt::operator, (\fBsc_bitref_r\fP< \fBT1\fP > a, \fBsc_concref_r\fP< \fBT2\fP, \fBT3\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_bitref_r\fP< \fBT1\fP >, \fBsc_subref_r\fP< \fBT2\fP > > sc_dt::operator, (\fBsc_bitref_r\fP< \fBT1\fP > a, \fBsc_subref_r\fP< \fBT2\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref\fP< \fBsc_concref\fP< \fBT1\fP, \fBT2\fP >, \fBsc_bitref\fP< \fBT3\fP > > sc_dt::operator, (\fBsc_concref\fP< \fBT1\fP, \fBT2\fP > a, \fBsc_bitref\fP< \fBT3\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP , \fBclass\fP \fBT4\fP > \fBsc_concref\fP< \fBsc_concref\fP< \fBT1\fP, \fBT2\fP >, \fBsc_concref\fP< \fBT3\fP, \fBT4\fP > > sc_dt::operator, (\fBsc_concref\fP< \fBT1\fP, \fBT2\fP > a, \fBsc_concref\fP< \fBT3\fP, \fBT4\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref\fP< \fBsc_concref\fP< \fBT1\fP, \fBT2\fP >, \fBT3\fP > sc_dt::operator, (\fBsc_concref\fP< \fBT1\fP, \fBT2\fP > a, \fBsc_proxy\fP< \fBT3\fP > & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref\fP< \fBsc_concref\fP< \fBT1\fP, \fBT2\fP >, \fBsc_subref\fP< \fBT3\fP > > sc_dt::operator, (\fBsc_concref\fP< \fBT1\fP, \fBT2\fP > a, \fBsc_subref\fP< \fBT3\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_bv_base\fP > sc_dt::operator, (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > a, \fBbool\fP b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_lv_base\fP > sc_dt::operator, (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > a, \fBconst\fP \fBchar\fP * b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_lv_base\fP > sc_dt::operator, (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > a, \fBconst\fP \fBsc_logic\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBT3\fP > sc_dt::operator, (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > a, \fBconst\fP \fBsc_proxy\fP< \fBT3\fP > & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_bitref_r\fP< \fBT3\fP > > sc_dt::operator, (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > a, \fBsc_bitref_r\fP< \fBT3\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP , \fBclass\fP \fBT4\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_concref_r\fP< \fBT3\fP, \fBT4\fP > > sc_dt::operator, (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > a, \fBsc_concref_r\fP< \fBT3\fP, \fBT4\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref_r\fP< \fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP >, \fBsc_subref_r\fP< \fBT3\fP > > sc_dt::operator, (\fBsc_concref_r\fP< \fBT1\fP, \fBT2\fP > a, \fBsc_subref_r\fP< \fBT3\fP > b)\fR [inline]\fP"

.SS "\fBsc_dt::sc_concatref\fP & sc_dt::operator, (\fBsc_dt::sc_value_base\fP & a, \fBsc_dt::sc_value_base\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBT1\fP, \fBsc_bitref\fP< \fBT2\fP > > sc_dt::operator, (\fBsc_proxy\fP< \fBT1\fP > & a, \fBsc_bitref\fP< \fBT2\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref\fP< \fBT1\fP, \fBsc_concref\fP< \fBT2\fP, \fBT3\fP > > sc_dt::operator, (\fBsc_proxy\fP< \fBT1\fP > & a, \fBsc_concref\fP< \fBT2\fP, \fBT3\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBT1\fP, \fBT2\fP > sc_dt::operator, (\fBsc_proxy\fP< \fBT1\fP > & a, \fBsc_proxy\fP< \fBT2\fP > & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBT1\fP, \fBsc_subref\fP< \fBT2\fP > > sc_dt::operator, (\fBsc_proxy\fP< \fBT1\fP > & a, \fBsc_subref\fP< \fBT2\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBsc_subref\fP< \fBT1\fP >, \fBsc_bitref\fP< \fBT2\fP > > sc_dt::operator, (\fBsc_subref\fP< \fBT1\fP > a, \fBsc_bitref\fP< \fBT2\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref\fP< \fBsc_subref\fP< \fBT1\fP >, \fBsc_concref\fP< \fBT2\fP, \fBT3\fP > > sc_dt::operator, (\fBsc_subref\fP< \fBT1\fP > a, \fBsc_concref\fP< \fBT2\fP, \fBT3\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBsc_subref\fP< \fBT1\fP >, \fBT2\fP > sc_dt::operator, (\fBsc_subref\fP< \fBT1\fP > a, \fBsc_proxy\fP< \fBT2\fP > & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref\fP< \fBsc_subref\fP< \fBT1\fP >, \fBsc_subref\fP< \fBT2\fP > > sc_dt::operator, (\fBsc_subref\fP< \fBT1\fP > a, \fBsc_subref\fP< \fBT2\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT\fP >, \fBsc_bv_base\fP > sc_dt::operator, (\fBsc_subref_r\fP< \fBT\fP > a, \fBbool\fP b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT\fP >, \fBsc_lv_base\fP > sc_dt::operator, (\fBsc_subref_r\fP< \fBT\fP > a, \fBconst\fP \fBchar\fP * b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT\fP >, \fBsc_lv_base\fP > sc_dt::operator, (\fBsc_subref_r\fP< \fBT\fP > a, \fBconst\fP \fBsc_logic\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT1\fP >, \fBT2\fP > sc_dt::operator, (\fBsc_subref_r\fP< \fBT1\fP > a, \fBconst\fP \fBsc_proxy\fP< \fBT2\fP > & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT1\fP >, \fBsc_bitref_r\fP< \fBT2\fP > > sc_dt::operator, (\fBsc_subref_r\fP< \fBT1\fP > a, \fBsc_bitref_r\fP< \fBT2\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP , \fBclass\fP \fBT3\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT1\fP >, \fBsc_concref_r\fP< \fBT2\fP, \fBT3\fP > > sc_dt::operator, (\fBsc_subref_r\fP< \fBT1\fP > a, \fBsc_concref_r\fP< \fBT2\fP, \fBT3\fP > b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_concref_r\fP< \fBsc_subref_r\fP< \fBT1\fP >, \fBsc_subref_r\fP< \fBT2\fP > > sc_dt::operator, (\fBsc_subref_r\fP< \fBT1\fP > a, \fBsc_subref_r\fP< \fBT2\fP > b)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBconst\fP \fBsc_int_base\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBconst\fP \fBsc_int_base\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBconst\fP \fBsc_signed\fP & u)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_int_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_uint_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBsc_signed\fP sc_dt::operator\- (\fBconst\fP \fBsc_signed\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBconst\fP \fBsc_signed\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBconst\fP \fBsc_signed\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBconst\fP \fBsc_signed\fP & u, \fBuint64\fP v)"

.SS "\fBsc_signed\fP sc_dt::operator\- (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBconst\fP \fBsc_uint_base\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBconst\fP \fBsc_uint_base\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBconst\fP \fBsc_unsigned\fP & u)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_int_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_uint_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBconst\fP \fBsc_unsigned\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBconst\fP \fBsc_unsigned\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBconst\fP \fBsc_unsigned\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBconst\fP \fBsc_unsigned\fP & u, \fBuint64\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBsc_signed\fP sc_dt::operator\- (int u, \fBconst\fP \fBsc_signed\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (int u, \fBconst\fP \fBsc_unsigned\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBint64\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBint64\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBlong\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBlong\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBuint64\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBuint64\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBsc_signed\fP sc_dt::operator\- (\fBunsigned\fP int u, \fBconst\fP \fBsc_signed\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBunsigned\fP int u, \fBconst\fP \fBsc_unsigned\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBunsigned\fP \fBlong\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator\- (\fBunsigned\fP \fBlong\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBconst\fP \fBsc_fxval\fP sc_dt::operator/ (\fBconst\fP \fBsc_fxnum\fP & a, \fBconst\fP \fBsc_fxnum\fP & b)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_fxval\fP sc_dt::operator/ (\fBconst\fP \fBsc_fxnum\fP & a, \fBconst\fP \fBsc_fxval\fP & b)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_fxval_fast\fP sc_dt::operator/ (\fBconst\fP \fBsc_fxnum_fast\fP & a, \fBconst\fP \fBsc_fxnum_fast\fP & b)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_fxval_fast\fP sc_dt::operator/ (\fBconst\fP \fBsc_fxnum_fast\fP & a, \fBconst\fP \fBsc_fxval_fast\fP & b)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_fxval\fP sc_dt::operator/ (\fBconst\fP \fBsc_fxval\fP & a, \fBconst\fP \fBsc_fxnum\fP & b)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_fxval\fP sc_dt::operator/ (\fBconst\fP \fBsc_fxval\fP & a, \fBconst\fP \fBsc_fxval\fP & b)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_fxval_fast\fP sc_dt::operator/ (\fBconst\fP \fBsc_fxval_fast\fP & a, \fBconst\fP \fBsc_fxnum_fast\fP & b)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_fxval_fast\fP sc_dt::operator/ (\fBconst\fP \fBsc_fxval_fast\fP & a, \fBconst\fP \fBsc_fxval_fast\fP & b)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator/ (\fBconst\fP \fBsc_int_base\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator/ (\fBconst\fP \fBsc_int_base\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator/ (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_int_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator/ (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator/ (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_uint_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator/ (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBsc_signed\fP sc_dt::operator/ (\fBconst\fP \fBsc_signed\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator/ (\fBconst\fP \fBsc_signed\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator/ (\fBconst\fP \fBsc_signed\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator/ (\fBconst\fP \fBsc_signed\fP & u, \fBuint64\fP v)"

.SS "\fBsc_signed\fP sc_dt::operator/ (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator/ (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator/ (\fBconst\fP \fBsc_uint_base\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator/ (\fBconst\fP \fBsc_uint_base\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator/ (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_int_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator/ (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator/ (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_uint_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator/ (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator/ (\fBconst\fP \fBsc_unsigned\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator/ (\fBconst\fP \fBsc_unsigned\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator/ (\fBconst\fP \fBsc_unsigned\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator/ (\fBconst\fP \fBsc_unsigned\fP & u, \fBuint64\fP v)"

.SS "\fBsc_unsigned\fP sc_dt::operator/ (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator/ (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBsc_signed\fP sc_dt::operator/ (int u, \fBconst\fP \fBsc_signed\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator/ (int u, \fBconst\fP \fBsc_unsigned\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator/ (\fBint64\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator/ (\fBint64\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator/ (\fBlong\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator/ (\fBlong\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator/ (\fBuint64\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator/ (\fBuint64\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBsc_signed\fP sc_dt::operator/ (\fBunsigned\fP int u, \fBconst\fP \fBsc_signed\fP & v)\fR [inline]\fP"

.SS "\fBsc_unsigned\fP sc_dt::operator/ (\fBunsigned\fP int u, \fBconst\fP \fBsc_unsigned\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator/ (\fBunsigned\fP \fBlong\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator/ (\fBunsigned\fP \fBlong\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBbool\fP sc_dt::operator< (\fBconst\fP \fBsc_int_base\fP & a, \fBconst\fP \fBsc_int_base\fP & b)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator< (\fBconst\fP \fBsc_int_base\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator< (\fBconst\fP \fBsc_int_base\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator< (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_int_base\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator< (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator< (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_uint_base\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator< (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBbool\fP sc_dt::operator< (\fBconst\fP \fBsc_signed\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator< (\fBconst\fP \fBsc_signed\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator< (\fBconst\fP \fBsc_signed\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator< (\fBconst\fP \fBsc_signed\fP & u, \fBuint64\fP v)"

.SS "\fBbool\fP sc_dt::operator< (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator< (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBbool\fP sc_dt::operator< (\fBconst\fP \fBsc_uint_base\fP & a, \fBconst\fP \fBsc_uint_base\fP & b)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator< (\fBconst\fP \fBsc_uint_base\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator< (\fBconst\fP \fBsc_uint_base\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator< (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_int_base\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator< (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator< (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_uint_base\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator< (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBbool\fP sc_dt::operator< (\fBconst\fP \fBsc_unsigned\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator< (\fBconst\fP \fBsc_unsigned\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator< (\fBconst\fP \fBsc_unsigned\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator< (\fBconst\fP \fBsc_unsigned\fP & u, \fBuint64\fP v)"

.SS "\fBbool\fP sc_dt::operator< (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator< (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBbool\fP sc_dt::operator< (int u, \fBconst\fP \fBsc_signed\fP & v)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::operator< (int u, \fBconst\fP \fBsc_unsigned\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator< (\fBint64\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator< (\fBint64\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator< (\fBlong\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator< (\fBlong\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator< (\fBuint64\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator< (\fBuint64\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBbool\fP sc_dt::operator< (\fBunsigned\fP int u, \fBconst\fP \fBsc_signed\fP & v)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::operator< (\fBunsigned\fP int u, \fBconst\fP \fBsc_unsigned\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator< (\fBunsigned\fP \fBlong\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator< (\fBunsigned\fP \fBlong\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBconst\fP \fBsc_int_base\fP & a)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBconst\fP \fBsc_int_bitref_r\fP & a)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBconst\fP \fBsc_int_subref_r\fP & a)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBconst\fP \fBsc_signed\fP & a)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBconst\fP \fBsc_signed_bitref_r\fP & a)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBconst\fP \fBsc_signed_subref_r\fP & a)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBconst\fP \fBsc_uint_base\fP & a)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBconst\fP \fBsc_uint_bitref_r\fP & a)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBconst\fP \fBsc_uint_subref_r\fP & a)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBconst\fP \fBsc_unsigned\fP & a)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBconst\fP \fBsc_unsigned_bitref_r\fP & a)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBconst\fP \fBsc_unsigned_subref_r\fP & a)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBconst\fP \fBsc_bit\fP & a)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBconst\fP \fBsc_concatref\fP & v)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBconst\fP \fBsc_fxcast_switch\fP & a)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBconst\fP \fBsc_fxnum\fP & a)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBconst\fP \fBsc_fxnum_bitref_r\fP & a)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBconst\fP \fBsc_fxnum_fast\fP & a)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBconst\fP \fBsc_fxnum_fast_bitref_r\fP & a)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBconst\fP \fBsc_fxnum_fast_subref_r\fP & a)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBconst\fP \fBsc_fxnum_subref\fP & a)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBconst\fP \fBsc_fxtype_params\fP & a)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBconst\fP \fBsc_fxval\fP & a)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBconst\fP \fBsc_fxval_fast\fP & a)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBconst\fP \fBsc_length_param\fP & a)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBconst\fP \fBsc_logic\fP & a)"

.SS "template<\fBclass\fP X > inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBconst\fP \fBsc_proxy\fP< X > & a)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBconst\fP \fBsc_string_old\fP & a)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBsc_enc\fP enc)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBsc_fmt\fP fmt)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBsc_numrep\fP numrep)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBsc_o_mode\fP o_mode)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBsc_q_mode\fP q_mode)"

.SS "inline::std::ostream & sc_dt::operator<< (::std::ostream & os, \fBsc_switch\fP sw)"

.SS "\fBconst\fP \fBsc_unsigned\fP sc_dt::operator<< (\fBconst\fP \fBsc_concatref\fP & target, int shift)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_unsigned\fP sc_dt::operator<< (\fBconst\fP \fBsc_concatref\fP & target, \fBint64\fP shift)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_unsigned\fP sc_dt::operator<< (\fBconst\fP \fBsc_concatref\fP & target, \fBlong\fP shift)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_unsigned\fP sc_dt::operator<< (\fBconst\fP \fBsc_concatref\fP & target, \fBuint64\fP shift)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_unsigned\fP sc_dt::operator<< (\fBconst\fP \fBsc_concatref\fP & target, \fBunsigned\fP int shift)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_unsigned\fP sc_dt::operator<< (\fBconst\fP \fBsc_concatref\fP & target, \fBunsigned\fP \fBlong\fP shift)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_fxval\fP sc_dt::operator<< (\fBconst\fP \fBsc_fxnum\fP & a, int b)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_fxval_fast\fP sc_dt::operator<< (\fBconst\fP \fBsc_fxnum_fast\fP & a, int b)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_fxval_fast\fP sc_dt::operator<< (\fBconst\fP \fBsc_fxval_fast\fP & a, int b)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator<< (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_int_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator<< (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator<< (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_uint_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator<< (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBsc_signed\fP sc_dt::operator<< (\fBconst\fP \fBsc_signed\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator<< (\fBconst\fP \fBsc_signed\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator<< (\fBconst\fP \fBsc_signed\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator<< (\fBconst\fP \fBsc_signed\fP & u, \fBuint64\fP v)"

.SS "\fBsc_signed\fP sc_dt::operator<< (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator<< (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator<< (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_int_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator<< (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator<< (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_uint_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator<< (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBsc_unsigned\fP sc_dt::operator<< (\fBconst\fP \fBsc_unsigned\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator<< (\fBconst\fP \fBsc_unsigned\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator<< (\fBconst\fP \fBsc_unsigned\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator<< (\fBconst\fP \fBsc_unsigned\fP & u, \fBuint64\fP v)"

.SS "\fBsc_unsigned\fP sc_dt::operator<< (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator<< (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBbool\fP sc_dt::operator<= (\fBconst\fP \fBsc_int_base\fP & a, \fBconst\fP \fBsc_int_base\fP & b)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator<= (\fBconst\fP \fBsc_int_base\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator<= (\fBconst\fP \fBsc_int_base\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator<= (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_int_base\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator<= (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator<= (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_uint_base\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator<= (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBbool\fP sc_dt::operator<= (\fBconst\fP \fBsc_signed\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator<= (\fBconst\fP \fBsc_signed\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator<= (\fBconst\fP \fBsc_signed\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator<= (\fBconst\fP \fBsc_signed\fP & u, \fBuint64\fP v)"

.SS "\fBbool\fP sc_dt::operator<= (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator<= (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBbool\fP sc_dt::operator<= (\fBconst\fP \fBsc_uint_base\fP & a, \fBconst\fP \fBsc_uint_base\fP & b)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator<= (\fBconst\fP \fBsc_uint_base\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator<= (\fBconst\fP \fBsc_uint_base\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator<= (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_int_base\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator<= (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator<= (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_uint_base\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator<= (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBbool\fP sc_dt::operator<= (\fBconst\fP \fBsc_unsigned\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator<= (\fBconst\fP \fBsc_unsigned\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator<= (\fBconst\fP \fBsc_unsigned\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator<= (\fBconst\fP \fBsc_unsigned\fP & u, \fBuint64\fP v)"

.SS "\fBbool\fP sc_dt::operator<= (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator<= (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBbool\fP sc_dt::operator<= (int u, \fBconst\fP \fBsc_signed\fP & v)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::operator<= (int u, \fBconst\fP \fBsc_unsigned\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator<= (\fBint64\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator<= (\fBint64\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator<= (\fBlong\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator<= (\fBlong\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator<= (\fBuint64\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator<= (\fBuint64\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBbool\fP sc_dt::operator<= (\fBunsigned\fP int u, \fBconst\fP \fBsc_signed\fP & v)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::operator<= (\fBunsigned\fP int u, \fBconst\fP \fBsc_unsigned\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator<= (\fBunsigned\fP \fBlong\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator<= (\fBunsigned\fP \fBlong\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_bit\fP & a, \fBconst\fP \fBsc_bit\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_bitref_r\fP< \fBT1\fP > & a, \fBconst\fP \fBsc_bitref_r\fP< \fBT2\fP > & b)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_fxcast_switch\fP & a, \fBconst\fP \fBsc_fxcast_switch\fP & b)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_fxtype_params\fP & a, \fBconst\fP \fBsc_fxtype_params\fP & b)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_int_base\fP & a, \fBconst\fP \fBsc_int_base\fP & b)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_int_base\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_int_base\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_length_param\fP & a, \fBconst\fP \fBsc_length_param\fP & b)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_logic\fP & a, \fBconst\fP \fBsc_logic\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_proxy\fP< X > & px, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > & py)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_int_base\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_uint_base\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_signed\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_signed\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_signed\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_signed\fP & u, \fBuint64\fP v)"

.SS "\fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_uint_base\fP & a, \fBconst\fP \fBsc_uint_base\fP & b)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_uint_base\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_uint_base\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_int_base\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_uint_base\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_unsigned\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_unsigned\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_unsigned\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_unsigned\fP & u, \fBuint64\fP v)"

.SS "\fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator== (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBbool\fP sc_dt::operator== (int u, \fBconst\fP \fBsc_signed\fP & v)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::operator== (int u, \fBconst\fP \fBsc_unsigned\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator== (\fBint64\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator== (\fBint64\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator== (\fBlong\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator== (\fBlong\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator== (\fBuint64\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator== (\fBuint64\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBbool\fP sc_dt::operator== (\fBunsigned\fP int u, \fBconst\fP \fBsc_signed\fP & v)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::operator== (\fBunsigned\fP int u, \fBconst\fP \fBsc_unsigned\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator== (\fBunsigned\fP \fBlong\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator== (\fBunsigned\fP \fBlong\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBbool\fP sc_dt::operator> (\fBconst\fP \fBsc_int_base\fP & a, \fBconst\fP \fBsc_int_base\fP & b)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator> (\fBconst\fP \fBsc_int_base\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator> (\fBconst\fP \fBsc_int_base\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator> (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_int_base\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator> (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator> (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_uint_base\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator> (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBbool\fP sc_dt::operator> (\fBconst\fP \fBsc_signed\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator> (\fBconst\fP \fBsc_signed\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator> (\fBconst\fP \fBsc_signed\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator> (\fBconst\fP \fBsc_signed\fP & u, \fBuint64\fP v)"

.SS "\fBbool\fP sc_dt::operator> (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator> (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBbool\fP sc_dt::operator> (\fBconst\fP \fBsc_uint_base\fP & a, \fBconst\fP \fBsc_uint_base\fP & b)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator> (\fBconst\fP \fBsc_uint_base\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator> (\fBconst\fP \fBsc_uint_base\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator> (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_int_base\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator> (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator> (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_uint_base\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator> (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBbool\fP sc_dt::operator> (\fBconst\fP \fBsc_unsigned\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator> (\fBconst\fP \fBsc_unsigned\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator> (\fBconst\fP \fBsc_unsigned\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator> (\fBconst\fP \fBsc_unsigned\fP & u, \fBuint64\fP v)"

.SS "\fBbool\fP sc_dt::operator> (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator> (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBbool\fP sc_dt::operator> (int u, \fBconst\fP \fBsc_signed\fP & v)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::operator> (int u, \fBconst\fP \fBsc_unsigned\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator> (\fBint64\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator> (\fBint64\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator> (\fBlong\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator> (\fBlong\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator> (\fBuint64\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator> (\fBuint64\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBbool\fP sc_dt::operator> (\fBunsigned\fP int u, \fBconst\fP \fBsc_signed\fP & v)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::operator> (\fBunsigned\fP int u, \fBconst\fP \fBsc_unsigned\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator> (\fBunsigned\fP \fBlong\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator> (\fBunsigned\fP \fBlong\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBbool\fP sc_dt::operator>= (\fBconst\fP \fBsc_int_base\fP & a, \fBconst\fP \fBsc_int_base\fP & b)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator>= (\fBconst\fP \fBsc_int_base\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator>= (\fBconst\fP \fBsc_int_base\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator>= (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_int_base\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator>= (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator>= (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_uint_base\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator>= (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBbool\fP sc_dt::operator>= (\fBconst\fP \fBsc_signed\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator>= (\fBconst\fP \fBsc_signed\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator>= (\fBconst\fP \fBsc_signed\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator>= (\fBconst\fP \fBsc_signed\fP & u, \fBuint64\fP v)"

.SS "\fBbool\fP sc_dt::operator>= (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator>= (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBbool\fP sc_dt::operator>= (\fBconst\fP \fBsc_uint_base\fP & a, \fBconst\fP \fBsc_uint_base\fP & b)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator>= (\fBconst\fP \fBsc_uint_base\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator>= (\fBconst\fP \fBsc_uint_base\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator>= (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_int_base\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator>= (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator>= (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_uint_base\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator>= (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBbool\fP sc_dt::operator>= (\fBconst\fP \fBsc_unsigned\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator>= (\fBconst\fP \fBsc_unsigned\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator>= (\fBconst\fP \fBsc_unsigned\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator>= (\fBconst\fP \fBsc_unsigned\fP & u, \fBuint64\fP v)"

.SS "\fBbool\fP sc_dt::operator>= (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator>= (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBbool\fP sc_dt::operator>= (int u, \fBconst\fP \fBsc_signed\fP & v)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::operator>= (int u, \fBconst\fP \fBsc_unsigned\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator>= (\fBint64\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator>= (\fBint64\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator>= (\fBlong\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator>= (\fBlong\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator>= (\fBuint64\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator>= (\fBuint64\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBbool\fP sc_dt::operator>= (\fBunsigned\fP int u, \fBconst\fP \fBsc_signed\fP & v)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::operator>= (\fBunsigned\fP int u, \fBconst\fP \fBsc_unsigned\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator>= (\fBunsigned\fP \fBlong\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBbool\fP sc_dt::operator>= (\fBunsigned\fP \fBlong\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "template<\fBclass\fP \fBT\fP > ::std::istream & sc_dt::operator>> (::std::istream &, \fBsc_bitref\fP< \fBT\fP >)"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > inline::std::istream & sc_dt::operator>> (::std::istream &, \fBsc_concref\fP< \fBT1\fP, \fBT2\fP >)"

.SS "inline::std::istream & sc_dt::operator>> (::std::istream & is, \fBsc_int_base\fP & a)"

.SS "inline::std::istream & sc_dt::operator>> (::std::istream & is, \fBsc_int_bitref\fP & a)"

.SS "inline::std::istream & sc_dt::operator>> (::std::istream & is, \fBsc_int_subref\fP & a)"

.SS "inline::std::istream & sc_dt::operator>> (::std::istream & is, \fBsc_signed\fP & a)"

.SS "inline::std::istream & sc_dt::operator>> (::std::istream & is, \fBsc_signed_bitref\fP & a)"

.SS "inline::std::istream & sc_dt::operator>> (::std::istream & is, \fBsc_signed_subref\fP & a)"

.SS "template<\fBclass\fP \fBT\fP > inline::std::istream & sc_dt::operator>> (::std::istream &, \fBsc_subref\fP< \fBT\fP >)"

.SS "inline::std::istream & sc_dt::operator>> (::std::istream & is, \fBsc_uint_base\fP & a)"

.SS "inline::std::istream & sc_dt::operator>> (::std::istream & is, \fBsc_uint_bitref\fP & a)"

.SS "inline::std::istream & sc_dt::operator>> (::std::istream & is, \fBsc_uint_subref\fP & a)"

.SS "inline::std::istream & sc_dt::operator>> (::std::istream & is, \fBsc_unsigned\fP & a)"

.SS "inline::std::istream & sc_dt::operator>> (::std::istream & is, \fBsc_unsigned_bitref\fP & a)"

.SS "inline::std::istream & sc_dt::operator>> (::std::istream & is, \fBsc_unsigned_subref\fP & a)"

.SS "inline::std::istream & sc_dt::operator>> (::std::istream & is, \fBsc_bit\fP & a)"

.SS "template<\fBclass\fP X > inline::std::istream & sc_dt::operator>> (::std::istream & is, \fBsc_bitref\fP< X > a)"

.SS "inline::std::istream & sc_dt::operator>> (::std::istream & is, \fBsc_concatref\fP & a)"

.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > inline::std::istream & sc_dt::operator>> (::std::istream & is, \fBsc_concref\fP< X, \fBY\fP > a)"

.SS "inline::std::istream & sc_dt::operator>> (::std::istream & is, \fBsc_fxnum\fP & a)"

.SS "inline::std::istream & sc_dt::operator>> (::std::istream & is, \fBsc_fxnum_bitref\fP & a)"

.SS "inline::std::istream & sc_dt::operator>> (::std::istream & is, \fBsc_fxnum_fast\fP & a)"

.SS "inline::std::istream & sc_dt::operator>> (::std::istream & is, \fBsc_fxnum_fast_bitref\fP & a)"

.SS "inline::std::istream & sc_dt::operator>> (::std::istream & is, \fBsc_fxnum_fast_subref\fP & a)"

.SS "inline::std::istream & sc_dt::operator>> (::std::istream & is, \fBsc_fxnum_subref\fP & a)"

.SS "inline::std::istream & sc_dt::operator>> (::std::istream & is, \fBsc_fxval\fP & a)"

.SS "inline::std::istream & sc_dt::operator>> (::std::istream & is, \fBsc_fxval_fast\fP & a)"

.SS "inline::std::istream & sc_dt::operator>> (::std::istream & is, \fBsc_logic\fP & a)"

.SS "template<\fBclass\fP X > inline::std::istream & sc_dt::operator>> (::std::istream & is, \fBsc_proxy\fP< X > & a)"

.SS "template<\fBclass\fP X > inline::std::istream & sc_dt::operator>> (::std::istream & is, \fBsc_subref\fP< X > a)"

.SS "\fBconst\fP \fBsc_unsigned\fP sc_dt::operator>> (\fBconst\fP \fBsc_concatref\fP & target, int shift)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_unsigned\fP sc_dt::operator>> (\fBconst\fP \fBsc_concatref\fP & target, \fBint64\fP shift)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_unsigned\fP sc_dt::operator>> (\fBconst\fP \fBsc_concatref\fP & target, \fBlong\fP shift)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_unsigned\fP sc_dt::operator>> (\fBconst\fP \fBsc_concatref\fP & target, \fBuint64\fP shift)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_unsigned\fP sc_dt::operator>> (\fBconst\fP \fBsc_concatref\fP & target, \fBunsigned\fP int shift)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_unsigned\fP sc_dt::operator>> (\fBconst\fP \fBsc_concatref\fP & target, \fBunsigned\fP \fBlong\fP shift)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_fxval\fP sc_dt::operator>> (\fBconst\fP \fBsc_fxnum\fP & a, int b)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_fxval_fast\fP sc_dt::operator>> (\fBconst\fP \fBsc_fxnum_fast\fP & a, int b)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_fxval\fP sc_dt::operator>> (\fBconst\fP \fBsc_fxval\fP & a, int b)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_fxval_fast\fP sc_dt::operator>> (\fBconst\fP \fBsc_fxval_fast\fP & a, int b)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator>> (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_int_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator>> (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator>> (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_uint_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator>> (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBsc_signed\fP sc_dt::operator>> (\fBconst\fP \fBsc_signed\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator>> (\fBconst\fP \fBsc_signed\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator>> (\fBconst\fP \fBsc_signed\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator>> (\fBconst\fP \fBsc_signed\fP & u, \fBuint64\fP v)"

.SS "\fBsc_signed\fP sc_dt::operator>> (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator>> (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator>> (\fBconst\fP \fBsc_unsigned\fP &, \fBconst\fP \fBsc_int_base\fP &)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator>> (\fBconst\fP \fBsc_unsigned\fP &, \fBconst\fP \fBsc_uint_base\fP &)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator>> (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator>> (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBsc_unsigned\fP sc_dt::operator>> (\fBconst\fP \fBsc_unsigned\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator>> (\fBconst\fP \fBsc_unsigned\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator>> (\fBconst\fP \fBsc_unsigned\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator>> (\fBconst\fP \fBsc_unsigned\fP & u, \fBuint64\fP v)"

.SS "\fBsc_unsigned\fP sc_dt::operator>> (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator>> (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBconst\fP \fBsc_bit\fP sc_dt::operator^ (\fBconst\fP \fBsc_bit\fP & a, \fBconst\fP \fBsc_bit\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_logic\fP sc_dt::operator^ (\fBconst\fP \fBsc_bitref_r\fP< \fBT1\fP > & a, \fBconst\fP \fBsc_bitref_r\fP< \fBT2\fP > & b)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator^ (\fBconst\fP \fBsc_int_base\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator^ (\fBconst\fP \fBsc_int_base\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBconst\fP \fBsc_logic\fP sc_dt::operator^ (\fBconst\fP \fBsc_logic\fP & a, \fBconst\fP \fBsc_logic\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBconst\fP \fBsc_lv_base\fP sc_dt::operator^ (\fBconst\fP \fBsc_proxy\fP< X > & px, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > & py)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator^ (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_int_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator^ (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator^ (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_uint_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator^ (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBsc_signed\fP sc_dt::operator^ (\fBconst\fP \fBsc_signed\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator^ (\fBconst\fP \fBsc_signed\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator^ (\fBconst\fP \fBsc_signed\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator^ (\fBconst\fP \fBsc_signed\fP & u, \fBuint64\fP v)"

.SS "\fBsc_signed\fP sc_dt::operator^ (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator^ (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator^ (\fBconst\fP \fBsc_uint_base\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator^ (\fBconst\fP \fBsc_uint_base\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator^ (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_int_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator^ (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator^ (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_uint_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator^ (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator^ (\fBconst\fP \fBsc_unsigned\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator^ (\fBconst\fP \fBsc_unsigned\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator^ (\fBconst\fP \fBsc_unsigned\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator^ (\fBconst\fP \fBsc_unsigned\fP & u, \fBuint64\fP v)"

.SS "\fBsc_unsigned\fP sc_dt::operator^ (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator^ (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBsc_signed\fP sc_dt::operator^ (int u, \fBconst\fP \fBsc_signed\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator^ (int u, \fBconst\fP \fBsc_unsigned\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator^ (\fBint64\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator^ (\fBint64\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator^ (\fBlong\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator^ (\fBlong\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator^ (\fBuint64\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator^ (\fBuint64\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBsc_signed\fP sc_dt::operator^ (\fBunsigned\fP int u, \fBconst\fP \fBsc_signed\fP & v)\fR [inline]\fP"

.SS "\fBsc_unsigned\fP sc_dt::operator^ (\fBunsigned\fP int u, \fBconst\fP \fBsc_unsigned\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator^ (\fBunsigned\fP \fBlong\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator^ (\fBunsigned\fP \fBlong\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > X & sc_dt::operator^= (\fBsc_proxy\fP< X > & px, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > & py)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_bit\fP sc_dt::operator| (\fBconst\fP \fBsc_bit\fP & a, \fBconst\fP \fBsc_bit\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT1\fP , \fBclass\fP \fBT2\fP > \fBsc_logic\fP sc_dt::operator| (\fBconst\fP \fBsc_bitref_r\fP< \fBT1\fP > & a, \fBconst\fP \fBsc_bitref_r\fP< \fBT2\fP > & b)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator| (\fBconst\fP \fBsc_int_base\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator| (\fBconst\fP \fBsc_int_base\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBconst\fP \fBsc_logic\fP sc_dt::operator| (\fBconst\fP \fBsc_logic\fP & a, \fBconst\fP \fBsc_logic\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBconst\fP \fBsc_lv_base\fP sc_dt::operator| (\fBconst\fP \fBsc_proxy\fP< X > & px, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > & py)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator| (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_int_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator| (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator| (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_uint_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator| (\fBconst\fP \fBsc_signed\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBsc_signed\fP sc_dt::operator| (\fBconst\fP \fBsc_signed\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator| (\fBconst\fP \fBsc_signed\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator| (\fBconst\fP \fBsc_signed\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator| (\fBconst\fP \fBsc_signed\fP & u, \fBuint64\fP v)"

.SS "\fBsc_signed\fP sc_dt::operator| (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator| (\fBconst\fP \fBsc_signed\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator| (\fBconst\fP \fBsc_uint_base\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator| (\fBconst\fP \fBsc_uint_base\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator| (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_int_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator| (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator| (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_uint_base\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator| (\fBconst\fP \fBsc_unsigned\fP & u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator| (\fBconst\fP \fBsc_unsigned\fP & u, int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator| (\fBconst\fP \fBsc_unsigned\fP & u, \fBint64\fP v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator| (\fBconst\fP \fBsc_unsigned\fP & u, \fBlong\fP v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator| (\fBconst\fP \fBsc_unsigned\fP & u, \fBuint64\fP v)"

.SS "\fBsc_unsigned\fP sc_dt::operator| (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP int v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator| (\fBconst\fP \fBsc_unsigned\fP & u, \fBunsigned\fP \fBlong\fP v)"

.SS "\fBsc_signed\fP sc_dt::operator| (int u, \fBconst\fP \fBsc_signed\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator| (int u, \fBconst\fP \fBsc_unsigned\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator| (\fBint64\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator| (\fBint64\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator| (\fBlong\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator| (\fBlong\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator| (\fBuint64\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator| (\fBuint64\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "\fBsc_signed\fP sc_dt::operator| (\fBunsigned\fP int u, \fBconst\fP \fBsc_signed\fP & v)\fR [inline]\fP"

.SS "\fBsc_unsigned\fP sc_dt::operator| (\fBunsigned\fP int u, \fBconst\fP \fBsc_unsigned\fP & v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator| (\fBunsigned\fP \fBlong\fP u, \fBconst\fP \fBsc_signed\fP & v)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator| (\fBunsigned\fP \fBlong\fP u, \fBconst\fP \fBsc_unsigned\fP & v)"

.SS "template<\fBclass\fP X , \fBclass\fP \fBY\fP > X & sc_dt::operator|= (\fBsc_proxy\fP< X > & px, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > & py)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_bit\fP sc_dt::operator~ (\fBconst\fP \fBsc_bit\fP & a)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBsc_signed\fP sc_dt::operator~ (\fBconst\fP \fBsc_signed\fP & u)"

.SS "\fBSC_API\fP \fBsc_unsigned\fP sc_dt::operator~ (\fBconst\fP \fBsc_unsigned\fP & u)"

.SS "\fBvoid\fP sc_dt::or_on_help (\fBsmall_type\fP us, int unb, int und, \fBsc_digit\fP * ud, \fBsmall_type\fP vs, int vnb, int vnd, \fBconst\fP \fBsc_digit\fP * vd)\fR [extern]\fP"

.SS "\fBbool\fP sc_dt::or_reduce (\fBconst\fP \fBsc_concatref\fP & a)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::or_reduce (\fBconst\fP \fBsc_int_base\fP & a)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::or_reduce (\fBconst\fP \fBsc_int_subref_r\fP & a)\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBsc_proxy\fP< X >::value_type sc_dt::or_reduce (\fBconst\fP \fBsc_proxy\fP< X > & a)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::or_reduce (\fBconst\fP \fBsc_uint_base\fP & a)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::or_reduce (\fBconst\fP \fBsc_uint_subref_r\fP & a)\fR [inline]\fP"

.SS "\fBsc_signed\fP sc_dt::or_signed_friend (\fBsmall_type\fP us, int unb, int und, \fBconst\fP \fBsc_digit\fP * ud, \fBsmall_type\fP vs, int vnb, int vnd, \fBconst\fP \fBsc_digit\fP * vd)"

.SS "\fBsc_unsigned\fP sc_dt::or_unsigned_friend (\fBsmall_type\fP us, int unb, int und, \fBconst\fP \fBsc_digit\fP * ud, \fBsmall_type\fP vs, int vnb, int vnd, \fBconst\fP \fBsc_digit\fP * vd)"

.SS "\fBscfx_rep\fP * sc_dt::overflow_scfx_rep (\fBconst\fP \fBscfx_rep\fP & a, \fBconst\fP \fBscfx_params\fP & params, \fBbool\fP & o_flag)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBvoid\fP sc_dt::parse_binary_bits (\fBconst\fP \fBchar\fP * src_p, int dst_n, \fBsc_digit\fP * data_p, \fBsc_digit\fP * ctrl_p = \fR0\fP)\fR [extern]\fP"

.SS "\fBSC_API\fP \fBvoid\fP sc_dt::parse_hex_bits (\fBconst\fP \fBchar\fP * src_p, int dst_n, \fBsc_digit\fP * data_p, \fBsc_digit\fP * ctrl_p = \fR0\fP)\fR [extern]\fP"

.SS "\fBscfx_rep\fP * sc_dt::quantization_scfx_rep (\fBconst\fP \fBscfx_rep\fP & a, \fBconst\fP \fBscfx_params\fP & params, \fBbool\fP & q_flag)\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP sc_dt::reverse (\fBconst\fP \fBsc_proxy\fP< X > & x)\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP sc_dt::rrotate (\fBconst\fP \fBsc_proxy\fP< X > & x, int n)\fR [inline]\fP"

.SS "\fBscfx_rep\fP * sc_dt::rsh_scfx_rep (\fBconst\fP \fBscfx_rep\fP & a, int b)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::rshift (\fBsc_fxnum\fP & c, \fBconst\fP \fBsc_fxnum\fP & a, int b)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::rshift (\fBsc_fxnum_fast\fP & c, \fBconst\fP \fBsc_fxnum_fast\fP & a, int b)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::rshift (\fBsc_fxval\fP & c, \fBconst\fP \fBsc_fxnum\fP & a, int b)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::rshift (\fBsc_fxval\fP & c, \fBconst\fP \fBsc_fxval\fP & a, int b)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::rshift (\fBsc_fxval_fast\fP & c, \fBconst\fP \fBsc_fxnum_fast\fP & a, int b)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::rshift (\fBsc_fxval_fast\fP & c, \fBconst\fP \fBsc_fxval_fast\fP & a, int b)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::safe_set (int i, \fBbool\fP v, \fBsc_digit\fP * d)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBconst\fP \fBT\fP sc_dt::sc_abs (\fBconst\fP \fBT\fP & a)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::sc_deprecated_sc_bit ()\fR [extern]\fP"

.SS "\fBsc_numrep\fP sc_dt::sc_io_base (::std::ostream &, \fBsc_numrep\fP)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::sc_io_show_base (::std::ostream &)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBconst\fP \fBT\fP sc_dt::sc_max (\fBconst\fP \fBT\fP & a, \fBconst\fP \fBT\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBT\fP > \fBconst\fP \fBT\fP sc_dt::sc_min (\fBconst\fP \fBT\fP & a, \fBconst\fP \fBT\fP & b)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBvoid\fP sc_dt::sc_proxy_out_of_bounds (\fBconst\fP \fBchar\fP * msg = \fR\fBNULL\fP\fP, \fBint64\fP val = \fR0\fP)"

.SS "\fBvoid\fP sc_dt::scfx_csd2tc (\fBscfx_string\fP &)"

.SS "\fBbool\fP sc_dt::scfx_exp_start (\fBconst\fP \fBchar\fP * s)\fR [inline]\fP"

.SS "int sc_dt::scfx_find_lsb (\fBunsigned\fP \fBlong\fP x)\fR [inline]\fP"

.SS "int sc_dt::scfx_find_msb (\fBunsigned\fP \fBlong\fP x)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::scfx_is_digit (\fBchar\fP c, \fBsc_numrep\fP numrep)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::scfx_is_equal (\fBconst\fP \fBchar\fP * a, \fBconst\fP \fBchar\fP * b)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::scfx_is_inf (\fBconst\fP \fBchar\fP * s)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::scfx_is_nan (\fBconst\fP \fBchar\fP * s)\fR [inline]\fP"

.SS "int sc_dt::scfx_parse_base (\fBconst\fP \fBchar\fP *& s)\fR [inline]\fP"

.SS "\fBsc_numrep\fP sc_dt::scfx_parse_prefix (\fBconst\fP \fBchar\fP *& s)\fR [inline]\fP"

.SS "int sc_dt::scfx_parse_sign (\fBconst\fP \fBchar\fP *& s, \fBbool\fP & sign_char)\fR [inline]\fP"

.SS "\fBdouble\fP sc_dt::scfx_pow2 (int exp)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::scfx_print_exp (\fBscfx_string\fP & s, int exp)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::scfx_print_inf (\fBscfx_string\fP & s, \fBbool\fP negative)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::scfx_print_nan (\fBscfx_string\fP & s)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::scfx_print_prefix (\fBscfx_string\fP & s, \fBsc_numrep\fP numrep)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::scfx_tc2csd (\fBscfx_string\fP &, int)"

.SS "int sc_dt::scfx_to_digit (\fBchar\fP c, \fBsc_numrep\fP numrep)\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBvoid\fP sc_dt::set_words_ (X & x, int wi, \fBsc_digit\fP x_dw, \fBsc_digit\fP x_cw)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBscfx_rep\fP * sc_dt::sub_scfx_rep (\fBconst\fP \fBscfx_rep\fP &, \fBconst\fP \fBscfx_rep\fP &, int max_wl = \fR\fBSC_DEFAULT_MAX_WL_\fP\fP)"

.SS "\fBsc_signed\fP sc_dt::sub_signed_friend (\fBsmall_type\fP us, int unb, int und, \fBconst\fP \fBsc_digit\fP * ud, \fBsmall_type\fP vs, int vnb, int vnd, \fBconst\fP \fBsc_digit\fP * vd)"

.SS "\fBsc_unsigned\fP sc_dt::sub_unsigned_friend (\fBsmall_type\fP us, int unb, int und, \fBconst\fP \fBsc_digit\fP * ud, \fBsmall_type\fP vs, int vnb, int vnd, \fBconst\fP \fBsc_digit\fP * vd)"

.SS "\fBSC_API\fP \fBconst\fP std::string sc_dt::to_string (\fBsc_enc\fP)"

.SS "\fBSC_API\fP \fBconst\fP std::string sc_dt::to_string (\fBsc_fmt\fP)"

.SS "\fBconst\fP std::string sc_dt::to_string (\fBsc_numrep\fP)"

.SS "\fBSC_API\fP \fBconst\fP std::string sc_dt::to_string (\fBsc_o_mode\fP)"

.SS "\fBSC_API\fP \fBconst\fP std::string sc_dt::to_string (\fBsc_q_mode\fP)"

.SS "\fBSC_API\fP \fBconst\fP std::string sc_dt::to_string (\fBsc_switch\fP)"

.SS "\fBvoid\fP sc_dt::trim (\fBsmall_type\fP added, int nb, int nd, \fBsc_digit\fP * d)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::trim_signed (int nb, int nd, \fBsc_digit\fP * d)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::trim_unsigned (int nb, int nd, \fBsc_digit\fP * d)\fR [inline]\fP"

.SS "\fBdouble\fP sc_dt::uint64_to_double (\fBuint64\fP a)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBvoid\fP sc_dt::vec_add (int ulen, \fBconst\fP \fBsc_digit\fP * u, int vlen, \fBconst\fP \fBsc_digit\fP * v, \fBsc_digit\fP * w)\fR [extern]\fP"

.SS "\fBSC_API\fP \fBvoid\fP sc_dt::vec_add_on (int ulen, \fBsc_digit\fP * u, int vlen, \fBconst\fP \fBsc_digit\fP * v)\fR [extern]\fP"

.SS "\fBSC_API\fP \fBvoid\fP sc_dt::vec_add_on2 (int ulen, \fBsc_digit\fP * u, int vlen, \fBconst\fP \fBsc_digit\fP * v)\fR [extern]\fP"

.SS "\fBSC_API\fP \fBvoid\fP sc_dt::vec_add_small (int ulen, \fBconst\fP \fBsc_digit\fP * u, \fBsc_digit\fP v, \fBsc_digit\fP * w)\fR [extern]\fP"

.SS "\fBSC_API\fP \fBvoid\fP sc_dt::vec_add_small_on (int ulen, \fBsc_digit\fP * u, \fBsc_digit\fP v)\fR [extern]\fP"

.SS "int sc_dt::vec_cmp (int ulen, \fBconst\fP \fBsc_digit\fP * u, int vlen, \fBconst\fP \fBsc_digit\fP * v)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::vec_complement (int ulen, \fBsc_digit\fP * u)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::vec_copy (int n, \fBsc_digit\fP * u, \fBconst\fP \fBsc_digit\fP * v)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::vec_copy_and_zero (int ulen, \fBsc_digit\fP * u, int vlen, \fBconst\fP \fBsc_digit\fP * v)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBvoid\fP sc_dt::vec_div_large (int ulen, \fBconst\fP \fBsc_digit\fP * u, int vlen, \fBconst\fP \fBsc_digit\fP * v, \fBsc_digit\fP * w)\fR [extern]\fP"

.SS "\fBSC_API\fP \fBvoid\fP sc_dt::vec_div_small (int ulen, \fBconst\fP \fBsc_digit\fP * u, \fBsc_digit\fP v, \fBsc_digit\fP * w)\fR [extern]\fP"

.SS "int sc_dt::vec_find_first_nonzero (int ulen, \fBconst\fP \fBsc_digit\fP * u)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBvoid\fP sc_dt::vec_from_char (int ulen, \fBconst\fP \fBuchar\fP * u, int vlen, \fBsc_digit\fP * v)\fR [extern]\fP"

.SS "\fBSC_API\fP \fBsmall_type\fP sc_dt::vec_from_str (int unb, int und, \fBsc_digit\fP * u, \fBconst\fP \fBchar\fP * v, \fBsc_numrep\fP base = \fR\fBSC_NOBASE\fP\fP)\fR [extern]\fP"

.SS "\fBSC_API\fP \fBvoid\fP sc_dt::vec_mul (int ulen, \fBconst\fP \fBsc_digit\fP * u, int vlen, \fBconst\fP \fBsc_digit\fP * v, \fBsc_digit\fP * w)\fR [extern]\fP"

.SS "\fBSC_API\fP \fBvoid\fP sc_dt::vec_mul_small (int ulen, \fBconst\fP \fBsc_digit\fP * u, \fBsc_digit\fP v, \fBsc_digit\fP * w)\fR [extern]\fP"

.SS "\fBSC_API\fP \fBvoid\fP sc_dt::vec_mul_small_on (int ulen, \fBsc_digit\fP * u, \fBsc_digit\fP v)\fR [extern]\fP"

.SS "\fBSC_API\fP \fBvoid\fP sc_dt::vec_rem_large (int ulen, \fBconst\fP \fBsc_digit\fP * u, int vlen, \fBconst\fP \fBsc_digit\fP * v, \fBsc_digit\fP * w)\fR [extern]\fP"

.SS "\fBSC_API\fP \fBsc_digit\fP sc_dt::vec_rem_on_small (int ulen, \fBsc_digit\fP * u, \fBsc_digit\fP v)\fR [extern]\fP"

.SS "\fBSC_API\fP \fBsc_digit\fP sc_dt::vec_rem_small (int ulen, \fBconst\fP \fBsc_digit\fP * u, \fBsc_digit\fP v)\fR [extern]\fP"

.SS "\fBSC_API\fP \fBvoid\fP sc_dt::vec_reverse (int unb, int und, \fBsc_digit\fP * ud, int l, int r = \fR0\fP)\fR [extern]\fP"

.SS "\fBSC_API\fP \fBvoid\fP sc_dt::vec_shift_left (int ulen, \fBsc_digit\fP * u, int nsl)\fR [extern]\fP"

.SS "\fBSC_API\fP \fBvoid\fP sc_dt::vec_shift_right (int vlen, \fBsc_digit\fP * u, int nsr, \fBsc_digit\fP fill = \fR0\fP)\fR [extern]\fP"

.SS "int sc_dt::vec_skip_and_cmp (int ulen, \fBconst\fP \fBsc_digit\fP * u, int vlen, \fBconst\fP \fBsc_digit\fP * v)\fR [inline]\fP"

.SS "int sc_dt::vec_skip_leading_zeros (int ulen, \fBconst\fP \fBsc_digit\fP * u)\fR [inline]\fP"

.SS "\fBSC_API\fP \fBvoid\fP sc_dt::vec_sub (int ulen, \fBconst\fP \fBsc_digit\fP * u, int vlen, \fBconst\fP \fBsc_digit\fP * v, \fBsc_digit\fP * w)\fR [extern]\fP"

.SS "\fBSC_API\fP \fBvoid\fP sc_dt::vec_sub_on (int ulen, \fBsc_digit\fP * u, int vlen, \fBconst\fP \fBsc_digit\fP * v)\fR [extern]\fP"

.SS "\fBSC_API\fP \fBvoid\fP sc_dt::vec_sub_on2 (int ulen, \fBsc_digit\fP * u, int vlen, \fBconst\fP \fBsc_digit\fP * v)\fR [extern]\fP"

.SS "\fBSC_API\fP \fBvoid\fP sc_dt::vec_sub_small (int ulen, \fBconst\fP \fBsc_digit\fP * u, \fBsc_digit\fP v, \fBsc_digit\fP * w)\fR [extern]\fP"

.SS "\fBSC_API\fP \fBvoid\fP sc_dt::vec_sub_small_on (int ulen, \fBsc_digit\fP * u, \fBsc_digit\fP v)\fR [extern]\fP"

.SS "\fBSC_API\fP int sc_dt::vec_to_char (int ulen, \fBconst\fP \fBsc_digit\fP * u, int vlen, \fBuchar\fP * v)\fR [extern]\fP"

.SS "\fBvoid\fP sc_dt::vec_zero (int from, int ulen, \fBsc_digit\fP * u)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::vec_zero (int ulen, \fBsc_digit\fP * u)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::xnor_reduce (\fBconst\fP \fBsc_concatref\fP & a)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::xnor_reduce (\fBconst\fP \fBsc_int_base\fP & a)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::xnor_reduce (\fBconst\fP \fBsc_int_subref_r\fP & a)\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBsc_proxy\fP< X >::value_type sc_dt::xnor_reduce (\fBconst\fP \fBsc_proxy\fP< X > & a)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::xnor_reduce (\fBconst\fP \fBsc_uint_base\fP & a)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::xnor_reduce (\fBconst\fP \fBsc_uint_subref_r\fP & a)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::xor_on_help (\fBsmall_type\fP us, int unb, int und, \fBsc_digit\fP * ud, \fBsmall_type\fP vs, int vnb, int vnd, \fBconst\fP \fBsc_digit\fP * vd)\fR [extern]\fP"

.SS "\fBbool\fP sc_dt::xor_reduce (\fBconst\fP \fBsc_concatref\fP & a)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::xor_reduce (\fBconst\fP \fBsc_int_base\fP & a)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::xor_reduce (\fBconst\fP \fBsc_int_subref_r\fP & a)\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBsc_proxy\fP< X >::value_type sc_dt::xor_reduce (\fBconst\fP \fBsc_proxy\fP< X > & a)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::xor_reduce (\fBconst\fP \fBsc_uint_base\fP & a)\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::xor_reduce (\fBconst\fP \fBsc_uint_subref_r\fP & a)\fR [inline]\fP"

.SS "\fBsc_signed\fP sc_dt::xor_signed_friend (\fBsmall_type\fP us, int unb, int und, \fBconst\fP \fBsc_digit\fP * ud, \fBsmall_type\fP vs, int vnb, int vnd, \fBconst\fP \fBsc_digit\fP * vd)"

.SS "\fBsc_unsigned\fP sc_dt::xor_unsigned_friend (\fBsmall_type\fP us, int unb, int und, \fBconst\fP \fBsc_digit\fP * ud, \fBsmall_type\fP vs, int vnb, int vnd, \fBconst\fP \fBsc_digit\fP * vd)"

.SH "Variable Documentation"
.PP 
.SS "\fBuint64\fP \fBconst\fP \fBsc_uint_base\fP int sc_dt::b"
\fBInitial value:\fP.PP
.nf
{

    return sc_fxval( sc_dt::lsh_scfx_rep( *a\&.m_rep, b ) )
.fi

.SS "\fBconst\fP int sc_dt::bits_in_int = \fBsizeof\fP(int) * \fBCHAR_BIT\fP"

.SS "\fBconst\fP int sc_dt::bits_in_word = \fBsizeof\fP(\fBword\fP) * \fBCHAR_BIT\fP"

.SS "\fBuint64\fP sc_dt::div"

.SS "\fBSC_API\fP \fBconst\fP \fBuint_type\fP sc_dt::mask_int\fR [extern]\fP"

.SS "\fBconst\fP int sc_dt::min_mant = 4"

.SS "\fBconst\fP \fBsc_switch\fP sc_dt::SC_BUILTIN_CAST_SWITCH_ = \fBSC_ON\fP"

.SS "\fBconst\fP int sc_dt::SC_BUILTIN_CTE_WL_ = 64"

.SS "\fBconst\fP int sc_dt::SC_BUILTIN_DIV_WL_ = 64"

.SS "\fBconst\fP int sc_dt::SC_BUILTIN_IWL_ = 32"

.SS "\fBconst\fP int sc_dt::SC_BUILTIN_MAX_WL_ = 1024"

.SS "\fBconst\fP int sc_dt::SC_BUILTIN_N_BITS_ = 0"

.SS "\fBconst\fP \fBsc_o_mode\fP sc_dt::SC_BUILTIN_O_MODE_ = \fBSC_WRAP\fP"

.SS "\fBconst\fP \fBsc_q_mode\fP sc_dt::SC_BUILTIN_Q_MODE_ = \fBSC_TRN\fP"

.SS "\fBconst\fP int sc_dt::SC_BUILTIN_WL_ = 32"

.SS "\fBSC_API_TEMPLATE_DECL_\fP \fBsc_dt::sc_context\fP< \fBsc_fxcast_switch\fP >"

.SS "\fBSC_API_TEMPLATE_DECL_\fP \fBsc_dt::sc_context\fP< \fBsc_fxtype_params\fP >"

.SS "\fBSC_API_TEMPLATE_DECL_\fP \fBsc_dt::sc_context\fP< \fBsc_length_param\fP >"

.SS "\fBconst\fP \fBsc_switch\fP sc_dt::SC_DEFAULT_CAST_SWITCH_ = \fBSC_BUILTIN_CAST_SWITCH_\fP"

.SS "\fBconst\fP int sc_dt::SC_DEFAULT_CTE_WL_ = \fBSC_BUILTIN_CTE_WL_\fP"

.SS "\fBconst\fP int sc_dt::SC_DEFAULT_DIV_WL_ = \fBSC_BUILTIN_DIV_WL_\fP"

.SS "\fBconst\fP int sc_dt::SC_DEFAULT_IWL_ = \fBSC_BUILTIN_IWL_\fP"

.SS "\fBconst\fP int sc_dt::SC_DEFAULT_MAX_WL_ = \fBSC_BUILTIN_MAX_WL_\fP"

.SS "\fBconst\fP int sc_dt::SC_DEFAULT_N_BITS_ = \fBSC_BUILTIN_N_BITS_\fP"

.SS "\fBconst\fP \fBsc_o_mode\fP sc_dt::SC_DEFAULT_O_MODE_ = \fBSC_BUILTIN_O_MODE_\fP"

.SS "\fBconst\fP \fBsc_q_mode\fP sc_dt::SC_DEFAULT_Q_MODE_ = \fBSC_BUILTIN_Q_MODE_\fP"

.SS "\fBconst\fP int sc_dt::SC_DEFAULT_WL_ = \fBSC_BUILTIN_WL_\fP"

.SS "\fBconst\fP \fBsc_digit\fP sc_dt::SC_DIGIT_ONE = (\fBsc_digit\fP)1"

.SS "\fBconst\fP int sc_dt::SC_DIGIT_SIZE = \fBBITS_PER_BYTE\fP * \fBsizeof\fP( \fBsc_digit\fP )"

.SS "\fBconst\fP \fBsc_digit\fP sc_dt::SC_DIGIT_TWO = (\fBsc_digit\fP)2"

.SS "\fBconst\fP \fBsc_digit\fP sc_dt::SC_DIGIT_ZERO = (\fBsc_digit\fP)0"

.SS "\fBSC_API_TEMPLATE_DECL_\fP \fBsc_dt::sc_global\fP< \fBsc_fxcast_switch\fP >"

.SS "\fBSC_API_TEMPLATE_DECL_\fP \fBsc_dt::sc_global\fP< \fBsc_fxtype_params\fP >"

.SS "\fBSC_API_TEMPLATE_DECL_\fP \fBsc_dt::sc_global\fP< \fBsc_length_param\fP >"

.SS "\fBclass\fP \fBSC_API\fP sc_dt::sc_logic"

.SS "\fBSC_API\fP \fBconst\fP \fBsc_logic\fP sc_dt::SC_LOGIC_0\fR [extern]\fP"

.SS "\fBSC_API\fP \fBconst\fP \fBsc_logic\fP sc_dt::sc_logic_0\fR [extern]\fP"

.SS "\fBSC_API\fP \fBconst\fP \fBsc_logic\fP sc_dt::SC_LOGIC_1\fR [extern]\fP"

.SS "\fBSC_API\fP \fBconst\fP \fBsc_logic\fP sc_dt::sc_logic_1\fR [extern]\fP"

.SS "\fBSC_API\fP \fBconst\fP \fBsc_logic\fP sc_dt::SC_LOGIC_X\fR [extern]\fP"

.SS "\fBSC_API\fP \fBconst\fP \fBsc_logic\fP sc_dt::sc_logic_X\fR [extern]\fP"

.SS "\fBSC_API\fP \fBconst\fP \fBsc_logic\fP sc_dt::SC_LOGIC_Z\fR [extern]\fP"

.SS "\fBSC_API\fP \fBconst\fP \fBsc_logic\fP sc_dt::sc_logic_Z\fR [extern]\fP"

.SS "\fBSC_API_TEMPLATE_DECL_\fP \fBsc_dt::sc_proxy\fP< \fBsc_bv_base\fP >"

.SS "\fBSC_API_TEMPLATE_DECL_\fP \fBsc_dt::sc_proxy\fP< \fBsc_lv_base\fP >"

.SS "\fBconst\fP \fBunsigned\fP int sc_dt::SCFX_IEEE_DOUBLE_BIAS = 1023\fBU\fP"

.SS "\fBconst\fP int sc_dt::SCFX_IEEE_DOUBLE_E_MAX = 1023"

.SS "\fBconst\fP int sc_dt::SCFX_IEEE_DOUBLE_E_MIN = \-1022"

.SS "\fBconst\fP \fBunsigned\fP int sc_dt::SCFX_IEEE_DOUBLE_E_SIZE = 11"

.SS "\fBconst\fP \fBunsigned\fP int sc_dt::SCFX_IEEE_DOUBLE_M0_SIZE = 20"

.SS "\fBconst\fP \fBunsigned\fP int sc_dt::SCFX_IEEE_DOUBLE_M1_SIZE = 32"

.SS "\fBconst\fP \fBunsigned\fP int sc_dt::SCFX_IEEE_DOUBLE_M_SIZE = 52"

.SS "\fBconst\fP \fBunsigned\fP int sc_dt::SCFX_IEEE_FLOAT_BIAS = 127\fBU\fP"

.SS "\fBconst\fP int sc_dt::SCFX_IEEE_FLOAT_E_MAX = 127"

.SS "\fBconst\fP int sc_dt::SCFX_IEEE_FLOAT_E_MIN = \-126"

.SS "\fBconst\fP \fBunsigned\fP int sc_dt::SCFX_IEEE_FLOAT_E_SIZE = 8"

.SS "\fBconst\fP \fBunsigned\fP int sc_dt::SCFX_IEEE_FLOAT_M_SIZE = 23"

.SS "\fBconst\fP int sc_dt::SCFX_POW10_TABLE_SIZE = 32"

.SH "Author"
.PP 
Generated automatically by Doxygen for VHDL simulator from the source code\&.
