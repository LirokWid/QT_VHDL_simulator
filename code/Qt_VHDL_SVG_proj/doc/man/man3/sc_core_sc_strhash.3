.TH "sc_core::sc_strhash< C >" 3 "VHDL simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sc_core::sc_strhash< C >
.SH SYNOPSIS
.br
.PP
.PP
\fR#include <sc_hash\&.h>\fP
.PP
Inherits \fBsc_core::sc_phash_base\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBsc_strhash_iter\fP< \fBC\fP > \fBiterator\fP"
.br
.in -1c

Public Types inherited from \fBsc_core::sc_phash_base\fP
.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBunsigned\fP(* \fBhash_fn_t\fP) (\fBconst\fP \fBvoid\fP *)"
.br
.ti -1c
.RI "\fBtypedef\fP int(* \fBcmpr_fn_t\fP) (\fBconst\fP \fBvoid\fP *, \fBconst\fP \fBvoid\fP *)"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBsc_strhash\fP (\fBC\fP \fBdef\fP=(\fBC\fP) 0, int size=\fBPHASH_DEFAULT_INIT_TABLE_SIZE\fP, int \fBdensity\fP=\fBPHASH_DEFAULT_MAX_DENSITY\fP, \fBdouble\fP \fBgrow\fP=\fBPHASH_DEFAULT_GROW_FACTOR\fP, \fBbool\fP \fBreorder\fP=\fBPHASH_DEFAULT_REORDER_FLAG\fP, \fBunsigned\fP(*\fBhash_fn\fP)(\fBconst\fP \fBvoid\fP *)=\fBdefault_str_hash_fn\fP, int(*\fBcmpr_fn\fP)(\fBconst\fP \fBvoid\fP *, \fBconst\fP \fBvoid\fP *)=\fBsc_strhash_cmp\fP)"
.br
.ti -1c
.RI "\fB~sc_strhash\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBerase\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBcopy\fP (\fBconst\fP \fBsc_strhash\fP< \fBC\fP > *b)"
.br
.ti -1c
.RI "\fBvoid\fP \fBcopy\fP (\fBconst\fP \fBsc_strhash\fP< \fBC\fP > &b)"
.br
.ti -1c
.RI "int \fBinsert\fP (\fBchar\fP *\fBk\fP, \fBC\fP \fBc\fP)"
.br
.ti -1c
.RI "int \fBinsert\fP (\fBchar\fP *\fBk\fP)"
.br
.ti -1c
.RI "int \fBinsert_if_not_exists\fP (\fBchar\fP *\fBk\fP, \fBC\fP \fBc\fP)"
.br
.ti -1c
.RI "int \fBinsert_if_not_exists\fP (\fBchar\fP *\fBk\fP)"
.br
.ti -1c
.RI "int \fBremove\fP (\fBconst\fP \fBchar\fP *\fBk\fP)"
.br
.ti -1c
.RI "int \fBremove\fP (\fBconst\fP \fBchar\fP *\fBk\fP, \fBchar\fP **\fBpk\fP, \fBC\fP *\fBpc\fP)"
.br
.ti -1c
.RI "int \fBremove_by_contents\fP (\fBC\fP \fBc\fP)"
.br
.ti -1c
.RI "int \fBremove_by_contents\fP (\fBbool\fP(*\fBpredicate\fP)(\fBconst\fP \fBvoid\fP *, \fBvoid\fP *), \fBvoid\fP *arg)"
.br
.ti -1c
.RI "int \fBlookup\fP (\fBconst\fP \fBchar\fP *\fBk\fP, \fBC\fP *\fBpc\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBcontains\fP (\fBconst\fP \fBchar\fP *\fBk\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBC\fP \fBoperator[]\fP (\fBconst\fP \fBchar\fP *\fBk\fP) \fBconst\fP"
.br
.in -1c

Public Member Functions inherited from \fBsc_core::sc_phash_base\fP
.in +1c
.ti -1c
.RI "\fBsc_phash_base\fP (\fBvoid\fP *\fBdef\fP=0, int size=\fBPHASH_DEFAULT_INIT_TABLE_SIZE\fP, int \fBdensity\fP=\fBPHASH_DEFAULT_MAX_DENSITY\fP, \fBdouble\fP \fBgrow\fP=\fBPHASH_DEFAULT_GROW_FACTOR\fP, \fBbool\fP \fBreorder\fP=\fBPHASH_DEFAULT_REORDER_FLAG\fP, \fBhash_fn_t\fP \fBhash_fn\fP=\fBdefault_ptr_hash_fn\fP, \fBcmpr_fn_t\fP \fBcmpr_fn\fP=0)"
.br
.ti -1c
.RI "\fB~sc_phash_base\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBset_cmpr_fn\fP (\fBcmpr_fn_t\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBset_hash_fn\fP (\fBhash_fn_t\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBempty\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBunsigned\fP \fBcount\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBerase\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBerase\fP (\fBvoid\fP(*kfree)(\fBvoid\fP *))"
.br
.ti -1c
.RI "\fBvoid\fP \fBcopy\fP (\fBconst\fP \fBsc_phash_base\fP *)"
.br
.ti -1c
.RI "\fBvoid\fP \fBcopy\fP (\fBconst\fP \fBsc_phash_base\fP &b)"
.br
.ti -1c
.RI "\fBvoid\fP \fBcopy\fP (\fBconst\fP \fBsc_phash_base\fP &b, \fBvoid\fP *(*kdup)(\fBconst\fP \fBvoid\fP *), \fBvoid\fP(*kfree)(\fBvoid\fP *))"
.br
.ti -1c
.RI "int \fBinsert\fP (\fBvoid\fP *\fBk\fP, \fBvoid\fP *\fBc\fP)"
.br
.ti -1c
.RI "int \fBinsert\fP (\fBvoid\fP *\fBk\fP)"
.br
.ti -1c
.RI "int \fBinsert\fP (\fBvoid\fP *\fBk\fP, \fBvoid\fP *\fBc\fP, \fBvoid\fP *(*kdup)(\fBconst\fP \fBvoid\fP *))"
.br
.ti -1c
.RI "int \fBinsert_if_not_exists\fP (\fBvoid\fP *\fBk\fP, \fBvoid\fP *\fBc\fP)"
.br
.ti -1c
.RI "int \fBinsert_if_not_exists\fP (\fBvoid\fP *\fBk\fP)"
.br
.ti -1c
.RI "int \fBinsert_if_not_exists\fP (\fBvoid\fP *\fBk\fP, \fBvoid\fP *\fBc\fP, \fBvoid\fP *(*kdup)(\fBconst\fP \fBvoid\fP *))"
.br
.ti -1c
.RI "int \fBremove\fP (\fBconst\fP \fBvoid\fP *\fBk\fP)"
.br
.ti -1c
.RI "int \fBremove\fP (\fBconst\fP \fBvoid\fP *\fBk\fP, \fBvoid\fP **\fBpk\fP, \fBvoid\fP **\fBpc\fP)"
.br
.ti -1c
.RI "int \fBremove\fP (\fBconst\fP \fBvoid\fP *\fBk\fP, \fBvoid\fP(*kfree)(\fBvoid\fP *))"
.br
.ti -1c
.RI "int \fBremove_by_contents\fP (\fBconst\fP \fBvoid\fP *\fBc\fP)"
.br
.ti -1c
.RI "int \fBremove_by_contents\fP (\fBbool\fP(*\fBpredicate\fP)(\fBconst\fP \fBvoid\fP *, \fBvoid\fP *), \fBvoid\fP *arg)"
.br
.ti -1c
.RI "int \fBremove_by_contents\fP (\fBconst\fP \fBvoid\fP *\fBc\fP, \fBvoid\fP(*kfree)(\fBvoid\fP *))"
.br
.ti -1c
.RI "int \fBremove_by_contents\fP (\fBbool\fP(*\fBpredicate\fP)(\fBconst\fP \fBvoid\fP *, \fBvoid\fP *), \fBvoid\fP *arg, \fBvoid\fP(*kfree)(\fBvoid\fP *))"
.br
.ti -1c
.RI "int \fBlookup\fP (\fBconst\fP \fBvoid\fP *\fBk\fP, \fBvoid\fP **\fBpc\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBcontains\fP (\fBconst\fP \fBvoid\fP *\fBk\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP * \fBoperator[]\fP (\fBconst\fP \fBvoid\fP *key) \fBconst\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "\fBclass\fP \fBsc_strhash_iter< C >\fP"
.br
.in -1c
.SS "Additional Inherited Members"


Protected Member Functions inherited from \fBsc_core::sc_phash_base\fP
.in +1c
.ti -1c
.RI "\fBvoid\fP \fBrehash\fP ()"
.br
.ti -1c
.RI "\fBunsigned\fP \fBdo_hash\fP (\fBconst\fP \fBvoid\fP *key) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_phash_elem\fP * \fBadd_direct\fP (\fBvoid\fP *key, \fBvoid\fP *contents, \fBunsigned\fP \fBhash_val\fP)"
.br
.ti -1c
.RI "\fBsc_phash_elem\fP * \fBfind_entry_c\fP (\fBunsigned\fP \fBhv\fP, \fBconst\fP \fBvoid\fP *\fBk\fP, \fBsc_phash_elem\fP ***\fBplast\fP)"
.br
.ti -1c
.RI "\fBsc_phash_elem\fP * \fBfind_entry_q\fP (\fBunsigned\fP \fBhv\fP, \fBconst\fP \fBvoid\fP *\fBk\fP, \fBsc_phash_elem\fP ***\fBplast\fP)"
.br
.ti -1c
.RI "\fBsc_phash_elem\fP * \fBfind_entry\fP (\fBunsigned\fP \fBhv\fP, \fBconst\fP \fBvoid\fP *\fBk\fP, \fBsc_phash_elem\fP ***\fBplast\fP=0) \fBconst\fP"
.br
.in -1c

Protected Attributes inherited from \fBsc_core::sc_phash_base\fP
.in +1c
.ti -1c
.RI "\fBvoid\fP * \fBdefault_value\fP"
.br
.ti -1c
.RI "int \fBnum_bins\fP"
.br
.ti -1c
.RI "int \fBnum_entries\fP"
.br
.ti -1c
.RI "int \fBmax_density\fP"
.br
.ti -1c
.RI "int \fBreorder_flag\fP"
.br
.ti -1c
.RI "\fBdouble\fP \fBgrow_factor\fP"
.br
.ti -1c
.RI "\fBsc_phash_elem\fP ** \fBbins\fP"
.br
.ti -1c
.RI "\fBhash_fn_t\fP \fBhash\fP"
.br
.ti -1c
.RI "\fBcmpr_fn_t\fP \fBcmpr\fP"
.br
.in -1c
.SH "Member Typedef Documentation"
.PP 
.SS "template<\fBclass\fP \fBC\fP > \fBtypedef\fP \fBsc_strhash_iter\fP<\fBC\fP> \fBsc_core::sc_strhash\fP< \fBC\fP >::iterator"

.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<\fBclass\fP \fBC\fP > \fBsc_core::sc_strhash\fP< \fBC\fP >::sc_strhash (\fBC\fP def = \fR(\fBC\fP) 0\fP, int size = \fR\fBPHASH_DEFAULT_INIT_TABLE_SIZE\fP\fP, int density = \fR\fBPHASH_DEFAULT_MAX_DENSITY\fP\fP, \fBdouble\fP grow = \fR\fBPHASH_DEFAULT_GROW_FACTOR\fP\fP, \fBbool\fP reorder = \fR\fBPHASH_DEFAULT_REORDER_FLAG\fP\fP, \fBunsigned\fP(*)(\fBconst\fP \fBvoid\fP *) hash_fn = \fR\fBdefault_str_hash_fn\fP\fP, int(*)(\fBconst\fP \fBvoid\fP *, \fBconst\fP \fBvoid\fP *) cmpr_fn = \fR\fBsc_strhash_cmp\fP\fP)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBC\fP > \fBsc_core::sc_strhash\fP< \fBC\fP >::~\fBsc_strhash\fP ()\fR [inline]\fP"

.SH "Member Function Documentation"
.PP 
.SS "template<\fBclass\fP \fBC\fP > \fBbool\fP \fBsc_core::sc_strhash\fP< \fBC\fP >::contains (\fBconst\fP \fBchar\fP * k) const\fR [inline]\fP"

.SS "template<\fBclass\fP \fBC\fP > \fBvoid\fP \fBsc_core::sc_strhash\fP< \fBC\fP >::copy (\fBconst\fP \fBsc_strhash\fP< \fBC\fP > & b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBC\fP > \fBvoid\fP \fBsc_core::sc_strhash\fP< \fBC\fP >::copy (\fBconst\fP \fBsc_strhash\fP< \fBC\fP > * b)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBC\fP > \fBvoid\fP \fBsc_core::sc_strhash\fP< \fBC\fP >::erase ()\fR [inline]\fP"

.SS "template<\fBclass\fP \fBC\fP > int \fBsc_core::sc_strhash\fP< \fBC\fP >::insert (\fBchar\fP * k)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBC\fP > int \fBsc_core::sc_strhash\fP< \fBC\fP >::insert (\fBchar\fP * k, \fBC\fP c)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBC\fP > int \fBsc_core::sc_strhash\fP< \fBC\fP >::insert_if_not_exists (\fBchar\fP * k)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBC\fP > int \fBsc_core::sc_strhash\fP< \fBC\fP >::insert_if_not_exists (\fBchar\fP * k, \fBC\fP c)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBC\fP > int \fBsc_core::sc_strhash\fP< \fBC\fP >::lookup (\fBconst\fP \fBchar\fP * k, \fBC\fP * pc) const\fR [inline]\fP"

.SS "template<\fBclass\fP \fBC\fP > \fBC\fP \fBsc_core::sc_strhash\fP< \fBC\fP >\fB::operator\fP[] (\fBconst\fP \fBchar\fP * k) const\fR [inline]\fP"

.SS "template<\fBclass\fP \fBC\fP > int \fBsc_core::sc_strhash\fP< \fBC\fP >::remove (\fBconst\fP \fBchar\fP * k)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBC\fP > int \fBsc_core::sc_strhash\fP< \fBC\fP >::remove (\fBconst\fP \fBchar\fP * k, \fBchar\fP ** pk, \fBC\fP * pc)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBC\fP > int \fBsc_core::sc_strhash\fP< \fBC\fP >::remove_by_contents (\fBbool\fP(*)(\fBconst\fP \fBvoid\fP *, \fBvoid\fP *) predicate, \fBvoid\fP * arg)\fR [inline]\fP"

.SS "template<\fBclass\fP \fBC\fP > int \fBsc_core::sc_strhash\fP< \fBC\fP >::remove_by_contents (\fBC\fP c)\fR [inline]\fP"

.SH "Friends And Related Symbol Documentation"
.PP 
.SS "template<\fBclass\fP \fBC\fP > \fBfriend\fP \fBclass\fP \fBsc_strhash_iter\fP< \fBC\fP >\fR [friend]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for VHDL simulator from the source code\&.
