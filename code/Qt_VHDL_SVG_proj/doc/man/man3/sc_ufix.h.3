.TH "C:/Users/BJRODIER/Documents/QT_REPO/QT_VHDL_simulator/code/Ressources/SystemC/include/sysc/datatypes/fx/sc_ufix.h" 3 "VHDL simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/BJRODIER/Documents/QT_REPO/QT_VHDL_simulator/code/Ressources/SystemC/include/sysc/datatypes/fx/sc_ufix.h
.SH SYNOPSIS
.br
.PP
\fR#include 'sysc/datatypes/fx/sc_fxnum\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBsc_dt::sc_ufix\fP"
.br
.ti -1c
.RI "class \fBsc_dt::sc_ufix_fast\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBsc_dt\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#\fBdefine\fP \fBDECL_CTORS_T\fP(\fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDECL_CTORS_T_A\fP(\fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDECL_CTORS_T_B\fP(\fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDECL_ASN_OP_T\fP(\fBop\fP,  \fBtp\fP)       sc_ufix& \fBoperator\fP \fBop\fP ( \fBtp\fP );"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDECL_ASN_OP_OTHER\fP(\fBop\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDECL_ASN_OP\fP(\fBop\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDECL_CTORS_T\fP(\fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDECL_CTORS_T_A\fP(\fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDECL_CTORS_T_B\fP(\fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDECL_ASN_OP_T\fP(\fBop\fP,  \fBtp\fP)       sc_ufix_fast& \fBoperator\fP \fBop\fP ( \fBtp\fP );"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDECL_ASN_OP_OTHER\fP(\fBop\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDECL_ASN_OP\fP(\fBop\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_CTORS_T_A\fP(\fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_CTORS_T_B\fP(\fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_BIN_OP_T\fP(\fBop\fP,  \fBop2\fP,  \fBtp1\fP,  \fBtp2\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_BIN_FNC_T\fP(\fBfnc\fP,  \fBop2\fP,  \fBtp1\fP,  \fBtp2\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_ASN_OP_T\fP(\fBop\fP,  \fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_ASN_OP_OTHER\fP(\fBop\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_ASN_OP\fP(\fBop\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_ASN_OP_T\fP(\fBop\fP,  \fBop2\fP,  \fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_CTORS_T_A\fP(\fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_CTORS_T_B\fP(\fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_BIN_OP_T\fP(\fBop\fP,  \fBop2\fP,  \fBtp1\fP,  \fBtp2\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_BIN_FNC_T\fP(\fBfnc\fP,  \fBop2\fP,  \fBtp1\fP,  \fBtp2\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_ASN_OP_T\fP(\fBop\fP,  \fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_ASN_OP_OTHER\fP(\fBop\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_ASN_OP\fP(\fBop\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_ASN_OP_T\fP(\fBop\fP,  \fBop2\fP,  \fBtp\fP)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBvoid\fP \fBsc_dt::b_not\fP (\fBsc_ufix\fP &\fBc\fP, \fBconst\fP \fBsc_ufix\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBsc_dt::b_not\fP (\fBsc_ufix_fast\fP &\fBc\fP, \fBconst\fP \fBsc_ufix_fast\fP &\fBa\fP)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#\fBdefine\fP DECL_ASN_OP(\fBop\fP)"
\fBValue:\fP.PP
.nf
    DECL_ASN_OP_T(op,int)                                                     \\
    DECL_ASN_OP_T(op,unsigned int)                                            \\
    DECL_ASN_OP_T(op,long)                                                    \\
    DECL_ASN_OP_T(op,unsigned long)                                           \\
    DECL_ASN_OP_T(op,float)                                                  \\
    DECL_ASN_OP_T(op,double)                                                  \\
    DECL_ASN_OP_T(op,const char*)                                             \\
    DECL_ASN_OP_T(op,const sc_fxval&)                                         \\
    DECL_ASN_OP_T(op,const sc_fxval_fast&)                                    \\
    DECL_ASN_OP_T(op,const sc_fxnum&)                                         \\
    DECL_ASN_OP_T(op,const sc_fxnum_fast&)                                    \\
    DECL_ASN_OP_OTHER(op)
.fi

.SS "#\fBdefine\fP DECL_ASN_OP(\fBop\fP)"
\fBValue:\fP.PP
.nf
    DECL_ASN_OP_T(op,int)                                                     \\
    DECL_ASN_OP_T(op,unsigned int)                                            \\
    DECL_ASN_OP_T(op,long)                                                    \\
    DECL_ASN_OP_T(op,unsigned long)                                           \\
    DECL_ASN_OP_T(op,float)                                                  \\
    DECL_ASN_OP_T(op,double)                                                  \\
    DECL_ASN_OP_T(op,const char*)                                             \\
    DECL_ASN_OP_T(op,const sc_fxval&)                                         \\
    DECL_ASN_OP_T(op,const sc_fxval_fast&)                                    \\
    DECL_ASN_OP_T(op,const sc_fxnum&)                                         \\
    DECL_ASN_OP_T(op,const sc_fxnum_fast&)                                    \\
    DECL_ASN_OP_OTHER(op)
.fi

.SS "#\fBdefine\fP DECL_ASN_OP_OTHER(\fBop\fP)"
\fBValue:\fP.PP
.nf
    DECL_ASN_OP_T(op,int64)                                                   \\
    DECL_ASN_OP_T(op,uint64)                                                  \\
    DECL_ASN_OP_T(op,const sc_int_base&)                                      \\
    DECL_ASN_OP_T(op,const sc_uint_base&)                                     \\
    DECL_ASN_OP_T(op,const sc_signed&)                                        \\
    DECL_ASN_OP_T(op,const sc_unsigned&)
.fi

.SS "#\fBdefine\fP DECL_ASN_OP_OTHER(\fBop\fP)"
\fBValue:\fP.PP
.nf
    DECL_ASN_OP_T(op,int64)                                                   \\
    DECL_ASN_OP_T(op,uint64)                                                  \\
    DECL_ASN_OP_T(op,const sc_int_base&)                                      \\
    DECL_ASN_OP_T(op,const sc_uint_base&)                                     \\
    DECL_ASN_OP_T(op,const sc_signed&)                                        \\
    DECL_ASN_OP_T(op,const sc_unsigned&)
.fi

.SS "#\fBdefine\fP DECL_ASN_OP_T(\fBop\fP, \fBtp\fP)       sc_ufix& \fBoperator\fP \fBop\fP ( \fBtp\fP );"

.SS "#\fBdefine\fP DECL_ASN_OP_T(\fBop\fP, \fBtp\fP)       sc_ufix_fast& \fBoperator\fP \fBop\fP ( \fBtp\fP );"

.SS "#\fBdefine\fP DECL_CTORS_T(\fBtp\fP)"

.SS "#\fBdefine\fP DECL_CTORS_T(\fBtp\fP)"

.SS "#\fBdefine\fP DECL_CTORS_T_A(\fBtp\fP)"
\fBValue:\fP.PP
.nf
             sc_ufix( tp,                                                     \\
                  sc_fxnum_observer* = 0 );                               \\
    DECL_CTORS_T(tp)
.fi

.SS "#\fBdefine\fP DECL_CTORS_T_A(\fBtp\fP)"
\fBValue:\fP.PP
.nf
             sc_ufix_fast( tp,                                                \\
                   sc_fxnum_fast_observer* = 0 );                     \\
    DECL_CTORS_T(tp)
.fi

.SS "#\fBdefine\fP DECL_CTORS_T_B(\fBtp\fP)"
\fBValue:\fP.PP
.nf
    explicit sc_ufix( tp,                                                     \\
                  sc_fxnum_observer* = 0 );                               \\
    DECL_CTORS_T(tp)
.fi

.SS "#\fBdefine\fP DECL_CTORS_T_B(\fBtp\fP)"
\fBValue:\fP.PP
.nf
    explicit sc_ufix_fast( tp,                                                \\
                   sc_fxnum_fast_observer* = 0 );                     \\
    DECL_CTORS_T(tp)
.fi

.SS "#\fBdefine\fP DEFN_ASN_OP(\fBop\fP)"
\fBValue:\fP.PP
.nf
DEFN_ASN_OP_T(op,int)                                                         \\
DEFN_ASN_OP_T(op,unsigned int)                                                \\
DEFN_ASN_OP_T(op,long)                                                        \\
DEFN_ASN_OP_T(op,unsigned long)                                               \\
DEFN_ASN_OP_T(op,float)                                                      \\
DEFN_ASN_OP_T(op,double)                                                      \\
DEFN_ASN_OP_T(op,const char*)                                                 \\
DEFN_ASN_OP_T(op,const sc_fxval&)                                             \\
DEFN_ASN_OP_T(op,const sc_fxval_fast&)                                        \\
DEFN_ASN_OP_T(op,const sc_fxnum&)                                             \\
DEFN_ASN_OP_T(op,const sc_fxnum_fast&)                                        \\
DEFN_ASN_OP_OTHER(op)
.fi

.SS "#\fBdefine\fP DEFN_ASN_OP(\fBop\fP)"
\fBValue:\fP.PP
.nf
DEFN_ASN_OP_T(op,int)                                                         \\
DEFN_ASN_OP_T(op,unsigned int)                                                \\
DEFN_ASN_OP_T(op,long)                                                        \\
DEFN_ASN_OP_T(op,unsigned long)                                               \\
DEFN_ASN_OP_T(op,float)                                                      \\
DEFN_ASN_OP_T(op,double)                                                      \\
DEFN_ASN_OP_T(op,const char*)                                                 \\
DEFN_ASN_OP_T(op,const sc_fxval&)                                             \\
DEFN_ASN_OP_T(op,const sc_fxval_fast&)                                        \\
DEFN_ASN_OP_T(op,const sc_fxnum&)                                             \\
DEFN_ASN_OP_T(op,const sc_fxnum_fast&)                                        \\
DEFN_ASN_OP_OTHER(op)
.fi

.SS "#\fBdefine\fP DEFN_ASN_OP_OTHER(\fBop\fP)"
\fBValue:\fP.PP
.nf
DEFN_ASN_OP_T(op,int64)                                                       \\
DEFN_ASN_OP_T(op,uint64)                                                      \\
DEFN_ASN_OP_T(op,const sc_int_base&)                                          \\
DEFN_ASN_OP_T(op,const sc_uint_base&)                                         \\
DEFN_ASN_OP_T(op,const sc_signed&)                                            \\
DEFN_ASN_OP_T(op,const sc_unsigned&)
.fi

.SS "#\fBdefine\fP DEFN_ASN_OP_OTHER(\fBop\fP)"
\fBValue:\fP.PP
.nf
DEFN_ASN_OP_T(op,int64)                                                       \\
DEFN_ASN_OP_T(op,uint64)                                                      \\
DEFN_ASN_OP_T(op,const sc_int_base&)                                          \\
DEFN_ASN_OP_T(op,const sc_uint_base&)                                         \\
DEFN_ASN_OP_T(op,const sc_signed&)                                            \\
DEFN_ASN_OP_T(op,const sc_unsigned&)
.fi

.SS "#\fBdefine\fP DEFN_ASN_OP_T(\fBop\fP, \fBop2\fP, \fBtp\fP)"
\fBValue:\fP.PP
.nf
inline                                                                        \\
sc_ufix&                                                                      \\
sc_ufix::operator op ( const tp& b )                                          \\
{                                                                             \\
    SC_FXNUM_OBSERVER_READ_( *this )                                          \\
    b\&.observer_read();                                                        \\
    int iwl_c = iwl();                                                        \\
    for( int i = iwl_c \- wl(); i < iwl_c; ++ i )                              \\
    set_bit( i, get_bit( i ) op2 b\&.get_bit( i ) );                        \\
    cast();                                                                   \\
    SC_FXNUM_OBSERVER_WRITE_( *this )                                         \\
    return *this;                                                             \\
}
.fi

.SS "#\fBdefine\fP DEFN_ASN_OP_T(\fBop\fP, \fBop2\fP, \fBtp\fP)"
\fBValue:\fP.PP
.nf
inline                                                                        \\
sc_ufix_fast&                                                                 \\
sc_ufix_fast::operator op ( const tp& b )                                     \\
{                                                                             \\
    SC_FXNUM_FAST_OBSERVER_READ_( *this )                                     \\
    b\&.observer_read();                                                        \\
    int iwl_c = iwl();                                                        \\
    for( int i = iwl_c \- wl(); i < iwl_c; ++ i )                              \\
    set_bit( i, get_bit( i ) op2 b\&.get_bit( i ) );                        \\
    cast();                                                                   \\
    SC_FXNUM_FAST_OBSERVER_WRITE_( *this )                                    \\
    return *this;                                                             \\
}
.fi

.SS "#\fBdefine\fP DEFN_ASN_OP_T(\fBop\fP, \fBtp\fP)"
\fBValue:\fP.PP
.nf
inline                                                                        \\
sc_ufix&                                                                      \\
sc_ufix::operator op ( tp a )                                                 \\
{                                                                             \\
    sc_fxnum::operator op( a );                                               \\
    return *this;                                                             \\
}
.fi

.SS "#\fBdefine\fP DEFN_ASN_OP_T(\fBop\fP, \fBtp\fP)"
\fBValue:\fP.PP
.nf
inline                                                                        \\
sc_ufix_fast&                                                                 \\
sc_ufix_fast::operator op ( tp a )                                            \\
{                                                                             \\
    sc_fxnum_fast::operator op( a );                                          \\
    return *this;                                                             \\
}
.fi

.SS "#\fBdefine\fP DEFN_BIN_FNC_T(\fBfnc\fP, \fBop2\fP, \fBtp1\fP, \fBtp2\fP)"
\fBValue:\fP.PP
.nf
inline                                                                        \\
void                                                                          \\
fnc ( sc_ufix& c, const tp1& a, const tp2& b )                                \\
{                                                                             \\
    a\&.observer_read();                                                        \\
    b\&.observer_read();                                                        \\
    int iwl_c = c\&.iwl();                                                      \\
    for( int i = iwl_c \- c\&.wl(); i < iwl_c; ++ i )                            \\
    c\&.set_bit( i, a\&.get_bit( i ) op2 b\&.get_bit( i ) );                    \\
    c\&.cast();                                                                 \\
    SC_FXNUM_OBSERVER_WRITE_( c )                                             \\
}
.fi

.SS "#\fBdefine\fP DEFN_BIN_FNC_T(\fBfnc\fP, \fBop2\fP, \fBtp1\fP, \fBtp2\fP)"
\fBValue:\fP.PP
.nf
inline                                                                        \\
void                                                                          \\
fnc ( sc_ufix_fast& c, const tp1& a, const tp2& b )                           \\
{                                                                             \\
    a\&.observer_read();                                                        \\
    b\&.observer_read();                                                        \\
    int iwl_c = c\&.iwl();                                                      \\
    for( int i = iwl_c \- c\&.wl(); i < iwl_c; ++ i )                            \\
    c\&.set_bit( i, a\&.get_bit( i ) op2 b\&.get_bit( i ) );                    \\
    c\&.cast();                                                                 \\
    SC_FXNUM_FAST_OBSERVER_WRITE_( c )                                        \\
}
.fi

.SS "#\fBdefine\fP DEFN_BIN_OP_T(\fBop\fP, \fBop2\fP, \fBtp1\fP, \fBtp2\fP)"
\fBValue:\fP.PP
.nf
inline                                                                        \\
const sc_ufix                                                                 \\
operator op ( const tp1& a, const tp2& b )                                    \\
{                                                                             \\
    a\&.observer_read();                                                        \\
    b\&.observer_read();                                                        \\
    int iwl_a = a\&.iwl();                                                      \\
    int iwl_b = b\&.iwl();                                                      \\
    int iwl_c = sc_max( iwl_a, iwl_b );                                       \\
    int fwl_c = sc_max( a\&.wl() \- iwl_a, b\&.wl() \- iwl_b );                     \\
    sc_ufix c( iwl_c + fwl_c, iwl_c );                                        \\
    for( int i = \-fwl_c; i < iwl_c; ++ i )                                    \\
    c\&.set_bit( i, a\&.get_bit( i ) op2 b\&.get_bit( i ) );                    \\
    return sc_ufix( c, iwl_c + fwl_c, iwl_c );                                \\
}
.fi

.SS "#\fBdefine\fP DEFN_BIN_OP_T(\fBop\fP, \fBop2\fP, \fBtp1\fP, \fBtp2\fP)"
\fBValue:\fP.PP
.nf
inline                                                                        \\
const sc_ufix_fast                                                            \\
operator op ( const tp1& a, const tp2& b )                                    \\
{                                                                             \\
    a\&.observer_read();                                                        \\
    b\&.observer_read();                                                        \\
    int iwl_a = a\&.iwl();                                                      \\
    int iwl_b = b\&.iwl();                                                      \\
    int iwl_c = sc_max( iwl_a, iwl_b );                                       \\
    int fwl_c = sc_max( a\&.wl() \- iwl_a, b\&.wl() \- iwl_b );                     \\
    sc_ufix_fast c( iwl_c + fwl_c, iwl_c );                                   \\
    for( int i = \-fwl_c; i < iwl_c; ++ i )                                    \\
    c\&.set_bit( i, a\&.get_bit( i ) op2 b\&.get_bit( i ) );                    \\
    return sc_ufix_fast( c, iwl_c + fwl_c, iwl_c );                           \\
}
.fi

.SS "#\fBdefine\fP DEFN_CTORS_T_A(\fBtp\fP)"

.SS "#\fBdefine\fP DEFN_CTORS_T_A(\fBtp\fP)"

.SS "#\fBdefine\fP DEFN_CTORS_T_B(\fBtp\fP)"

.SS "#\fBdefine\fP DEFN_CTORS_T_B(\fBtp\fP)"

.SH "Author"
.PP 
Generated automatically by Doxygen for VHDL simulator from the source code\&.
