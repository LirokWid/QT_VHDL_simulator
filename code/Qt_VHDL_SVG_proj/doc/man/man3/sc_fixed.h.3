.TH "C:/Users/BJRODIER/Documents/QT_REPO/QT_VHDL_simulator/code/Ressources/SystemC/include/sysc/datatypes/fx/sc_fixed.h" 3 "VHDL simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/BJRODIER/Documents/QT_REPO/QT_VHDL_simulator/code/Ressources/SystemC/include/sysc/datatypes/fx/sc_fixed.h
.SH SYNOPSIS
.br
.PP
\fR#include 'sysc/datatypes/fx/sc_fix\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBsc_dt::sc_fixed< W, I, Q, O, N >\fP"
.br
.ti -1c
.RI "class \fBsc_dt::sc_fixed_fast< W, I, Q, O, N >\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBsc_dt\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#\fBdefine\fP \fBDECL_CTORS_T_A\fP(\fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDECL_CTORS_T_B\fP(\fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDECL_ASN_OP_T\fP(\fBop\fP,  \fBtp\fP)       sc_fixed& \fBoperator\fP \fBop\fP ( \fBtp\fP );"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDECL_ASN_OP_OTHER\fP(\fBop\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDECL_ASN_OP\fP(\fBop\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDECL_CTORS_T_A\fP(\fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDECL_CTORS_T_B\fP(\fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDECL_ASN_OP_T\fP(\fBop\fP,  \fBtp\fP)       sc_fixed_fast& \fBoperator\fP \fBop\fP ( \fBtp\fP );"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDECL_ASN_OP_OTHER\fP(\fBop\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDECL_ASN_OP\fP(\fBop\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_CTORS_T\fP(\fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_ASN_OP_T\fP(\fBop\fP,  \fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_ASN_OP_OTHER\fP(\fBop\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_ASN_OP\fP(\fBop\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_CTORS_T\fP(\fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_ASN_OP_T\fP(\fBop\fP,  \fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_ASN_OP_OTHER\fP(\fBop\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_ASN_OP\fP(\fBop\fP)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#\fBdefine\fP DECL_ASN_OP(\fBop\fP)"
\fBValue:\fP.PP
.nf
    DECL_ASN_OP_T(op,int)                                                     \\
    DECL_ASN_OP_T(op,unsigned int)                                            \\
    DECL_ASN_OP_T(op,long)                                                    \\
    DECL_ASN_OP_T(op,unsigned long)                                           \\
    DECL_ASN_OP_T(op,float)                                                  \\
    DECL_ASN_OP_T(op,double)                                                  \\
    DECL_ASN_OP_T(op,const char*)                                             \\
    DECL_ASN_OP_T(op,const sc_fxval&)                                         \\
    DECL_ASN_OP_T(op,const sc_fxval_fast&)                                    \\
    DECL_ASN_OP_T(op,const sc_fxnum&)                                         \\
    DECL_ASN_OP_T(op,const sc_fxnum_fast&)                                    \\
    DECL_ASN_OP_OTHER(op)
.fi

.SS "#\fBdefine\fP DECL_ASN_OP(\fBop\fP)"
\fBValue:\fP.PP
.nf
    DECL_ASN_OP_T(op,int)                                                     \\
    DECL_ASN_OP_T(op,unsigned int)                                            \\
    DECL_ASN_OP_T(op,long)                                                    \\
    DECL_ASN_OP_T(op,unsigned long)                                           \\
    DECL_ASN_OP_T(op,float)                                                  \\
    DECL_ASN_OP_T(op,double)                                                  \\
    DECL_ASN_OP_T(op,const char*)                                             \\
    DECL_ASN_OP_T(op,const sc_fxval&)                                         \\
    DECL_ASN_OP_T(op,const sc_fxval_fast&)                                    \\
    DECL_ASN_OP_T(op,const sc_fxnum&)                                         \\
    DECL_ASN_OP_T(op,const sc_fxnum_fast&)                                    \\
    DECL_ASN_OP_OTHER(op)
.fi

.SS "#\fBdefine\fP DECL_ASN_OP_OTHER(\fBop\fP)"
\fBValue:\fP.PP
.nf
    DECL_ASN_OP_T(op,int64)                                                   \\
    DECL_ASN_OP_T(op,uint64)                                                  \\
    DECL_ASN_OP_T(op,const sc_int_base&)                                      \\
    DECL_ASN_OP_T(op,const sc_uint_base&)                                     \\
    DECL_ASN_OP_T(op,const sc_signed&)                                        \\
    DECL_ASN_OP_T(op,const sc_unsigned&)
.fi

.SS "#\fBdefine\fP DECL_ASN_OP_OTHER(\fBop\fP)"
\fBValue:\fP.PP
.nf
    DECL_ASN_OP_T(op,int64)                                                   \\
    DECL_ASN_OP_T(op,uint64)                                                  \\
    DECL_ASN_OP_T(op,const sc_int_base&)                                      \\
    DECL_ASN_OP_T(op,const sc_uint_base&)                                     \\
    DECL_ASN_OP_T(op,const sc_signed&)                                        \\
    DECL_ASN_OP_T(op,const sc_unsigned&)
.fi

.SS "#\fBdefine\fP DECL_ASN_OP_T(\fBop\fP, \fBtp\fP)       sc_fixed& \fBoperator\fP \fBop\fP ( \fBtp\fP );"

.SS "#\fBdefine\fP DECL_ASN_OP_T(\fBop\fP, \fBtp\fP)       sc_fixed_fast& \fBoperator\fP \fBop\fP ( \fBtp\fP );"

.SS "#\fBdefine\fP DECL_CTORS_T_A(\fBtp\fP)"
\fBValue:\fP.PP
.nf
             sc_fixed( tp, sc_fxnum_observer* = 0 );                          \\
             sc_fixed( tp, const sc_fxcast_switch&, sc_fxnum_observer* = 0 );
.fi

.SS "#\fBdefine\fP DECL_CTORS_T_A(\fBtp\fP)"
\fBValue:\fP.PP
.nf
             sc_fixed_fast( tp, sc_fxnum_fast_observer* = 0 );                \\
             sc_fixed_fast( tp, const sc_fxcast_switch&,                      \\
                            sc_fxnum_fast_observer* = 0 );
.fi

.SS "#\fBdefine\fP DECL_CTORS_T_B(\fBtp\fP)"
\fBValue:\fP.PP
.nf
    explicit sc_fixed( tp, sc_fxnum_observer* = 0 );                          \\
             sc_fixed( tp, const sc_fxcast_switch&, sc_fxnum_observer* = 0 );
.fi

.SS "#\fBdefine\fP DECL_CTORS_T_B(\fBtp\fP)"
\fBValue:\fP.PP
.nf
    explicit sc_fixed_fast( tp, sc_fxnum_fast_observer* = 0 );                \\
             sc_fixed_fast( tp, const sc_fxcast_switch&,                      \\
                            sc_fxnum_fast_observer* = 0 );
.fi

.SS "#\fBdefine\fP DEFN_ASN_OP(\fBop\fP)"
\fBValue:\fP.PP
.nf
DEFN_ASN_OP_T(op,int)                                                         \\
DEFN_ASN_OP_T(op,unsigned int)                                                \\
DEFN_ASN_OP_T(op,long)                                                        \\
DEFN_ASN_OP_T(op,unsigned long)                                               \\
DEFN_ASN_OP_T(op,float)                                                      \\
DEFN_ASN_OP_T(op,double)                                                      \\
DEFN_ASN_OP_T(op,const char*)                                                 \\
DEFN_ASN_OP_T(op,const sc_fxval&)                                             \\
DEFN_ASN_OP_T(op,const sc_fxval_fast&)                                        \\
DEFN_ASN_OP_T(op,const sc_fxnum&)                                             \\
DEFN_ASN_OP_T(op,const sc_fxnum_fast&)                                        \\
DEFN_ASN_OP_OTHER(op)
.fi

.SS "#\fBdefine\fP DEFN_ASN_OP(\fBop\fP)"
\fBValue:\fP.PP
.nf
DEFN_ASN_OP_T(op,int)                                                         \\
DEFN_ASN_OP_T(op,unsigned int)                                                \\
DEFN_ASN_OP_T(op,long)                                                        \\
DEFN_ASN_OP_T(op,unsigned long)                                               \\
DEFN_ASN_OP_T(op,float)                                                      \\
DEFN_ASN_OP_T(op,double)                                                      \\
DEFN_ASN_OP_T(op,const char*)                                                 \\
DEFN_ASN_OP_T(op,const sc_fxval&)                                             \\
DEFN_ASN_OP_T(op,const sc_fxval_fast&)                                        \\
DEFN_ASN_OP_T(op,const sc_fxnum&)                                             \\
DEFN_ASN_OP_T(op,const sc_fxnum_fast&)                                        \\
DEFN_ASN_OP_OTHER(op)
.fi

.SS "#\fBdefine\fP DEFN_ASN_OP_OTHER(\fBop\fP)"
\fBValue:\fP.PP
.nf
DEFN_ASN_OP_T(op,int64)                                                       \\
DEFN_ASN_OP_T(op,uint64)                                                      \\
DEFN_ASN_OP_T(op,const sc_int_base&)                                          \\
DEFN_ASN_OP_T(op,const sc_uint_base&)                                         \\
DEFN_ASN_OP_T(op,const sc_signed&)                                            \\
DEFN_ASN_OP_T(op,const sc_unsigned&)
.fi

.SS "#\fBdefine\fP DEFN_ASN_OP_OTHER(\fBop\fP)"
\fBValue:\fP.PP
.nf
DEFN_ASN_OP_T(op,int64)                                                       \\
DEFN_ASN_OP_T(op,uint64)                                                      \\
DEFN_ASN_OP_T(op,const sc_int_base&)                                          \\
DEFN_ASN_OP_T(op,const sc_uint_base&)                                         \\
DEFN_ASN_OP_T(op,const sc_signed&)                                            \\
DEFN_ASN_OP_T(op,const sc_unsigned&)
.fi

.SS "#\fBdefine\fP DEFN_ASN_OP_T(\fBop\fP, \fBtp\fP)"
\fBValue:\fP.PP
.nf
template<int W, int I, sc_q_mode Q, sc_o_mode O, int N>                       \\
inline                                                                        \\
sc_fixed<W,I,Q,O,N>&                                                          \\
sc_fixed<W,I,Q,O,N>::operator op ( tp a )                                     \\
{                                                                             \\
    sc_fix::operator op ( a );                                                \\
    return *this;                                                             \\
}
.fi

.SS "#\fBdefine\fP DEFN_ASN_OP_T(\fBop\fP, \fBtp\fP)"
\fBValue:\fP.PP
.nf
template<int W, int I, sc_q_mode Q, sc_o_mode O, int N>                       \\
inline                                                                        \\
sc_fixed_fast<W,I,Q,O,N>&                                                     \\
sc_fixed_fast<W,I,Q,O,N>::operator op ( tp a )                                \\
{                                                                             \\
    sc_fix_fast::operator op ( a );                                           \\
    return *this;                                                             \\
}
.fi

.SS "#\fBdefine\fP DEFN_CTORS_T(\fBtp\fP)"
\fBValue:\fP.PP
.nf
template<int W, int I, sc_q_mode Q, sc_o_mode O, int N>                       \\
inline                                                                        \\
sc_fixed<W,I,Q,O,N>::sc_fixed( tp a,                                          \\
                   sc_fxnum_observer* observer_ )                 \\
: sc_fix( a, W, I, Q, O, N, observer_ )                                       \\
{}                                                                            \\
                                                                              \\
template<int W, int I, sc_q_mode Q, sc_o_mode O, int N>                       \\
inline                                                                        \\
sc_fixed<W,I,Q,O,N>::sc_fixed( tp a,                                          \\
                   const sc_fxcast_switch& cast_sw,               \\
                   sc_fxnum_observer* observer_ )                 \\
: sc_fix( a, W, I, Q, O, N, cast_sw, observer_ )                              \\
{}
.fi

.SS "#\fBdefine\fP DEFN_CTORS_T(\fBtp\fP)"
\fBValue:\fP.PP
.nf
template<int W, int I, sc_q_mode Q, sc_o_mode O, int N>                       \\
inline                                                                        \\
sc_fixed_fast<W,I,Q,O,N>::sc_fixed_fast( tp a,                                \\
                     sc_fxnum_fast_observer* observer_ )  \\
: sc_fix_fast( a, W, I, Q, O, N, observer_ )                                  \\
{}                                                                            \\
                                                                              \\
template<int W, int I, sc_q_mode Q, sc_o_mode O, int N>                       \\
inline                                                                        \\
sc_fixed_fast<W,I,Q,O,N>::sc_fixed_fast( tp a,                                \\
                     const sc_fxcast_switch& cast_sw,     \\
                     sc_fxnum_fast_observer* observer_ )  \\
: sc_fix_fast( a, W, I, Q, O, N, cast_sw, observer_ )                         \\
{}
.fi

.SH "Author"
.PP 
Generated automatically by Doxygen for VHDL simulator from the source code\&.
