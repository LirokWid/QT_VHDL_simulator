.TH "sc_dt::sc_ufix_fast" 3 "VHDL simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sc_dt::sc_ufix_fast
.SH SYNOPSIS
.br
.PP
.PP
\fR#include <sc_ufix\&.h>\fP
.PP
Inherits \fBsc_dt::sc_fxnum_fast\fP\&.
.PP
Inherited by \fBsc_dt::sc_ufixed_fast< W, I, Q, O, N >\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBsc_ufix_fast\fP (\fBsc_fxnum_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fBsc_ufix_fast\fP (\fBint\fP, \fBint\fP, \fBsc_fxnum_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fBsc_ufix_fast\fP (\fBsc_q_mode\fP, \fBsc_o_mode\fP, \fBsc_fxnum_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fBsc_ufix_fast\fP (\fBsc_q_mode\fP, \fBsc_o_mode\fP, \fBint\fP, \fBsc_fxnum_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fBsc_ufix_fast\fP (\fBint\fP, \fBint\fP, \fBsc_q_mode\fP, \fBsc_o_mode\fP, \fBsc_fxnum_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fBsc_ufix_fast\fP (\fBint\fP, \fBint\fP, \fBsc_q_mode\fP, \fBsc_o_mode\fP, \fBint\fP, \fBsc_fxnum_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fBsc_ufix_fast\fP (\fBconst\fP \fBsc_fxcast_switch\fP &, \fBsc_fxnum_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fBsc_ufix_fast\fP (\fBint\fP, \fBint\fP, \fBconst\fP \fBsc_fxcast_switch\fP &, \fBsc_fxnum_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fBsc_ufix_fast\fP (\fBsc_q_mode\fP, \fBsc_o_mode\fP, \fBconst\fP \fBsc_fxcast_switch\fP &, \fBsc_fxnum_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fBsc_ufix_fast\fP (\fBsc_q_mode\fP, \fBsc_o_mode\fP, \fBint\fP, \fBconst\fP \fBsc_fxcast_switch\fP &, \fBsc_fxnum_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fBsc_ufix_fast\fP (\fBint\fP, \fBint\fP, \fBsc_q_mode\fP, \fBsc_o_mode\fP, \fBconst\fP \fBsc_fxcast_switch\fP &, \fBsc_fxnum_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fBsc_ufix_fast\fP (\fBint\fP, \fBint\fP, \fBsc_q_mode\fP, \fBsc_o_mode\fP, \fBint\fP, \fBconst\fP \fBsc_fxcast_switch\fP &, \fBsc_fxnum_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fBsc_ufix_fast\fP (\fBconst\fP \fBsc_fxtype_params\fP &, \fBsc_fxnum_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fBsc_ufix_fast\fP (\fBconst\fP \fBsc_fxtype_params\fP &, \fBconst\fP \fBsc_fxcast_switch\fP &, \fBsc_fxnum_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fBsc_ufix_fast\fP (\fBconst\fP \fBsc_ufix_fast\fP &)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_ufix_fast\fP \fBoperator~\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_ufix_fast\fP & \fBoperator=\fP (\fBconst\fP \fBsc_ufix_fast\fP &)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval_fast\fP \fBoperator++\fP (\fBint\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval_fast\fP \fBoperator\-\-\fP (\fBint\fP)"
.br
.ti -1c
.RI "\fBsc_ufix_fast\fP & \fBoperator++\fP ()"
.br
.ti -1c
.RI "\fBsc_ufix_fast\fP & \fBoperator\-\-\fP ()"
.br
.in -1c

Public Member Functions inherited from \fBsc_dt::sc_fxnum_fast\fP
.in +1c
.ti -1c
.RI "\fBconst\fP \fBsc_fxval_fast\fP \fBoperator\-\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval_fast\fP \fBoperator+\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBDECL_BIN_OP_T\fP (/, \fBint64\fP) DECL_BIN_OP_T(/"
.br
.ti -1c
.RI "\fBuint64\fP \fBDECL_BIN_OP_T\fP (/, \fBconst\fP \fBsc_int_base\fP &) DECL_BIN_OP_T(/"
.br
.ti -1c
.RI "\fBuint64\fP \fBconst\fP \fBsc_uint_base\fP & \fBDECL_BIN_OP_T\fP (/, \fBconst\fP \fBsc_signed\fP &) \fBfriend\fP \fBconst\fP \fBsc_fxval_fast\fP \fBoperator\fP<<(\fBconst\fP \fBsc_fxnum_fast\fP &"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval_fast\fP \fBoperator++\fP (\fBint\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval_fast\fP \fBoperator\-\-\fP (\fBint\fP)"
.br
.ti -1c
.RI "\fBsc_fxnum_fast\fP & \fBoperator++\fP ()"
.br
.ti -1c
.RI "\fBsc_fxnum_fast\fP & \fBoperator\-\-\fP ()"
.br
.ti -1c
.RI "\fBsc_fxnum_fast_bitref_r\fP \fBoperator[]\fP (\fBint\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_fxnum_fast_bitref\fP \fBoperator[]\fP (\fBint\fP)"
.br
.ti -1c
.RI "\fBsc_fxnum_fast_bitref_r\fP \fBbit\fP (\fBint\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_fxnum_fast_bitref\fP \fBbit\fP (\fBint\fP)"
.br
.ti -1c
.RI "\fBsc_fxnum_fast_subref_r\fP \fBoperator()\fP (\fBint\fP, \fBint\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_fxnum_fast_subref\fP \fBoperator()\fP (\fBint\fP, \fBint\fP)"
.br
.ti -1c
.RI "\fBsc_fxnum_fast_subref_r\fP \fBrange\fP (\fBint\fP, \fBint\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_fxnum_fast_subref\fP \fBrange\fP (\fBint\fP, \fBint\fP)"
.br
.ti -1c
.RI "\fBsc_fxnum_fast_subref_r\fP \fBoperator()\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_fxnum_fast_subref\fP \fBoperator()\fP ()"
.br
.ti -1c
.RI "\fBsc_fxnum_fast_subref_r\fP \fBrange\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_fxnum_fast_subref\fP \fBrange\fP ()"
.br
.ti -1c
.RI "\fBoperator double\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBshort\fP \fBto_short\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBunsigned\fP \fBshort\fP \fBto_ushort\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBint\fP \fBto_int\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBunsigned\fP \fBint\fP \fBto_uint\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBlong\fP \fBto_long\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBunsigned\fP \fBlong\fP \fBto_ulong\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBint64\fP \fBto_int64\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBuint64\fP \fBto_uint64\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBfloat\fP \fBto_float\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBdouble\fP \fBto_double\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP (\fBsc_numrep\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP (\fBsc_numrep\fP, \fBbool\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP (\fBsc_fmt\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP (\fBsc_numrep\fP, \fBsc_fmt\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP (\fBsc_numrep\fP, \fBbool\fP, \fBsc_fmt\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_dec\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_bin\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_oct\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_hex\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBis_neg\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBis_zero\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBis_normal\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBquantization_flag\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoverflow_flag\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval_fast\fP \fBvalue\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBint\fP \fBwl\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBint\fP \fBiwl\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_q_mode\fP \fBq_mode\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_o_mode\fP \fBo_mode\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBint\fP \fBn_bits\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxtype_params\fP & \fBtype_params\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxcast_switch\fP & \fBcast_switch\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBprint\fP (::std::ostream &=::std::cout) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBscan\fP (::std::istream &=::std::cin)"
.br
.ti -1c
.RI "\fBvoid\fP \fBdump\fP (::std::ostream &=::std::cout) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBobserver_read\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBget_bit\fP (\fBint\fP) \fBconst\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "\fBvoid\fP \fBb_not\fP (\fBsc_ufix_fast\fP &, \fBconst\fP \fBsc_ufix_fast\fP &)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_ufix_fast\fP \fBoperator&\fP (\fBconst\fP \fBsc_ufix_fast\fP &, \fBconst\fP \fBsc_ufix_fast\fP &)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_ufix_fast\fP \fBoperator^\fP (\fBconst\fP \fBsc_ufix_fast\fP &, \fBconst\fP \fBsc_ufix_fast\fP &)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_ufix_fast\fP \fBoperator|\fP (\fBconst\fP \fBsc_ufix_fast\fP &, \fBconst\fP \fBsc_ufix_fast\fP &)"
.br
.ti -1c
.RI "\fBvoid\fP \fBb_and\fP (\fBsc_ufix_fast\fP &, \fBconst\fP \fBsc_ufix_fast\fP &, \fBconst\fP \fBsc_ufix_fast\fP &)"
.br
.ti -1c
.RI "\fBvoid\fP \fBb_or\fP (\fBsc_ufix_fast\fP &, \fBconst\fP \fBsc_ufix_fast\fP &, \fBconst\fP \fBsc_ufix_fast\fP &)"
.br
.ti -1c
.RI "\fBvoid\fP \fBb_xor\fP (\fBsc_ufix_fast\fP &, \fBconst\fP \fBsc_ufix_fast\fP &, \fBconst\fP \fBsc_ufix_fast\fP &)"
.br
.in -1c
.SS "Additional Inherited Members"


Public Attributes inherited from \fBsc_dt::sc_fxnum_fast\fP
.in +1c
.ti -1c
.RI "\fBuint64\fP \fBconst\fP \fBsc_uint_base\fP \fBint\fP"
.br
.in -1c

Protected Member Functions inherited from \fBsc_dt::sc_fxnum_fast\fP
.in +1c
.ti -1c
.RI "\fBsc_fxnum_fast_observer\fP * \fBobserver\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBcast\fP ()"
.br
.ti -1c
.RI "\fBsc_fxnum_fast\fP (\fBconst\fP \fBsc_fxtype_params\fP &, \fBsc_enc\fP, \fBconst\fP \fBsc_fxcast_switch\fP &, \fBsc_fxnum_fast_observer\fP *)"
.br
.ti -1c
.RI "\fB~sc_fxnum_fast\fP ()"
.br
.ti -1c
.RI "\fBdouble\fP \fBget_val\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBset_bit\fP (\fBint\fP, \fBbool\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBget_slice\fP (\fBint\fP, \fBint\fP, \fBsc_bv_base\fP &) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBset_slice\fP (\fBint\fP, \fBint\fP, \fBconst\fP \fBsc_bv_base\fP &)"
.br
.ti -1c
.RI "\fBsc_fxnum_fast_observer\fP * \fBlock_observer\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBunlock_observer\fP (\fBsc_fxnum_fast_observer\fP *) \fBconst\fP"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "sc_dt::sc_ufix_fast::sc_ufix_fast (\fBsc_fxnum_fast_observer\fP * observer_ = \fR0\fP)\fR [inline]\fP, \fR [explicit]\fP"

.SS "sc_dt::sc_ufix_fast::sc_ufix_fast (\fBint\fP wl_, \fBint\fP iwl_, \fBsc_fxnum_fast_observer\fP * observer_ = \fR0\fP)\fR [inline]\fP"

.SS "sc_dt::sc_ufix_fast::sc_ufix_fast (\fBsc_q_mode\fP qm, \fBsc_o_mode\fP om, \fBsc_fxnum_fast_observer\fP * observer_ = \fR0\fP)\fR [inline]\fP"

.SS "sc_dt::sc_ufix_fast::sc_ufix_fast (\fBsc_q_mode\fP qm, \fBsc_o_mode\fP om, \fBint\fP nb, \fBsc_fxnum_fast_observer\fP * observer_ = \fR0\fP)\fR [inline]\fP"

.SS "sc_dt::sc_ufix_fast::sc_ufix_fast (\fBint\fP wl_, \fBint\fP iwl_, \fBsc_q_mode\fP qm, \fBsc_o_mode\fP om, \fBsc_fxnum_fast_observer\fP * observer_ = \fR0\fP)\fR [inline]\fP"

.SS "sc_dt::sc_ufix_fast::sc_ufix_fast (\fBint\fP wl_, \fBint\fP iwl_, \fBsc_q_mode\fP qm, \fBsc_o_mode\fP om, \fBint\fP nb, \fBsc_fxnum_fast_observer\fP * observer_ = \fR0\fP)\fR [inline]\fP"

.SS "sc_dt::sc_ufix_fast::sc_ufix_fast (\fBconst\fP \fBsc_fxcast_switch\fP & cast_sw, \fBsc_fxnum_fast_observer\fP * observer_ = \fR0\fP)\fR [inline]\fP, \fR [explicit]\fP"

.SS "sc_dt::sc_ufix_fast::sc_ufix_fast (\fBint\fP wl_, \fBint\fP iwl_, \fBconst\fP \fBsc_fxcast_switch\fP & cast_sw, \fBsc_fxnum_fast_observer\fP * observer_ = \fR0\fP)\fR [inline]\fP"

.SS "sc_dt::sc_ufix_fast::sc_ufix_fast (\fBsc_q_mode\fP qm, \fBsc_o_mode\fP om, \fBconst\fP \fBsc_fxcast_switch\fP & cast_sw, \fBsc_fxnum_fast_observer\fP * observer_ = \fR0\fP)\fR [inline]\fP"

.SS "sc_dt::sc_ufix_fast::sc_ufix_fast (\fBsc_q_mode\fP qm, \fBsc_o_mode\fP om, \fBint\fP nb, \fBconst\fP \fBsc_fxcast_switch\fP & cast_sw, \fBsc_fxnum_fast_observer\fP * observer_ = \fR0\fP)\fR [inline]\fP"

.SS "sc_dt::sc_ufix_fast::sc_ufix_fast (\fBint\fP wl_, \fBint\fP iwl_, \fBsc_q_mode\fP qm, \fBsc_o_mode\fP om, \fBconst\fP \fBsc_fxcast_switch\fP & cast_sw, \fBsc_fxnum_fast_observer\fP * observer_ = \fR0\fP)\fR [inline]\fP"

.SS "sc_dt::sc_ufix_fast::sc_ufix_fast (\fBint\fP wl_, \fBint\fP iwl_, \fBsc_q_mode\fP qm, \fBsc_o_mode\fP om, \fBint\fP nb, \fBconst\fP \fBsc_fxcast_switch\fP & cast_sw, \fBsc_fxnum_fast_observer\fP * observer_ = \fR0\fP)\fR [inline]\fP"

.SS "sc_dt::sc_ufix_fast::sc_ufix_fast (\fBconst\fP \fBsc_fxtype_params\fP & type_params_, \fBsc_fxnum_fast_observer\fP * observer_ = \fR0\fP)\fR [inline]\fP, \fR [explicit]\fP"

.SS "sc_dt::sc_ufix_fast::sc_ufix_fast (\fBconst\fP \fBsc_fxtype_params\fP & type_params_, \fBconst\fP \fBsc_fxcast_switch\fP & cast_sw, \fBsc_fxnum_fast_observer\fP * observer_ = \fR0\fP)\fR [inline]\fP"

.SS "sc_dt::sc_ufix_fast::sc_ufix_fast (\fBconst\fP \fBsc_ufix_fast\fP & a)\fR [inline]\fP"

.SH "Member Function Documentation"
.PP 
.SS "\fBsc_ufix_fast\fP & sc_dt::sc_ufix_fast::operator++ ()\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_fxval_fast\fP sc_dt::sc_ufix_fast::operator++ (\fBint\fP)\fR [inline]\fP"

.SS "\fBsc_ufix_fast\fP & sc_dt::sc_ufix_fast::operator\-\- ()\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_fxval_fast\fP sc_dt::sc_ufix_fast::operator\-\- (\fBint\fP)\fR [inline]\fP"

.SS "\fBsc_ufix_fast\fP & sc_dt::sc_ufix_fast::operator= (\fBconst\fP \fBsc_ufix_fast\fP & a)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_ufix_fast\fP sc_dt::sc_ufix_fast::operator~ () const\fR [inline]\fP"

.SH "Friends And Related Symbol Documentation"
.PP 
.SS "\fBvoid\fP b_and (\fBsc_ufix_fast\fP &, \fBconst\fP \fBsc_ufix_fast\fP &, \fBconst\fP \fBsc_ufix_fast\fP &)\fR [friend]\fP"

.SS "\fBvoid\fP b_not (\fBsc_ufix_fast\fP & c, \fBconst\fP \fBsc_ufix_fast\fP & a)\fR [friend]\fP"

.SS "\fBvoid\fP b_or (\fBsc_ufix_fast\fP &, \fBconst\fP \fBsc_ufix_fast\fP &, \fBconst\fP \fBsc_ufix_fast\fP &)\fR [friend]\fP"

.SS "\fBvoid\fP b_xor (\fBsc_ufix_fast\fP &, \fBconst\fP \fBsc_ufix_fast\fP &, \fBconst\fP \fBsc_ufix_fast\fP &)\fR [friend]\fP"

.SS "\fBconst\fP \fBsc_ufix_fast\fP \fBoperator\fP& (\fBconst\fP \fBsc_ufix_fast\fP &, \fBconst\fP \fBsc_ufix_fast\fP &)\fR [friend]\fP"

.SS "\fBconst\fP \fBsc_ufix_fast\fP \fBoperator\fP^ (\fBconst\fP \fBsc_ufix_fast\fP &, \fBconst\fP \fBsc_ufix_fast\fP &)\fR [friend]\fP"

.SS "\fBconst\fP \fBsc_ufix_fast\fP \fBoperator\fP| (\fBconst\fP \fBsc_ufix_fast\fP &, \fBconst\fP \fBsc_ufix_fast\fP &)\fR [friend]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for VHDL simulator from the source code\&.
