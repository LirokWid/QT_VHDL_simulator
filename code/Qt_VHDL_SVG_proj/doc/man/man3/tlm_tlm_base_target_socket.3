.TH "tlm::tlm_base_target_socket< BUSWIDTH, FW_IF, BW_IF, N, POL >" 3 "VHDL simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
tlm::tlm_base_target_socket< BUSWIDTH, FW_IF, BW_IF, N, POL >
.SH SYNOPSIS
.br
.PP
.PP
\fR#include <tlm_target_socket\&.h>\fP
.PP
Inherits \fBtlm::tlm_base_socket_if\fP, \fBtlm::tlm_base_target_socket_b< BUSWIDTH, FW_IF, BW_IF >\fP, and \fBsc_core::sc_export< IF >\fP\&.
.PP
Inherited by \fBtlm::tlm_target_socket< BUSWIDTH, tlm::tlm_base_protocol_types, N, POL >\fP, \fBtlm::tlm_target_socket< 32, tlm::tlm_base_protocol_types, 0, sc_core::SC_ONE_OR_MORE_BOUND >\fP, \fBtlm::tlm_target_socket< BUSWIDTH, tlm::tlm_base_protocol_types, 1, sc_core::SC_ONE_OR_MORE_BOUND >\fP, \fBtlm::tlm_target_socket< BUSWIDTH, tlm::tlm_base_protocol_types, 1, POL >\fP, and \fBtlm::tlm_target_socket< BUSWIDTH, TYPES, N, POL >\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBFW_IF\fP \fBfw_interface_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBBW_IF\fP \fBbw_interface_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBsc_core::sc_port\fP< \fBbw_interface_type\fP, \fBN\fP, \fBPOL\fP > \fBport_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBsc_core::sc_export\fP< \fBfw_interface_type\fP > \fBexport_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBtlm_base_initiator_socket_b\fP< \fBBUSWIDTH\fP, \fBfw_interface_type\fP, \fBbw_interface_type\fP > \fBbase_initiator_socket_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBtlm_base_target_socket_b\fP< \fBBUSWIDTH\fP, \fBfw_interface_type\fP, \fBbw_interface_type\fP > \fBbase_type\fP"
.br
.in -1c

Public Types inherited from \fBsc_core::sc_export_base\fP
.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBsc_export_base\fP \fBthis_type\fP"
.br
.in -1c

Public Types inherited from \fBsc_core::sc_object\fP
.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBunsigned\fP \fBphase_cb_mask\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBtlm_base_target_socket\fP ()"
.br
.ti -1c
.RI "\fBtlm_base_target_socket\fP (\fBconst\fP \fBchar\fP *\fBname\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP \fBchar\fP * \fBkind\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBbind\fP (\fBbase_initiator_socket_type\fP &s)"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator()\fP (\fBbase_initiator_socket_type\fP &s)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBbind\fP (\fBbase_type\fP &s)"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator()\fP (\fBbase_type\fP &s)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBbind\fP (\fBfw_interface_type\fP &\fBifs\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator()\fP (\fBfw_interface_type\fP &s)"
.br
.ti -1c
.RI "int \fBsize\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbw_interface_type\fP * \fBoperator\->\fP ()"
.br
.ti -1c
.RI "\fBbw_interface_type\fP * \fBoperator[]\fP (int \fBi\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_core::sc_port_base\fP & \fBget_port_base\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_core::sc_port_base\fP \fBconst\fP & \fBget_port_base\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_core::sc_export_base\fP & \fBget_export_base\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_core::sc_export_base\fP \fBconst\fP & \fBget_export_base\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBunsigned\fP int \fBget_bus_width\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBtlm_socket_category\fP \fBget_socket_category\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_core::sc_port_b\fP< \fBBW_IF\fP > & \fBget_base_port\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_core::sc_port_b\fP< \fBBW_IF\fP > \fBconst\fP & \fBget_base_port\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBFW_IF\fP & \fBget_base_interface\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBFW_IF\fP \fBconst\fP & \fBget_base_interface\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_core::sc_export\fP< \fBFW_IF\fP > & \fBget_base_export\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_core::sc_export\fP< \fBFW_IF\fP > \fBconst\fP & \fBget_base_export\fP () \fBconst\fP"
.br
.in -1c

Public Member Functions inherited from \fBtlm::tlm_base_socket_if\fP
.in +1c
.ti -1c
.RI "\fBvirtual\fP \fBsc_core::sc_type_index\fP \fBget_protocol_types\fP () \fBconst\fP =0"
.br
.in -1c

Public Member Functions inherited from \fBtlm::tlm_base_target_socket_b< BUSWIDTH, FW_IF, BW_IF >\fP
.in +1c
.ti -1c
.RI "\fBvirtual\fP \fB~tlm_base_target_socket_b\fP ()"
.br
.in -1c

Public Member Functions inherited from \fBsc_core::sc_export< IF >\fP
.in +1c
.ti -1c
.RI "\fBsc_export\fP ()"
.br
.ti -1c
.RI "\fBsc_export\fP (\fBconst\fP \fBchar\fP *\fBname_\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fB~sc_export\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_interface\fP * \fBget_interface\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP \fBsc_interface\fP * \fBget_interface\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBIF\fP * \fBoperator\->\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBIF\fP * \fBoperator\->\fP ()"
.br
.ti -1c
.RI "\fBoperator IF &\fP ()"
.br
.ti -1c
.RI "\fBoperator const IF &\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBSC_VIRTUAL_\fP \fBvoid\fP \fBbind\fP (\fBIF\fP &\fBinterface_\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator()\fP (\fBIF\fP &\fBinterface_\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_type_index\fP \fBget_interface_type\fP () \fBconst\fP"
.br
.in -1c

Public Member Functions inherited from \fBsc_core::sc_object\fP
.in +1c
.ti -1c
.RI "\fBconst\fP \fBchar\fP * \fBname\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBchar\fP * \fBbasename\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBprint\fP (::std::ostream &\fBos\fP=::std::cout) \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBdump\fP (::std::ostream &\fBos\fP=::std::cout) \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBtrace\fP (\fBsc_trace_file\fP *tf) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_simcontext\fP * \fBsimcontext\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBadd_attribute\fP (\fBsc_attr_base\fP &)"
.br
.ti -1c
.RI "\fBsc_attr_base\fP * \fBget_attribute\fP (\fBconst\fP std::string &\fBname_\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_attr_base\fP * \fBget_attribute\fP (\fBconst\fP std::string &\fBname_\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_attr_base\fP * \fBremove_attribute\fP (\fBconst\fP std::string &\fBname_\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBremove_all_attributes\fP ()"
.br
.ti -1c
.RI "int \fBnum_attributes\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_attr_cltn\fP & \fBattr_cltn\fP ()"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_attr_cltn\fP & \fBattr_cltn\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP std::vector< \fBsc_event\fP * > & \fBget_child_events\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP std::vector< \fBsc_object\fP * > & \fBget_child_objects\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_object\fP * \fBget_parent\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_object\fP * \fBget_parent_object\fP () \fBconst\fP"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBport_type\fP \fBm_port\fP"
.br
.in -1c

Protected Attributes inherited from \fBsc_core::sc_export< IF >\fP
.in +1c
.ti -1c
.RI "\fBIF\fP * \fBm_interface_p\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "template<\fBunsigned\fP int , \fBtypename\fP , \fBtypename\fP , int , \fBsc_core::sc_port_policy\fP > \fBclass\fP \fBtlm_base_initiator_socket\fP"
.br
.in -1c
.SS "Additional Inherited Members"


Protected Member Functions inherited from \fBtlm::tlm_base_socket_if\fP
.in +1c
.ti -1c
.RI "\fBvirtual\fP \fB~tlm_base_socket_if\fP ()"
.br
.in -1c

Protected Member Functions inherited from \fBsc_core::sc_export_base\fP
.in +1c
.ti -1c
.RI "\fBsc_export_base\fP ()"
.br
.ti -1c
.RI "\fBsc_export_base\fP (\fBconst\fP \fBchar\fP *\fBname\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fB~sc_export_base\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBbefore_end_of_elaboration\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBend_of_elaboration\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBstart_of_simulation\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBend_of_simulation\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBreport_error\fP (\fBconst\fP \fBchar\fP *id, \fBconst\fP \fBchar\fP *\fBadd_msg\fP=0) \fBconst\fP"
.br
.in -1c

Protected Member Functions inherited from \fBsc_core::sc_object\fP
.in +1c
.ti -1c
.RI "\fBsc_object\fP ()"
.br
.ti -1c
.RI "\fBsc_object\fP (\fBconst\fP \fBchar\fP *\fBnm\fP)"
.br
.ti -1c
.RI "\fBsc_object\fP (\fBconst\fP \fBsc_object\fP &)"
.br
.ti -1c
.RI "\fBsc_object\fP & \fBoperator=\fP (\fBconst\fP \fBsc_object\fP &)"
.br
.ti -1c
.RI "\fBvirtual\fP \fB~sc_object\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBadd_child_event\fP (\fBsc_event\fP *\fBevent_p\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBadd_child_object\fP (\fBsc_object\fP *\fBobject_p\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBbool\fP \fBremove_child_event\fP (\fBsc_event\fP *\fBevent_p\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBbool\fP \fBremove_child_object\fP (\fBsc_object\fP *\fBobject_p\fP)"
.br
.ti -1c
.RI "\fBphase_cb_mask\fP \fBregister_simulation_phase_callback\fP (\fBphase_cb_mask\fP)"
.br
.ti -1c
.RI "\fBphase_cb_mask\fP \fBunregister_simulation_phase_callback\fP (\fBphase_cb_mask\fP)"
.br
.in -1c
.SH "Member Typedef Documentation"
.PP 
.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBtypedef\fP \fBtlm_base_initiator_socket_b\fP<\fBBUSWIDTH\fP, \fBfw_interface_type\fP, \fBbw_interface_type\fP> \fBtlm::tlm_base_target_socket\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP, \fBN\fP, \fBPOL\fP >::base_initiator_socket_type"

.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBtypedef\fP \fBtlm_base_target_socket_b\fP<\fBBUSWIDTH\fP, \fBfw_interface_type\fP, \fBbw_interface_type\fP> \fBtlm::tlm_base_target_socket\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP, \fBN\fP, \fBPOL\fP >::base_type"

.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBtypedef\fP \fBBW_IF\fP \fBtlm::tlm_base_target_socket\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP, \fBN\fP, \fBPOL\fP >::bw_interface_type"

.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBtypedef\fP \fBsc_core::sc_export\fP<\fBfw_interface_type\fP> \fBtlm::tlm_base_target_socket\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP, \fBN\fP, \fBPOL\fP >::export_type"

.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBtypedef\fP \fBFW_IF\fP \fBtlm::tlm_base_target_socket\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP, \fBN\fP, \fBPOL\fP >::fw_interface_type"

.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBtypedef\fP \fBsc_core::sc_port\fP<\fBbw_interface_type\fP, \fBN\fP , \fBPOL\fP> \fBtlm::tlm_base_target_socket\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP, \fBN\fP, \fBPOL\fP >::port_type"

.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBtlm::tlm_base_target_socket\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP, \fBN\fP, \fBPOL\fP >::tlm_base_target_socket ()\fR [inline]\fP"

.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBtlm::tlm_base_target_socket\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP, \fBN\fP, \fBPOL\fP >::tlm_base_target_socket (\fBconst\fP \fBchar\fP * name)\fR [inline]\fP, \fR [explicit]\fP"

.SH "Member Function Documentation"
.PP 
.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvirtual\fP \fBvoid\fP \fBtlm::tlm_base_target_socket\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP, \fBN\fP, \fBPOL\fP >::bind (\fBbase_initiator_socket_type\fP & s)\fR [inline]\fP, \fR [virtual]\fP"

.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvirtual\fP \fBvoid\fP \fBtlm::tlm_base_target_socket\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP, \fBN\fP, \fBPOL\fP >::bind (\fBbase_type\fP & s)\fR [inline]\fP, \fR [virtual]\fP"

.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvirtual\fP \fBvoid\fP \fBtlm::tlm_base_target_socket\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP, \fBN\fP, \fBPOL\fP >::bind (\fBfw_interface_type\fP & ifs)\fR [inline]\fP, \fR [virtual]\fP"

.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvirtual\fP \fBsc_core::sc_export\fP< \fBFW_IF\fP > & \fBtlm::tlm_base_target_socket\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP, \fBN\fP, \fBPOL\fP >::get_base_export ()\fR [inline]\fP, \fR [virtual]\fP"

.PP
Implements \fBtlm::tlm_base_target_socket_b< BUSWIDTH, FW_IF, BW_IF >\fP\&.
.PP
Reimplemented in \fBtlm_utils::multi_passthrough_target_socket< MODULE, BUSWIDTH, TYPES, N, POL >\fP, and \fBtlm_utils::multi_passthrough_target_socket< MODULE, 32, tlm::tlm_base_protocol_types, 0, sc_core::SC_ZERO_OR_MORE_BOUND >\fP\&.
.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvirtual\fP \fBsc_core::sc_export\fP< \fBFW_IF\fP > \fBconst\fP  & \fBtlm::tlm_base_target_socket\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP, \fBN\fP, \fBPOL\fP >::get_base_export () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Reimplemented in \fBtlm_utils::multi_passthrough_target_socket< MODULE, BUSWIDTH, TYPES, N, POL >\fP, and \fBtlm_utils::multi_passthrough_target_socket< MODULE, 32, tlm::tlm_base_protocol_types, 0, sc_core::SC_ZERO_OR_MORE_BOUND >\fP\&.
.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvirtual\fP \fBFW_IF\fP & \fBtlm::tlm_base_target_socket\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP, \fBN\fP, \fBPOL\fP >::get_base_interface ()\fR [inline]\fP, \fR [virtual]\fP"

.PP
Implements \fBtlm::tlm_base_target_socket_b< BUSWIDTH, FW_IF, BW_IF >\fP\&.
.PP
Reimplemented in \fBtlm_utils::multi_passthrough_target_socket< MODULE, BUSWIDTH, TYPES, N, POL >\fP, and \fBtlm_utils::multi_passthrough_target_socket< MODULE, 32, tlm::tlm_base_protocol_types, 0, sc_core::SC_ZERO_OR_MORE_BOUND >\fP\&.
.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvirtual\fP \fBFW_IF\fP \fBconst\fP  & \fBtlm::tlm_base_target_socket\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP, \fBN\fP, \fBPOL\fP >::get_base_interface () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Reimplemented in \fBtlm_utils::multi_passthrough_target_socket< MODULE, BUSWIDTH, TYPES, N, POL >\fP, and \fBtlm_utils::multi_passthrough_target_socket< MODULE, 32, tlm::tlm_base_protocol_types, 0, sc_core::SC_ZERO_OR_MORE_BOUND >\fP\&.
.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvirtual\fP \fBsc_core::sc_port_b\fP< \fBBW_IF\fP > & \fBtlm::tlm_base_target_socket\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP, \fBN\fP, \fBPOL\fP >::get_base_port ()\fR [inline]\fP, \fR [virtual]\fP"

.PP
Implements \fBtlm::tlm_base_target_socket_b< BUSWIDTH, FW_IF, BW_IF >\fP\&.
.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvirtual\fP \fBsc_core::sc_port_b\fP< \fBBW_IF\fP > \fBconst\fP  & \fBtlm::tlm_base_target_socket\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP, \fBN\fP, \fBPOL\fP >::get_base_port () const\fR [inline]\fP, \fR [virtual]\fP"

.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvirtual\fP \fBunsigned\fP int \fBtlm::tlm_base_target_socket\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP, \fBN\fP, \fBPOL\fP >::get_bus_width () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Implements \fBtlm::tlm_base_socket_if\fP\&.
.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvirtual\fP \fBsc_core::sc_export_base\fP & \fBtlm::tlm_base_target_socket\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP, \fBN\fP, \fBPOL\fP >::get_export_base ()\fR [inline]\fP, \fR [virtual]\fP"

.PP
Implements \fBtlm::tlm_base_socket_if\fP\&.
.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvirtual\fP \fBsc_core::sc_export_base\fP \fBconst\fP  & \fBtlm::tlm_base_target_socket\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP, \fBN\fP, \fBPOL\fP >::get_export_base () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Implements \fBtlm::tlm_base_socket_if\fP\&.
.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvirtual\fP \fBsc_core::sc_port_base\fP & \fBtlm::tlm_base_target_socket\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP, \fBN\fP, \fBPOL\fP >::get_port_base ()\fR [inline]\fP, \fR [virtual]\fP"

.PP
Implements \fBtlm::tlm_base_socket_if\fP\&.
.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvirtual\fP \fBsc_core::sc_port_base\fP \fBconst\fP  & \fBtlm::tlm_base_target_socket\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP, \fBN\fP, \fBPOL\fP >::get_port_base () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Implements \fBtlm::tlm_base_socket_if\fP\&.
.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvirtual\fP \fBtlm_socket_category\fP \fBtlm::tlm_base_target_socket\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP, \fBN\fP, \fBPOL\fP >::get_socket_category () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Implements \fBtlm::tlm_base_socket_if\fP\&.
.PP
Reimplemented in \fBtlm_utils::multi_target_base< BUSWIDTH, TYPES, N, POL >\fP, \fBtlm_utils::multi_target_base< 32, tlm::tlm_base_protocol_types, 0, sc_core::SC_ONE_OR_MORE_BOUND >\fP, and \fBtlm_utils::multi_target_base< BUSWIDTH, tlm::tlm_base_protocol_types, N, POL >\fP\&.
.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvirtual\fP \fBconst\fP \fBchar\fP * \fBtlm::tlm_base_target_socket\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP, \fBN\fP, \fBPOL\fP >::kind () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Reimplemented from \fBsc_core::sc_export< IF >\fP\&.
.PP
Reimplemented in \fBtlm::tlm_target_socket< BUSWIDTH, TYPES, N, POL >\fP, \fBtlm::tlm_target_socket< 32, tlm::tlm_base_protocol_types, 0, sc_core::SC_ONE_OR_MORE_BOUND >\fP, \fBtlm::tlm_target_socket< BUSWIDTH, tlm::tlm_base_protocol_types, 1, POL >\fP, \fBtlm::tlm_target_socket< BUSWIDTH, tlm::tlm_base_protocol_types, 1, sc_core::SC_ONE_OR_MORE_BOUND >\fP, \fBtlm::tlm_target_socket< BUSWIDTH, tlm::tlm_base_protocol_types, N, POL >\fP, and \fBtlm::tlm_target_socket< BUSWIDTH, TYPES, 1, sc_core::SC_ONE_OR_MORE_BOUND >\fP\&.
.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvoid\fP \fBtlm::tlm_base_target_socket\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP, \fBN\fP, \fBPOL\fP >\fB::operator\fP() (\fBbase_initiator_socket_type\fP & s)\fR [inline]\fP"

.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvoid\fP \fBtlm::tlm_base_target_socket\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP, \fBN\fP, \fBPOL\fP >\fB::operator\fP() (\fBbase_type\fP & s)\fR [inline]\fP"

.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBvoid\fP \fBtlm::tlm_base_target_socket\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP, \fBN\fP, \fBPOL\fP >\fB::operator\fP() (\fBfw_interface_type\fP & s)\fR [inline]\fP"

.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBbw_interface_type\fP * \fBtlm::tlm_base_target_socket\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP, \fBN\fP, \fBPOL\fP >\fB::operator\fP\-> ()\fR [inline]\fP"

.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBbw_interface_type\fP * \fBtlm::tlm_base_target_socket\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP, \fBN\fP, \fBPOL\fP >\fB::operator\fP[] (int i)\fR [inline]\fP"

.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> int \fBtlm::tlm_base_target_socket\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP, \fBN\fP, \fBPOL\fP >::size () const\fR [inline]\fP"

.SH "Friends And Related Symbol Documentation"
.PP 
.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> template<\fBunsigned\fP int , \fBtypename\fP , \fBtypename\fP , int , \fBsc_core::sc_port_policy\fP > \fBfriend\fP \fBclass\fP \fBtlm_base_initiator_socket\fP\fR [friend]\fP"

.SH "Member Data Documentation"
.PP 
.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>, int N = 1, \fBsc_core::sc_port_policy\fP POL = sc_core::SC_ONE_OR_MORE_BOUND> \fBport_type\fP \fBtlm::tlm_base_target_socket\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP, \fBN\fP, \fBPOL\fP >::m_port\fR [protected]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for VHDL simulator from the source code\&.
