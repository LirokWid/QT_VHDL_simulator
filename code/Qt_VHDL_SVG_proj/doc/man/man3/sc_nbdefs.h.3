.TH "C:/Users/BJRODIER/Documents/QT_REPO/QT_VHDL_simulator/code/Ressources/SystemC/include/sysc/datatypes/int/sc_nbdefs.h" 3 "VHDL simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/BJRODIER/Documents/QT_REPO/QT_VHDL_simulator/code/Ressources/SystemC/include/sysc/datatypes/int/sc_nbdefs.h
.SH SYNOPSIS
.br
.PP
\fR#include 'sysc/kernel/sc_cmnhdr\&.h'\fP
.br
\fR#include <climits>\fP
.br
\fR#include <stdint\&.h>\fP
.br
\fR#include 'sysc/kernel/sc_constants\&.h'\fP
.br

.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBsc_dt\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#\fBdefine\fP \fBSC_DT_MIXED_COMMA_OPERATORS\fP"
.br
.ti -1c
.RI "#\fBdefine\fP \fBSC_NEG\fP   \-1"
.br
.ti -1c
.RI "#\fBdefine\fP \fBSC_ZERO\fP   0"
.br
.ti -1c
.RI "#\fBdefine\fP \fBSC_POS\fP   1"
.br
.ti -1c
.RI "#\fBdefine\fP \fBSC_NOSIGN\fP   2"
.br
.ti -1c
.RI "#\fBdefine\fP \fBBITS_PER_BYTE\fP   8"
.br
.ti -1c
.RI "#\fBdefine\fP \fBBYTE_RADIX\fP   256"
.br
.ti -1c
.RI "#\fBdefine\fP \fBBYTE_MASK\fP   255"
.br
.ti -1c
.RI "#\fBdefine\fP \fBLOG2_BITS_PER_BYTE\fP   3"
.br
.ti -1c
.RI "#\fBdefine\fP \fBBYTES_PER_DIGIT_TYPE\fP   4"
.br
.ti -1c
.RI "#\fBdefine\fP \fBBITS_PER_DIGIT_TYPE\fP   32"
.br
.ti -1c
.RI "#\fBdefine\fP \fBBYTES_PER_DIGIT\fP   4"
.br
.ti -1c
.RI "#\fBdefine\fP \fBBITS_PER_DIGIT\fP   30"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDIGIT_RADIX\fP   (1\fBul\fP << \fBBITS_PER_DIGIT\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDIGIT_MASK\fP   (\fBDIGIT_RADIX\fP \- 1)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBBITS_PER_HALF_DIGIT\fP   (\fBBITS_PER_DIGIT\fP / 2)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBHALF_DIGIT_RADIX\fP   (1\fBul\fP << \fBBITS_PER_HALF_DIGIT\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBHALF_DIGIT_MASK\fP   (\fBHALF_DIGIT_RADIX\fP \- 1)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDIV_CEIL2\fP(\fBx\fP,  y)   (((\fBx\fP) \- 1) / (y) + 1)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDIV_CEIL\fP(\fBx\fP)   \fBDIV_CEIL2\fP(\fBx\fP, \fBBITS_PER_DIGIT\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBBITS_PER_CHAR\fP   8"
.br
.ti -1c
.RI "#\fBdefine\fP \fBBITS_PER_INT\fP   (\fBsizeof\fP(int) * \fBBITS_PER_CHAR\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBBITS_PER_LONG\fP   (\fBsizeof\fP(\fBlong\fP) * \fBBITS_PER_CHAR\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBBITS_PER_INT64\fP   (\fBsizeof\fP(\fB::sc_dt::int64\fP) * \fBBITS_PER_CHAR\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBBITS_PER_UINT\fP   (\fBsizeof\fP(\fBunsigned\fP int) * \fBBITS_PER_CHAR\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBBITS_PER_ULONG\fP   (\fBsizeof\fP(\fBunsigned\fP \fBlong\fP) * \fBBITS_PER_CHAR\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBBITS_PER_UINT64\fP   (\fBsizeof\fP(\fB::sc_dt::uint64\fP) * \fBBITS_PER_CHAR\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDIGITS_PER_CHAR\fP   1"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDIGITS_PER_INT\fP   ((\fBBITS_PER_INT\fP+29)/30)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDIGITS_PER_LONG\fP   ((\fBBITS_PER_LONG\fP+29)/30)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDIGITS_PER_INT64\fP   ((\fBBITS_PER_INT64\fP+29)/30)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDIGITS_PER_UINT\fP   ((\fBBITS_PER_UINT\fP+29)/30)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDIGITS_PER_ULONG\fP   ((\fBBITS_PER_ULONG\fP+29)/30)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDIGITS_PER_UINT64\fP   ((\fBBITS_PER_UINT64\fP+29)/30)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBSC_INTWIDTH\fP   64"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBunsigned\fP \fBchar\fP \fBsc_dt::uchar\fP"
.br
.ti -1c
.RI "\fBtypedef\fP int \fBsc_dt::small_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBunsigned\fP int \fBsc_dt::sc_digit\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBint64_t\fP \fBsc_dt::int64\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBuint64_t\fP \fBsc_dt::uint64\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBint64\fP \fBsc_dt::int_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBuint64\fP \fBsc_dt::uint_type\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBsc_dt::sc_numrep\fP { \fBsc_dt::SC_NOBASE\fP = 0, \fBsc_dt::SC_BIN\fP = 2, \fBsc_dt::SC_OCT\fP = 8, \fBsc_dt::SC_DEC\fP = 10, \fBsc_dt::SC_HEX\fP = 16, \fBsc_dt::SC_BIN_US\fP, \fBsc_dt::SC_BIN_SM\fP, \fBsc_dt::SC_OCT_US\fP, \fBsc_dt::SC_OCT_SM\fP, \fBsc_dt::SC_HEX_US\fP, \fBsc_dt::SC_HEX_SM\fP, \fBsc_dt::SC_CSD\fP }"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#\fBdefine\fP BITS_PER_BYTE   8"

.SS "#\fBdefine\fP BITS_PER_CHAR   8"

.SS "#\fBdefine\fP BITS_PER_DIGIT   30"

.SS "#\fBdefine\fP BITS_PER_DIGIT_TYPE   32"

.SS "#\fBdefine\fP BITS_PER_HALF_DIGIT   (\fBBITS_PER_DIGIT\fP / 2)"

.SS "#\fBdefine\fP BITS_PER_INT   (\fBsizeof\fP(int) * \fBBITS_PER_CHAR\fP)"

.SS "#\fBdefine\fP BITS_PER_INT64   (\fBsizeof\fP(\fB::sc_dt::int64\fP) * \fBBITS_PER_CHAR\fP)"

.SS "#\fBdefine\fP BITS_PER_LONG   (\fBsizeof\fP(\fBlong\fP) * \fBBITS_PER_CHAR\fP)"

.SS "#\fBdefine\fP BITS_PER_UINT   (\fBsizeof\fP(\fBunsigned\fP int) * \fBBITS_PER_CHAR\fP)"

.SS "#\fBdefine\fP BITS_PER_UINT64   (\fBsizeof\fP(\fB::sc_dt::uint64\fP) * \fBBITS_PER_CHAR\fP)"

.SS "#\fBdefine\fP BITS_PER_ULONG   (\fBsizeof\fP(\fBunsigned\fP \fBlong\fP) * \fBBITS_PER_CHAR\fP)"

.SS "#\fBdefine\fP BYTE_MASK   255"

.SS "#\fBdefine\fP BYTE_RADIX   256"

.SS "#\fBdefine\fP BYTES_PER_DIGIT   4"

.SS "#\fBdefine\fP BYTES_PER_DIGIT_TYPE   4"

.SS "#\fBdefine\fP DIGIT_MASK   (\fBDIGIT_RADIX\fP \- 1)"

.SS "#\fBdefine\fP DIGIT_RADIX   (1\fBul\fP << \fBBITS_PER_DIGIT\fP)"

.SS "#\fBdefine\fP DIGITS_PER_CHAR   1"

.SS "#\fBdefine\fP DIGITS_PER_INT   ((\fBBITS_PER_INT\fP+29)/30)"

.SS "#\fBdefine\fP DIGITS_PER_INT64   ((\fBBITS_PER_INT64\fP+29)/30)"

.SS "#\fBdefine\fP DIGITS_PER_LONG   ((\fBBITS_PER_LONG\fP+29)/30)"

.SS "#\fBdefine\fP DIGITS_PER_UINT   ((\fBBITS_PER_UINT\fP+29)/30)"

.SS "#\fBdefine\fP DIGITS_PER_UINT64   ((\fBBITS_PER_UINT64\fP+29)/30)"

.SS "#\fBdefine\fP DIGITS_PER_ULONG   ((\fBBITS_PER_ULONG\fP+29)/30)"

.SS "#\fBdefine\fP DIV_CEIL(\fBx\fP)   \fBDIV_CEIL2\fP(\fBx\fP, \fBBITS_PER_DIGIT\fP)"

.SS "#\fBdefine\fP DIV_CEIL2(\fBx\fP, y)   (((\fBx\fP) \- 1) / (y) + 1)"

.SS "#\fBdefine\fP HALF_DIGIT_MASK   (\fBHALF_DIGIT_RADIX\fP \- 1)"

.SS "#\fBdefine\fP HALF_DIGIT_RADIX   (1\fBul\fP << \fBBITS_PER_HALF_DIGIT\fP)"

.SS "#\fBdefine\fP LOG2_BITS_PER_BYTE   3"

.SS "#\fBdefine\fP SC_DT_MIXED_COMMA_OPERATORS"

.SS "#\fBdefine\fP SC_INTWIDTH   64"

.SS "#\fBdefine\fP SC_NEG   \-1"

.SS "#\fBdefine\fP SC_NOSIGN   2"

.SS "#\fBdefine\fP SC_POS   1"

.SS "#\fBdefine\fP SC_ZERO   0"

.SH "Author"
.PP 
Generated automatically by Doxygen for VHDL simulator from the source code\&.
