.TH "sc_dt::sc_fxnum" 3 "VHDL simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sc_dt::sc_fxnum
.SH SYNOPSIS
.br
.PP
.PP
\fR#include <sc_fxnum\&.h>\fP
.PP
Inherited by \fBsc_dt::sc_fix\fP, and \fBsc_dt::sc_ufix\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBconst\fP \fBsc_fxval\fP \fBoperator\-\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval\fP \fBoperator+\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval\fP \fBoperator++\fP (int)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval\fP \fBoperator\-\-\fP (int)"
.br
.ti -1c
.RI "\fBsc_fxnum\fP & \fBoperator++\fP ()"
.br
.ti -1c
.RI "\fBsc_fxnum\fP & \fBoperator\-\-\fP ()"
.br
.ti -1c
.RI "\fBsc_fxnum_bitref_r\fP \fBoperator[]\fP (int) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_fxnum_bitref\fP \fBoperator[]\fP (int)"
.br
.ti -1c
.RI "\fBsc_fxnum_bitref_r\fP \fBbit\fP (int) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_fxnum_bitref\fP \fBbit\fP (int)"
.br
.ti -1c
.RI "\fBsc_fxnum_subref_r\fP \fBoperator()\fP (int, int) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_fxnum_subref\fP \fBoperator()\fP (int, int)"
.br
.ti -1c
.RI "\fBsc_fxnum_subref_r\fP \fBrange\fP (int, int) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_fxnum_subref\fP \fBrange\fP (int, int)"
.br
.ti -1c
.RI "\fBsc_fxnum_subref_r\fP \fBoperator()\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_fxnum_subref\fP \fBoperator()\fP ()"
.br
.ti -1c
.RI "\fBsc_fxnum_subref_r\fP \fBrange\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_fxnum_subref\fP \fBrange\fP ()"
.br
.ti -1c
.RI "\fBoperator double\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBshort\fP \fBto_short\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBunsigned\fP \fBshort\fP \fBto_ushort\fP () \fBconst\fP"
.br
.ti -1c
.RI "int \fBto_int\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBunsigned\fP int \fBto_uint\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBlong\fP \fBto_long\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBunsigned\fP \fBlong\fP \fBto_ulong\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBint64\fP \fBto_int64\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBuint64\fP \fBto_uint64\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBfloat\fP \fBto_float\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBdouble\fP \fBto_double\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP (\fBsc_numrep\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP (\fBsc_numrep\fP, \fBbool\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP (\fBsc_fmt\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP (\fBsc_numrep\fP, \fBsc_fmt\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP (\fBsc_numrep\fP, \fBbool\fP, \fBsc_fmt\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_dec\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_bin\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_oct\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_hex\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBis_neg\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBis_zero\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBis_normal\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBquantization_flag\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoverflow_flag\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval\fP \fBvalue\fP () \fBconst\fP"
.br
.ti -1c
.RI "int \fBwl\fP () \fBconst\fP"
.br
.ti -1c
.RI "int \fBiwl\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_q_mode\fP \fBq_mode\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_o_mode\fP \fBo_mode\fP () \fBconst\fP"
.br
.ti -1c
.RI "int \fBn_bits\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxtype_params\fP & \fBtype_params\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxcast_switch\fP & \fBcast_switch\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBprint\fP (::std::ostream &=::std::cout) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBscan\fP (::std::istream &=::std::cin)"
.br
.ti -1c
.RI "\fBvoid\fP \fBdump\fP (::std::ostream &=::std::cout) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBobserver_read\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBget_bit\fP (int) \fBconst\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBsc_fxnum_observer\fP * \fBobserver\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBcast\fP ()"
.br
.ti -1c
.RI "\fBsc_fxnum\fP (\fBconst\fP \fBsc_fxtype_params\fP &, \fBsc_enc\fP, \fBconst\fP \fBsc_fxcast_switch\fP &, \fBsc_fxnum_observer\fP *)"
.br
.ti -1c
.RI "\fB~sc_fxnum\fP ()"
.br
.ti -1c
.RI "\fBconst\fP \fBscfx_rep\fP * \fBget_rep\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBset_bit\fP (int, \fBbool\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBget_slice\fP (int, int, \fBsc_bv_base\fP &) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBset_slice\fP (int, int, \fBconst\fP \fBsc_bv_base\fP &)"
.br
.ti -1c
.RI "\fBsc_fxnum_observer\fP * \fBlock_observer\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBunlock_observer\fP (\fBsc_fxnum_observer\fP *) \fBconst\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBsc_fxnum\fP ()"
.br
.ti -1c
.RI "\fBsc_fxnum\fP (\fBconst\fP \fBsc_fxnum\fP &)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBscfx_rep\fP * \fBm_rep\fP"
.br
.ti -1c
.RI "\fBscfx_params\fP \fBm_params\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBm_q_flag\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBm_o_flag\fP"
.br
.ti -1c
.RI "\fBsc_fxnum_observer\fP * \fBm_observer\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "\fBclass\fP \fBsc_fxval\fP"
.br
.ti -1c
.RI "\fBclass\fP \fBsc_fxnum_bitref\fP"
.br
.ti -1c
.RI "\fBclass\fP \fBsc_fxnum_bitref_r\fP"
.br
.ti -1c
.RI "\fBclass\fP \fBsc_fxnum_subref\fP"
.br
.ti -1c
.RI "\fBclass\fP \fBsc_fxnum_subref_r\fP"
.br
.ti -1c
.RI "\fBclass\fP \fBsc_fxnum_fast_bitref\fP"
.br
.ti -1c
.RI "\fBclass\fP \fBsc_fxnum_fast_subref\fP"
.br
.ti -1c
.RI "\fBclass\fP \fBsc_core::Qt_sc_fxnum_trace\fP"
.br
.ti -1c
.RI "\fBclass\fP \fBsc_core::vcd_sc_fxnum_trace\fP"
.br
.ti -1c
.RI "\fBclass\fP \fBsc_core::wif_sc_fxnum_trace\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBneg\fP (\fBsc_fxval\fP &, \fBconst\fP \fBsc_fxnum\fP &)"
.br
.ti -1c
.RI "\fBvoid\fP \fBneg\fP (\fBsc_fxnum\fP &, \fBconst\fP \fBsc_fxnum\fP &)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval\fP \fBoperator/\fP (\fBconst\fP \fBsc_fxnum\fP &, \fBconst\fP \fBsc_fxnum\fP &)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval\fP \fBoperator<<\fP (\fBconst\fP \fBsc_fxnum\fP &, int)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval\fP \fBoperator>>\fP (\fBconst\fP \fBsc_fxnum\fP &, int)"
.br
.ti -1c
.RI "\fBvoid\fP \fBlshift\fP (\fBsc_fxval\fP &, \fBconst\fP \fBsc_fxnum\fP &, int)"
.br
.ti -1c
.RI "\fBvoid\fP \fBrshift\fP (\fBsc_fxval\fP &, \fBconst\fP \fBsc_fxnum\fP &, int)"
.br
.ti -1c
.RI "\fBvoid\fP \fBlshift\fP (\fBsc_fxnum\fP &, \fBconst\fP \fBsc_fxnum\fP &, int)"
.br
.ti -1c
.RI "\fBvoid\fP \fBrshift\fP (\fBsc_fxnum\fP &, \fBconst\fP \fBsc_fxnum\fP &, int)"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "sc_dt::sc_fxnum::sc_fxnum (\fBconst\fP \fBsc_fxtype_params\fP & type_params_, \fBsc_enc\fP enc_, \fBconst\fP \fBsc_fxcast_switch\fP & cast_sw, \fBsc_fxnum_observer\fP * observer_)\fR [inline]\fP, \fR [protected]\fP"

.SS "sc_dt::sc_fxnum::~sc_fxnum ()\fR [inline]\fP, \fR [protected]\fP"

.SS "sc_dt::sc_fxnum::sc_fxnum ()\fR [private]\fP"

.SS "sc_dt::sc_fxnum::sc_fxnum (\fBconst\fP \fBsc_fxnum\fP &)\fR [private]\fP"

.SH "Member Function Documentation"
.PP 
.SS "\fBsc_fxnum_bitref\fP sc_dt::sc_fxnum::bit (int i)\fR [inline]\fP"

.SS "\fBsc_fxnum_bitref_r\fP sc_dt::sc_fxnum::bit (int i) const\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::sc_fxnum::cast ()\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBconst\fP \fBsc_fxcast_switch\fP & sc_dt::sc_fxnum::cast_switch () const\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::sc_fxnum::dump (::std::ostream & = \fR::std::cout\fP) const"

.SS "\fBbool\fP sc_dt::sc_fxnum::get_bit (int i) const\fR [inline]\fP"

.SS "\fBconst\fP \fBscfx_rep\fP * sc_dt::sc_fxnum::get_rep () const\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBbool\fP sc_dt::sc_fxnum::get_slice (int i, int j, \fBsc_bv_base\fP & bv) const\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBbool\fP sc_dt::sc_fxnum::is_neg () const\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::sc_fxnum::is_normal () const\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::sc_fxnum::is_zero () const\fR [inline]\fP"

.SS "int sc_dt::sc_fxnum::iwl () const\fR [inline]\fP"

.SS "\fBsc_fxnum_observer\fP * sc_dt::sc_fxnum::lock_observer () const\fR [protected]\fP"

.SS "int sc_dt::sc_fxnum::n_bits () const\fR [inline]\fP"

.SS "\fBsc_o_mode\fP sc_dt::sc_fxnum::o_mode () const\fR [inline]\fP"

.SS "\fBsc_fxnum_observer\fP * sc_dt::sc_fxnum::observer () const\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvoid\fP sc_dt::sc_fxnum::observer_read () const\fR [inline]\fP"

.SS "sc_dt::sc_fxnum::operator \fBdouble\fP () const\fR [inline]\fP"

.SS "\fBsc_fxnum_subref\fP sc_dt::sc_fxnum::operator() ()\fR [inline]\fP"

.SS "\fBsc_fxnum_subref_r\fP sc_dt::sc_fxnum::operator() () const\fR [inline]\fP"

.SS "\fBsc_fxnum_subref\fP sc_dt::sc_fxnum::operator() (int i, int j)\fR [inline]\fP"

.SS "\fBsc_fxnum_subref_r\fP sc_dt::sc_fxnum::operator() (int i, int j) const\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_fxval\fP sc_dt::sc_fxnum::operator+ () const\fR [inline]\fP"

.SS "\fBsc_fxnum\fP & sc_dt::sc_fxnum::operator++ ()\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_fxval\fP sc_dt::sc_fxnum::operator++ (int)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_fxval\fP sc_dt::sc_fxnum::operator\- () const\fR [inline]\fP"

.SS "\fBsc_fxnum\fP & sc_dt::sc_fxnum::operator\-\- ()\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_fxval\fP sc_dt::sc_fxnum::operator\-\- (int)\fR [inline]\fP"

.SS "\fBsc_fxnum_bitref\fP sc_dt::sc_fxnum::operator[] (int i)\fR [inline]\fP"

.SS "\fBsc_fxnum_bitref_r\fP sc_dt::sc_fxnum::operator[] (int i) const\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::sc_fxnum::overflow_flag () const\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::sc_fxnum::print (::std::ostream & = \fR::std::cout\fP) const"

.SS "\fBsc_q_mode\fP sc_dt::sc_fxnum::q_mode () const\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::sc_fxnum::quantization_flag () const\fR [inline]\fP"

.SS "\fBsc_fxnum_subref\fP sc_dt::sc_fxnum::range ()\fR [inline]\fP"

.SS "\fBsc_fxnum_subref_r\fP sc_dt::sc_fxnum::range () const\fR [inline]\fP"

.SS "\fBsc_fxnum_subref\fP sc_dt::sc_fxnum::range (int i, int j)\fR [inline]\fP"

.SS "\fBsc_fxnum_subref_r\fP sc_dt::sc_fxnum::range (int i, int j) const\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::sc_fxnum::scan (::std::istream & = \fR::std::cin\fP)"

.SS "\fBbool\fP sc_dt::sc_fxnum::set_bit (int i, \fBbool\fP high)\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBbool\fP sc_dt::sc_fxnum::set_slice (int i, int j, \fBconst\fP \fBsc_bv_base\fP & bv)\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBconst\fP std::string sc_dt::sc_fxnum::to_bin () const"

.SS "\fBconst\fP std::string sc_dt::sc_fxnum::to_dec () const"

.SS "\fBdouble\fP sc_dt::sc_fxnum::to_double () const\fR [inline]\fP"

.SS "\fBfloat\fP sc_dt::sc_fxnum::to_float () const\fR [inline]\fP"

.SS "\fBconst\fP std::string sc_dt::sc_fxnum::to_hex () const"

.SS "int sc_dt::sc_fxnum::to_int () const\fR [inline]\fP"

.SS "\fBint64\fP sc_dt::sc_fxnum::to_int64 () const\fR [inline]\fP"

.SS "\fBlong\fP sc_dt::sc_fxnum::to_long () const\fR [inline]\fP"

.SS "\fBconst\fP std::string sc_dt::sc_fxnum::to_oct () const"

.SS "\fBshort\fP sc_dt::sc_fxnum::to_short () const\fR [inline]\fP"

.SS "\fBconst\fP std::string sc_dt::sc_fxnum::to_string () const"

.SS "\fBconst\fP std::string sc_dt::sc_fxnum::to_string (\fBsc_fmt\fP) const"

.SS "\fBconst\fP std::string sc_dt::sc_fxnum::to_string (\fBsc_numrep\fP) const"

.SS "\fBconst\fP std::string sc_dt::sc_fxnum::to_string (\fBsc_numrep\fP, \fBbool\fP) const"

.SS "\fBconst\fP std::string sc_dt::sc_fxnum::to_string (\fBsc_numrep\fP, \fBbool\fP, \fBsc_fmt\fP) const"

.SS "\fBconst\fP std::string sc_dt::sc_fxnum::to_string (\fBsc_numrep\fP, \fBsc_fmt\fP) const"

.SS "\fBunsigned\fP int sc_dt::sc_fxnum::to_uint () const\fR [inline]\fP"

.SS "\fBuint64\fP sc_dt::sc_fxnum::to_uint64 () const\fR [inline]\fP"

.SS "\fBunsigned\fP \fBlong\fP sc_dt::sc_fxnum::to_ulong () const\fR [inline]\fP"

.SS "\fBunsigned\fP \fBshort\fP sc_dt::sc_fxnum::to_ushort () const\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_fxtype_params\fP & sc_dt::sc_fxnum::type_params () const\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::sc_fxnum::unlock_observer (\fBsc_fxnum_observer\fP *) const\fR [protected]\fP"

.SS "\fBconst\fP \fBsc_fxval\fP sc_dt::sc_fxnum::value () const\fR [inline]\fP"

.SS "int sc_dt::sc_fxnum::wl () const\fR [inline]\fP"

.SH "Friends And Related Symbol Documentation"
.PP 
.SS "\fBvoid\fP lshift (\fBsc_fxnum\fP & c, \fBconst\fP \fBsc_fxnum\fP & a, int b)\fR [friend]\fP"

.SS "\fBvoid\fP lshift (\fBsc_fxval\fP & c, \fBconst\fP \fBsc_fxnum\fP & a, int b)\fR [friend]\fP"

.SS "\fBvoid\fP neg (\fBsc_fxnum\fP & c, \fBconst\fP \fBsc_fxnum\fP & a)\fR [friend]\fP"

.SS "\fBvoid\fP neg (\fBsc_fxval\fP & c, \fBconst\fP \fBsc_fxnum\fP & a)\fR [friend]\fP"

.SS "\fBconst\fP \fBsc_fxval\fP \fBoperator\fP/ (\fBconst\fP \fBsc_fxnum\fP & a, \fBconst\fP \fBsc_fxnum\fP & b)\fR [friend]\fP"

.SS "\fBconst\fP \fBsc_fxval\fP \fBoperator\fP<< (\fBconst\fP \fBsc_fxnum\fP & a, int b)\fR [friend]\fP"

.SS "\fBconst\fP \fBsc_fxval\fP \fBoperator\fP>> (\fBconst\fP \fBsc_fxnum\fP & a, int b)\fR [friend]\fP"

.SS "\fBvoid\fP rshift (\fBsc_fxnum\fP & c, \fBconst\fP \fBsc_fxnum\fP & a, int b)\fR [friend]\fP"

.SS "\fBvoid\fP rshift (\fBsc_fxval\fP & c, \fBconst\fP \fBsc_fxnum\fP & a, int b)\fR [friend]\fP"

.SS "\fBfriend\fP \fBclass\fP sc_core::Qt_sc_fxnum_trace\fR [friend]\fP"

.SS "\fBfriend\fP \fBclass\fP sc_core::vcd_sc_fxnum_trace\fR [friend]\fP"

.SS "\fBfriend\fP \fBclass\fP sc_core::wif_sc_fxnum_trace\fR [friend]\fP"

.SS "\fBfriend\fP \fBclass\fP \fBsc_fxnum_bitref\fP\fR [friend]\fP"

.SS "\fBfriend\fP \fBclass\fP \fBsc_fxnum_bitref_r\fP\fR [friend]\fP"

.SS "\fBfriend\fP \fBclass\fP \fBsc_fxnum_fast_bitref\fP\fR [friend]\fP"

.SS "\fBfriend\fP \fBclass\fP \fBsc_fxnum_fast_subref\fP\fR [friend]\fP"

.SS "\fBfriend\fP \fBclass\fP \fBsc_fxnum_subref\fP\fR [friend]\fP"

.SS "\fBfriend\fP \fBclass\fP \fBsc_fxnum_subref_r\fP\fR [friend]\fP"

.SS "\fBfriend\fP \fBclass\fP \fBsc_fxval\fP\fR [friend]\fP"

.SH "Member Data Documentation"
.PP 
.SS "\fBbool\fP sc_dt::sc_fxnum::m_o_flag\fR [private]\fP"

.SS "\fBsc_fxnum_observer\fP* sc_dt::sc_fxnum::m_observer\fR [mutable]\fP, \fR [private]\fP"

.SS "\fBscfx_params\fP sc_dt::sc_fxnum::m_params\fR [private]\fP"

.SS "\fBbool\fP sc_dt::sc_fxnum::m_q_flag\fR [private]\fP"

.SS "\fBscfx_rep\fP* sc_dt::sc_fxnum::m_rep\fR [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for VHDL simulator from the source code\&.
