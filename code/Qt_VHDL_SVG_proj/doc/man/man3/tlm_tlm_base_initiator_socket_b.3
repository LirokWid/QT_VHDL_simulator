.TH "tlm::tlm_base_initiator_socket_b< BUSWIDTH, FW_IF, BW_IF >" 3 "VHDL simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
tlm::tlm_base_initiator_socket_b< BUSWIDTH, FW_IF, BW_IF >
.SH SYNOPSIS
.br
.PP
.PP
\fR#include <tlm_initiator_socket\&.h>\fP
.PP
Inherited by \fBtlm::tlm_base_initiator_socket< 32, tlm_fw_transport_if< tlm_base_protocol_types >, tlm_bw_transport_if< tlm_base_protocol_types >, 1, sc_core::SC_ONE_OR_MORE_BOUND >\fP, \fBtlm::tlm_base_initiator_socket< BUSWIDTH, tlm_fw_transport_if< tlm::tlm_base_protocol_types >, tlm_bw_transport_if< tlm::tlm_base_protocol_types >, N, POL >\fP, \fBtlm::tlm_base_initiator_socket< BUSWIDTH, tlm_fw_transport_if< TYPES >, tlm_bw_transport_if< TYPES >, N, POL >\fP, and \fBtlm::tlm_base_initiator_socket< BUSWIDTH, FW_IF, BW_IF, N, POL >\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBvirtual\fP \fB~tlm_base_initiator_socket_b\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_core::sc_port_b\fP< \fBFW_IF\fP > & \fBget_base_port\fP ()=0"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_core::sc_port_b\fP< \fBFW_IF\fP > \fBconst\fP & \fBget_base_port\fP () \fBconst\fP =0"
.br
.ti -1c
.RI "\fBvirtual\fP \fBBW_IF\fP & \fBget_base_interface\fP ()=0"
.br
.ti -1c
.RI "\fBvirtual\fP \fBBW_IF\fP \fBconst\fP & \fBget_base_interface\fP () \fBconst\fP =0"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_core::sc_export\fP< \fBBW_IF\fP > & \fBget_base_export\fP ()=0"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_core::sc_export\fP< \fBBW_IF\fP > \fBconst\fP & \fBget_base_export\fP () \fBconst\fP =0"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>> \fBvirtual\fP \fBtlm::tlm_base_initiator_socket_b\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP >::~\fBtlm_base_initiator_socket_b\fP ()\fR [inline]\fP, \fR [virtual]\fP"

.SH "Member Function Documentation"
.PP 
.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>> \fBvirtual\fP \fBsc_core::sc_export\fP< \fBBW_IF\fP > \fBconst\fP  & \fBtlm::tlm_base_initiator_socket_b\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP >::get_base_export () const\fR [pure virtual]\fP"

.PP
Implemented in \fBtlm::tlm_base_initiator_socket< BUSWIDTH, FW_IF, BW_IF, N, POL >\fP, \fBtlm::tlm_base_initiator_socket< 32, tlm_fw_transport_if< tlm_base_protocol_types >, tlm_bw_transport_if< tlm_base_protocol_types >, 1, sc_core::SC_ONE_OR_MORE_BOUND >\fP, \fBtlm::tlm_base_initiator_socket< BUSWIDTH, tlm_fw_transport_if< tlm::tlm_base_protocol_types >, tlm_bw_transport_if< tlm::tlm_base_protocol_types >, N, POL >\fP, \fBtlm::tlm_base_initiator_socket< BUSWIDTH, tlm_fw_transport_if< TYPES >, tlm_bw_transport_if< TYPES >, N, POL >\fP, \fBtlm_utils::multi_passthrough_initiator_socket< MODULE, BUSWIDTH, TYPES, N, POL >\fP, and \fBtlm_utils::multi_passthrough_initiator_socket< MODULE, 32, tlm::tlm_base_protocol_types, 0, sc_core::SC_ZERO_OR_MORE_BOUND >\fP\&.
.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>> \fBvirtual\fP \fBsc_core::sc_export\fP< \fBBW_IF\fP > & \fBtlm::tlm_base_initiator_socket_b\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP >::get_base_export ()\fR [pure virtual]\fP"

.PP
Implemented in \fBtlm::tlm_base_initiator_socket< BUSWIDTH, FW_IF, BW_IF, N, POL >\fP, \fBtlm::tlm_base_initiator_socket< 32, tlm_fw_transport_if< tlm_base_protocol_types >, tlm_bw_transport_if< tlm_base_protocol_types >, 1, sc_core::SC_ONE_OR_MORE_BOUND >\fP, \fBtlm::tlm_base_initiator_socket< BUSWIDTH, tlm_fw_transport_if< tlm::tlm_base_protocol_types >, tlm_bw_transport_if< tlm::tlm_base_protocol_types >, N, POL >\fP, \fBtlm::tlm_base_initiator_socket< BUSWIDTH, tlm_fw_transport_if< TYPES >, tlm_bw_transport_if< TYPES >, N, POL >\fP, \fBtlm_utils::multi_passthrough_initiator_socket< MODULE, BUSWIDTH, TYPES, N, POL >\fP, and \fBtlm_utils::multi_passthrough_initiator_socket< MODULE, 32, tlm::tlm_base_protocol_types, 0, sc_core::SC_ZERO_OR_MORE_BOUND >\fP\&.
.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>> \fBvirtual\fP \fBBW_IF\fP \fBconst\fP  & \fBtlm::tlm_base_initiator_socket_b\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP >::get_base_interface () const\fR [pure virtual]\fP"

.PP
Implemented in \fBtlm::tlm_base_initiator_socket< BUSWIDTH, FW_IF, BW_IF, N, POL >\fP, \fBtlm::tlm_base_initiator_socket< 32, tlm_fw_transport_if< tlm_base_protocol_types >, tlm_bw_transport_if< tlm_base_protocol_types >, 1, sc_core::SC_ONE_OR_MORE_BOUND >\fP, \fBtlm::tlm_base_initiator_socket< BUSWIDTH, tlm_fw_transport_if< tlm::tlm_base_protocol_types >, tlm_bw_transport_if< tlm::tlm_base_protocol_types >, N, POL >\fP, \fBtlm::tlm_base_initiator_socket< BUSWIDTH, tlm_fw_transport_if< TYPES >, tlm_bw_transport_if< TYPES >, N, POL >\fP, \fBtlm_utils::multi_passthrough_initiator_socket< MODULE, BUSWIDTH, TYPES, N, POL >\fP, and \fBtlm_utils::multi_passthrough_initiator_socket< MODULE, 32, tlm::tlm_base_protocol_types, 0, sc_core::SC_ZERO_OR_MORE_BOUND >\fP\&.
.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>> \fBvirtual\fP \fBBW_IF\fP & \fBtlm::tlm_base_initiator_socket_b\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP >::get_base_interface ()\fR [pure virtual]\fP"

.PP
Implemented in \fBtlm::tlm_base_initiator_socket< BUSWIDTH, FW_IF, BW_IF, N, POL >\fP, \fBtlm::tlm_base_initiator_socket< 32, tlm_fw_transport_if< tlm_base_protocol_types >, tlm_bw_transport_if< tlm_base_protocol_types >, 1, sc_core::SC_ONE_OR_MORE_BOUND >\fP, \fBtlm::tlm_base_initiator_socket< BUSWIDTH, tlm_fw_transport_if< tlm::tlm_base_protocol_types >, tlm_bw_transport_if< tlm::tlm_base_protocol_types >, N, POL >\fP, \fBtlm::tlm_base_initiator_socket< BUSWIDTH, tlm_fw_transport_if< TYPES >, tlm_bw_transport_if< TYPES >, N, POL >\fP, \fBtlm_utils::multi_passthrough_initiator_socket< MODULE, BUSWIDTH, TYPES, N, POL >\fP, and \fBtlm_utils::multi_passthrough_initiator_socket< MODULE, 32, tlm::tlm_base_protocol_types, 0, sc_core::SC_ZERO_OR_MORE_BOUND >\fP\&.
.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>> \fBvirtual\fP \fBsc_core::sc_port_b\fP< \fBFW_IF\fP > \fBconst\fP  & \fBtlm::tlm_base_initiator_socket_b\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP >::get_base_port () const\fR [pure virtual]\fP"

.PP
Implemented in \fBtlm::tlm_base_initiator_socket< BUSWIDTH, FW_IF, BW_IF, N, POL >\fP, \fBtlm::tlm_base_initiator_socket< 32, tlm_fw_transport_if< tlm_base_protocol_types >, tlm_bw_transport_if< tlm_base_protocol_types >, 1, sc_core::SC_ONE_OR_MORE_BOUND >\fP, \fBtlm::tlm_base_initiator_socket< BUSWIDTH, tlm_fw_transport_if< tlm::tlm_base_protocol_types >, tlm_bw_transport_if< tlm::tlm_base_protocol_types >, N, POL >\fP, and \fBtlm::tlm_base_initiator_socket< BUSWIDTH, tlm_fw_transport_if< TYPES >, tlm_bw_transport_if< TYPES >, N, POL >\fP\&.
.SS "template<\fBunsigned\fP int BUSWIDTH = 32, \fBtypename\fP \fBFW_IF\fP  = tlm_fw_transport_if<>, \fBtypename\fP \fBBW_IF\fP  = tlm_bw_transport_if<>> \fBvirtual\fP \fBsc_core::sc_port_b\fP< \fBFW_IF\fP > & \fBtlm::tlm_base_initiator_socket_b\fP< \fBBUSWIDTH\fP, \fBFW_IF\fP, \fBBW_IF\fP >::get_base_port ()\fR [pure virtual]\fP"

.PP
Implemented in \fBtlm::tlm_base_initiator_socket< BUSWIDTH, FW_IF, BW_IF, N, POL >\fP, \fBtlm::tlm_base_initiator_socket< 32, tlm_fw_transport_if< tlm_base_protocol_types >, tlm_bw_transport_if< tlm_base_protocol_types >, 1, sc_core::SC_ONE_OR_MORE_BOUND >\fP, \fBtlm::tlm_base_initiator_socket< BUSWIDTH, tlm_fw_transport_if< tlm::tlm_base_protocol_types >, tlm_bw_transport_if< tlm::tlm_base_protocol_types >, N, POL >\fP, and \fBtlm::tlm_base_initiator_socket< BUSWIDTH, tlm_fw_transport_if< TYPES >, tlm_bw_transport_if< TYPES >, N, POL >\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for VHDL simulator from the source code\&.
