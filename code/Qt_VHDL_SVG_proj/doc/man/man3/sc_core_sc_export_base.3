.TH "sc_core::sc_export_base" 3 "VHDL simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sc_core::sc_export_base
.SH SYNOPSIS
.br
.PP
.PP
\fR#include <sc_export\&.h>\fP
.PP
Inherits \fBsc_core::sc_object\fP\&.
.PP
Inherited by \fBsc_core::sc_export< tlm_fw_transport_if<> >\fP, \fBsc_core::sc_export< bw_interface_type >\fP, \fBsc_core::sc_export< tlm_fw_transport_if< tlm_base_protocol_types > >\fP, \fBsc_core::sc_export< tlm_fw_transport_if< tlm::tlm_base_protocol_types > >\fP, \fBsc_core::sc_export< tlm_fw_transport_if< TYPES > >\fP, \fBsc_core::sc_export< tlm::tlm_fifo_get_if< REQ > >\fP, \fBsc_core::sc_export< tlm::tlm_fifo_put_if< RSP > >\fP, \fBsc_core::sc_export< tlm::tlm_fifo_put_if< REQ > >\fP, \fBsc_core::sc_export< tlm::tlm_fifo_get_if< RSP > >\fP, \fBsc_core::sc_export< tlm::tlm_master_if< REQ, RSP > >\fP, \fBsc_core::sc_export< tlm::tlm_slave_if< REQ, RSP > >\fP, \fBsc_core::sc_export< tlm::tlm_transport_if< REQ, RSP > >\fP, and \fBsc_core::sc_export< IF >\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBsc_export_base\fP \fBthis_type\fP"
.br
.in -1c

Public Types inherited from \fBsc_core::sc_object\fP
.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBunsigned\fP \fBphase_cb_mask\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBvirtual\fP \fBsc_interface\fP * \fBget_interface\fP ()=0"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP \fBsc_interface\fP * \fBget_interface\fP () \fBconst\fP =0"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_type_index\fP \fBget_interface_type\fP () \fBconst\fP =0"
.br
.in -1c

Public Member Functions inherited from \fBsc_core::sc_object\fP
.in +1c
.ti -1c
.RI "\fBconst\fP \fBchar\fP * \fBname\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBchar\fP * \fBbasename\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBprint\fP (::std::ostream &\fBos\fP=::std::cout) \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBdump\fP (::std::ostream &\fBos\fP=::std::cout) \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBtrace\fP (\fBsc_trace_file\fP *tf) \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP \fBchar\fP * \fBkind\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_simcontext\fP * \fBsimcontext\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBadd_attribute\fP (\fBsc_attr_base\fP &)"
.br
.ti -1c
.RI "\fBsc_attr_base\fP * \fBget_attribute\fP (\fBconst\fP std::string &\fBname_\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_attr_base\fP * \fBget_attribute\fP (\fBconst\fP std::string &\fBname_\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_attr_base\fP * \fBremove_attribute\fP (\fBconst\fP std::string &\fBname_\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBremove_all_attributes\fP ()"
.br
.ti -1c
.RI "int \fBnum_attributes\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_attr_cltn\fP & \fBattr_cltn\fP ()"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_attr_cltn\fP & \fBattr_cltn\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP std::vector< \fBsc_event\fP * > & \fBget_child_events\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP std::vector< \fBsc_object\fP * > & \fBget_child_objects\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_object\fP * \fBget_parent\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_object\fP * \fBget_parent_object\fP () \fBconst\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBsc_export_base\fP ()"
.br
.ti -1c
.RI "\fBsc_export_base\fP (\fBconst\fP \fBchar\fP *\fBname\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fB~sc_export_base\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBbefore_end_of_elaboration\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBend_of_elaboration\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBstart_of_simulation\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBend_of_simulation\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBreport_error\fP (\fBconst\fP \fBchar\fP *id, \fBconst\fP \fBchar\fP *\fBadd_msg\fP=0) \fBconst\fP"
.br
.in -1c

Protected Member Functions inherited from \fBsc_core::sc_object\fP
.in +1c
.ti -1c
.RI "\fBsc_object\fP ()"
.br
.ti -1c
.RI "\fBsc_object\fP (\fBconst\fP \fBchar\fP *\fBnm\fP)"
.br
.ti -1c
.RI "\fBsc_object\fP (\fBconst\fP \fBsc_object\fP &)"
.br
.ti -1c
.RI "\fBsc_object\fP & \fBoperator=\fP (\fBconst\fP \fBsc_object\fP &)"
.br
.ti -1c
.RI "\fBvirtual\fP \fB~sc_object\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBadd_child_event\fP (\fBsc_event\fP *\fBevent_p\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBadd_child_object\fP (\fBsc_object\fP *\fBobject_p\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBbool\fP \fBremove_child_event\fP (\fBsc_event\fP *\fBevent_p\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBbool\fP \fBremove_child_object\fP (\fBsc_object\fP *\fBobject_p\fP)"
.br
.ti -1c
.RI "\fBphase_cb_mask\fP \fBregister_simulation_phase_callback\fP (\fBphase_cb_mask\fP)"
.br
.ti -1c
.RI "\fBphase_cb_mask\fP \fBunregister_simulation_phase_callback\fP (\fBphase_cb_mask\fP)"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBconst\fP \fBchar\fP * \fBif_typename\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBconstruction_done\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBelaboration_done\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBstart_simulation\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBsimulation_done\fP ()"
.br
.ti -1c
.RI "\fBsc_export_base\fP (\fBconst\fP \fBthis_type\fP &)"
.br
.ti -1c
.RI "\fBthis_type\fP & \fBoperator=\fP (\fBconst\fP \fBthis_type\fP &)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "\fBclass\fP \fBsc_export_registry\fP"
.br
.in -1c
.SH "Member Typedef Documentation"
.PP 
.SS "\fBtypedef\fP \fBsc_export_base\fP \fBsc_core::sc_export_base::this_type\fP"

.SH "Constructor & Destructor Documentation"
.PP 
.SS "sc_core::sc_export_base::sc_export_base ()\fR [protected]\fP"

.SS "sc_core::sc_export_base::sc_export_base (\fBconst\fP \fBchar\fP * name)\fR [protected]\fP"

.SS "\fBvirtual\fP sc_core::sc_export_base::~sc_export_base ()\fR [protected]\fP, \fR [virtual]\fP"

.SS "sc_core::sc_export_base::sc_export_base (\fBconst\fP \fBthis_type\fP &)\fR [private]\fP"

.SH "Member Function Documentation"
.PP 
.SS "\fBvirtual\fP \fBvoid\fP sc_core::sc_export_base::before_end_of_elaboration ()\fR [protected]\fP, \fR [virtual]\fP"

.SS "\fBvoid\fP sc_core::sc_export_base::construction_done ()\fR [private]\fP"

.SS "\fBvoid\fP sc_core::sc_export_base::elaboration_done ()\fR [private]\fP"

.SS "\fBvirtual\fP \fBvoid\fP sc_core::sc_export_base::end_of_elaboration ()\fR [protected]\fP, \fR [virtual]\fP"

.PP
Reimplemented in \fBtlm_utils::multi_passthrough_target_socket< MODULE, BUSWIDTH, TYPES, N, POL >\fP, and \fBtlm_utils::multi_passthrough_target_socket< MODULE, 32, tlm::tlm_base_protocol_types, 0, sc_core::SC_ZERO_OR_MORE_BOUND >\fP\&.
.SS "\fBvirtual\fP \fBvoid\fP sc_core::sc_export_base::end_of_simulation ()\fR [protected]\fP, \fR [virtual]\fP"

.SS "\fBvirtual\fP \fBconst\fP \fBsc_interface\fP * sc_core::sc_export_base::get_interface () const\fR [pure virtual]\fP"

.PP
Implemented in \fBsc_core::sc_export< IF >\fP, \fBsc_core::sc_export< bw_interface_type >\fP, \fBsc_core::sc_export< tlm::tlm_fifo_get_if< REQ > >\fP, \fBsc_core::sc_export< tlm::tlm_fifo_get_if< RSP > >\fP, \fBsc_core::sc_export< tlm::tlm_fifo_put_if< REQ > >\fP, \fBsc_core::sc_export< tlm::tlm_fifo_put_if< RSP > >\fP, \fBsc_core::sc_export< tlm::tlm_master_if< REQ, RSP > >\fP, \fBsc_core::sc_export< tlm::tlm_slave_if< REQ, RSP > >\fP, \fBsc_core::sc_export< tlm::tlm_transport_if< REQ, RSP > >\fP, \fBsc_core::sc_export< tlm_fw_transport_if< tlm::tlm_base_protocol_types > >\fP, \fBsc_core::sc_export< tlm_fw_transport_if< tlm_base_protocol_types > >\fP, \fBsc_core::sc_export< tlm_fw_transport_if< TYPES > >\fP, and \fBsc_core::sc_export< tlm_fw_transport_if<> >\fP\&.
.SS "\fBvirtual\fP \fBsc_interface\fP * sc_core::sc_export_base::get_interface ()\fR [pure virtual]\fP"

.PP
Implemented in \fBsc_core::sc_export< IF >\fP, \fBsc_core::sc_export< bw_interface_type >\fP, \fBsc_core::sc_export< tlm::tlm_fifo_get_if< REQ > >\fP, \fBsc_core::sc_export< tlm::tlm_fifo_get_if< RSP > >\fP, \fBsc_core::sc_export< tlm::tlm_fifo_put_if< REQ > >\fP, \fBsc_core::sc_export< tlm::tlm_fifo_put_if< RSP > >\fP, \fBsc_core::sc_export< tlm::tlm_master_if< REQ, RSP > >\fP, \fBsc_core::sc_export< tlm::tlm_slave_if< REQ, RSP > >\fP, \fBsc_core::sc_export< tlm::tlm_transport_if< REQ, RSP > >\fP, \fBsc_core::sc_export< tlm_fw_transport_if< tlm::tlm_base_protocol_types > >\fP, \fBsc_core::sc_export< tlm_fw_transport_if< tlm_base_protocol_types > >\fP, \fBsc_core::sc_export< tlm_fw_transport_if< TYPES > >\fP, and \fBsc_core::sc_export< tlm_fw_transport_if<> >\fP\&.
.SS "\fBvirtual\fP \fBsc_type_index\fP sc_core::sc_export_base::get_interface_type () const\fR [pure virtual]\fP"

.PP
Implemented in \fBsc_core::sc_export< IF >\fP, \fBsc_core::sc_export< bw_interface_type >\fP, \fBsc_core::sc_export< tlm::tlm_fifo_get_if< REQ > >\fP, \fBsc_core::sc_export< tlm::tlm_fifo_get_if< RSP > >\fP, \fBsc_core::sc_export< tlm::tlm_fifo_put_if< REQ > >\fP, \fBsc_core::sc_export< tlm::tlm_fifo_put_if< RSP > >\fP, \fBsc_core::sc_export< tlm::tlm_master_if< REQ, RSP > >\fP, \fBsc_core::sc_export< tlm::tlm_slave_if< REQ, RSP > >\fP, \fBsc_core::sc_export< tlm::tlm_transport_if< REQ, RSP > >\fP, \fBsc_core::sc_export< tlm_fw_transport_if< tlm::tlm_base_protocol_types > >\fP, \fBsc_core::sc_export< tlm_fw_transport_if< tlm_base_protocol_types > >\fP, \fBsc_core::sc_export< tlm_fw_transport_if< TYPES > >\fP, and \fBsc_core::sc_export< tlm_fw_transport_if<> >\fP\&.
.SS "\fBconst\fP \fBchar\fP * sc_core::sc_export_base::if_typename () const\fR [inline]\fP, \fR [private]\fP"

.SS "\fBthis_type\fP & sc_core::sc_export_base::operator= (\fBconst\fP \fBthis_type\fP &)\fR [private]\fP"

.SS "\fBvoid\fP sc_core::sc_export_base::report_error (\fBconst\fP \fBchar\fP * id, \fBconst\fP \fBchar\fP * add_msg = \fR0\fP) const\fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_export_base::simulation_done ()\fR [private]\fP"

.SS "\fBvirtual\fP \fBvoid\fP sc_core::sc_export_base::start_of_simulation ()\fR [protected]\fP, \fR [virtual]\fP"

.PP
Reimplemented in \fBtlm_utils::simple_target_socket_b< MODULE, BUSWIDTH, TYPES, POL >\fP, \fBtlm_utils::simple_target_socket_b< MODULE, 32, tlm::tlm_base_protocol_types >\fP, \fBtlm_utils::simple_target_socket_b< MODULE, 32, tlm::tlm_base_protocol_types, sc_core::SC_ZERO_OR_MORE_BOUND >\fP, \fBtlm_utils::simple_target_socket_tagged_b< MODULE, BUSWIDTH, TYPES, POL >\fP, \fBtlm_utils::simple_target_socket_tagged_b< MODULE, 32, tlm::tlm_base_protocol_types >\fP, and \fBtlm_utils::simple_target_socket_tagged_b< MODULE, 32, tlm::tlm_base_protocol_types, sc_core::SC_ZERO_OR_MORE_BOUND >\fP\&.
.SS "\fBvoid\fP sc_core::sc_export_base::start_simulation ()\fR [private]\fP"

.SH "Friends And Related Symbol Documentation"
.PP 
.SS "\fBfriend\fP \fBclass\fP \fBsc_export_registry\fP\fR [friend]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for VHDL simulator from the source code\&.
