.TH "sc_dt::sc_proxy< X >" 3 "VHDL simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sc_dt::sc_proxy< X >
.SH SYNOPSIS
.br
.PP
.PP
\fR#include <sc_proxy\&.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBsc_proxy_traits\fP< X >::traits_type \fBtraits_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP traits_type::bit_type \fBbit_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP traits_type::value_type \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBvirtual\fP \fB~sc_proxy\fP ()"
.br
.ti -1c
.RI "X & \fBback_cast\fP ()"
.br
.ti -1c
.RI "\fBconst\fP X & \fBback_cast\fP () \fBconst\fP"
.br
.ti -1c
.RI "template<\fBclass\fP \fBY\fP > X & \fBassign_\fP (\fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBconst\fP \fBchar\fP *\fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBconst\fP \fBbool\fP *\fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBconst\fP \fBsc_logic\fP *\fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBconst\fP \fBsc_unsigned\fP &\fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBconst\fP \fBsc_signed\fP &\fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBconst\fP \fBsc_uint_base\fP &\fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBconst\fP \fBsc_int_base\fP &\fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBunsigned\fP int \fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (int \fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBunsigned\fP \fBlong\fP \fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBlong\fP \fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBuint64\fP \fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBint64\fP \fBa\fP)"
.br
.ti -1c
.RI "X & \fBb_not\fP ()"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator~\fP () \fBconst\fP"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBconst\fP \fBchar\fP *\fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBconst\fP \fBbool\fP *\fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBconst\fP \fBsc_logic\fP *\fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBconst\fP \fBsc_signed\fP &\fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBconst\fP \fBsc_uint_base\fP &\fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBconst\fP \fBsc_int_base\fP &\fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBunsigned\fP \fBlong\fP \fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBlong\fP \fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBunsigned\fP int \fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (int \fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBuint64\fP \fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBint64\fP \fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBconst\fP \fBchar\fP *\fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBconst\fP \fBbool\fP *\fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBconst\fP \fBsc_logic\fP *\fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBconst\fP \fBsc_unsigned\fP &\fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBconst\fP \fBsc_signed\fP &\fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBconst\fP \fBsc_uint_base\fP &\fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBconst\fP \fBsc_int_base\fP &\fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBunsigned\fP \fBlong\fP \fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBlong\fP \fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBunsigned\fP int \fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (int \fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBuint64\fP \fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBint64\fP \fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBconst\fP \fBchar\fP *\fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBconst\fP \fBbool\fP *\fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBconst\fP \fBsc_logic\fP *\fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBconst\fP \fBsc_signed\fP &\fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBconst\fP \fBsc_uint_base\fP &\fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBconst\fP \fBsc_int_base\fP &\fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBunsigned\fP \fBlong\fP \fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBlong\fP \fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBunsigned\fP int \fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (int \fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBuint64\fP \fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBint64\fP \fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBconst\fP \fBchar\fP *\fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBconst\fP \fBbool\fP *\fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBconst\fP \fBsc_logic\fP *\fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBconst\fP \fBsc_unsigned\fP &\fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBconst\fP \fBsc_signed\fP &\fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBconst\fP \fBsc_uint_base\fP &\fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBconst\fP \fBsc_int_base\fP &\fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBunsigned\fP \fBlong\fP \fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBlong\fP \fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBunsigned\fP int \fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (int \fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBuint64\fP \fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBint64\fP \fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBconst\fP \fBchar\fP *\fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBconst\fP \fBbool\fP *\fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBconst\fP \fBsc_logic\fP *\fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBconst\fP \fBsc_signed\fP &\fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBconst\fP \fBsc_uint_base\fP &\fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBconst\fP \fBsc_int_base\fP &\fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBunsigned\fP \fBlong\fP \fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBlong\fP \fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBunsigned\fP int \fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (int \fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBuint64\fP \fBb\fP)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBint64\fP \fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBconst\fP \fBchar\fP *\fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBconst\fP \fBbool\fP *\fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBconst\fP \fBsc_logic\fP *\fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBconst\fP \fBsc_unsigned\fP &\fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBconst\fP \fBsc_signed\fP &\fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBconst\fP \fBsc_uint_base\fP &\fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBconst\fP \fBsc_int_base\fP &\fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBunsigned\fP \fBlong\fP \fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBlong\fP \fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBunsigned\fP int \fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (int \fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBuint64\fP \fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBint64\fP \fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "X & \fBoperator<<=\fP (int \fBn\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator<<\fP (int \fBn\fP) \fBconst\fP"
.br
.ti -1c
.RI "X & \fBoperator>>=\fP (int \fBn\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator>>\fP (int \fBn\fP) \fBconst\fP"
.br
.ti -1c
.RI "X & \fBlrotate\fP (int \fBn\fP)"
.br
.ti -1c
.RI "X & \fBrrotate\fP (int \fBn\fP)"
.br
.ti -1c
.RI "X & \fBreverse\fP ()"
.br
.ti -1c
.RI "\fBsc_bitref\fP< X > \fBoperator[]\fP (int \fBi\fP)"
.br
.ti -1c
.RI "\fBsc_bitref_r\fP< X > \fBoperator[]\fP (int \fBi\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_bitref\fP< X > \fBbit\fP (int \fBi\fP)"
.br
.ti -1c
.RI "\fBsc_bitref_r\fP< X > \fBbit\fP (int \fBi\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_subref\fP< X > \fBoperator()\fP (int \fBhi\fP, int \fBlo\fP)"
.br
.ti -1c
.RI "\fBsc_subref_r\fP< X > \fBoperator()\fP (int \fBhi\fP, int \fBlo\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_subref\fP< X > \fBrange\fP (int \fBhi\fP, int \fBlo\fP)"
.br
.ti -1c
.RI "\fBsc_subref_r\fP< X > \fBrange\fP (int \fBhi\fP, int \fBlo\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBvalue_type\fP \fBand_reduce\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvalue_type\fP \fBnand_reduce\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvalue_type\fP \fBor_reduce\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvalue_type\fP \fBnor_reduce\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvalue_type\fP \fBxor_reduce\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvalue_type\fP \fBxnor_reduce\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBchar\fP *\fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBbool\fP *\fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_logic\fP *\fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_unsigned\fP &\fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_signed\fP &\fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_uint_base\fP &\fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_int_base\fP &\fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBunsigned\fP \fBlong\fP \fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBlong\fP \fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBunsigned\fP int \fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (int \fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBuint64\fP \fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBint64\fP \fBb\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP (\fBsc_numrep\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP (\fBsc_numrep\fP, \fBbool\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBint64\fP \fBto_int64\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBuint64\fP \fBto_uint64\fP () \fBconst\fP"
.br
.ti -1c
.RI "int \fBto_int\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBunsigned\fP int \fBto_uint\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBlong\fP \fBto_long\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBunsigned\fP \fBlong\fP \fBto_ulong\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBprint\fP (::std::ostream &\fBos\fP=::std::cout) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBscan\fP (::std::istream &\fBis\fP=::std::cin)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBvoid\fP \fBcheck_bounds\fP (int \fBn\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBcheck_wbounds\fP (int \fBn\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_digit\fP \fBto_anything_unsigned\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBint64\fP \fBto_anything_signed\fP () \fBconst\fP"
.br
.in -1c
.SH "Member Typedef Documentation"
.PP 
.SS "template<\fBclass\fP X > \fBtypedef\fP traits_type::bit_type \fBsc_dt::sc_proxy\fP< X >::bit_type"

.SS "template<\fBclass\fP X > \fBtypedef\fP \fBsc_proxy_traits\fP<X>::traits_type \fBsc_dt::sc_proxy\fP< X >::traits_type"

.SS "template<\fBclass\fP X > \fBtypedef\fP traits_type::value_type \fBsc_dt::sc_proxy\fP< X >::value_type"

.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<\fBclass\fP X > \fBvirtual\fP \fBsc_dt::sc_proxy\fP< X >::~\fBsc_proxy\fP ()\fR [inline]\fP, \fR [virtual]\fP"

.SH "Member Function Documentation"
.PP 
.SS "template<\fBclass\fP X > \fBsc_proxy\fP< X >\fB::value_type\fP \fBsc_dt::sc_proxy\fP< X >::and_reduce () const\fR [inline]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >::assign_ (\fBconst\fP \fBbool\fP * a)\fR [inline]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >::assign_ (\fBconst\fP \fBchar\fP * a)\fR [inline]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >::assign_ (\fBconst\fP \fBsc_int_base\fP & a)\fR [inline]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >::assign_ (\fBconst\fP \fBsc_logic\fP * a)\fR [inline]\fP"

.SS "template<\fBclass\fP X > template<\fBclass\fP \fBY\fP > X & \fBsc_dt::sc_proxy\fP< X >::assign_ (\fBconst\fP \fBsc_proxy\fP< \fBY\fP > & a)\fR [inline]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >::assign_ (\fBconst\fP \fBsc_signed\fP & a)\fR [inline]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >::assign_ (\fBconst\fP \fBsc_uint_base\fP & a)\fR [inline]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >::assign_ (\fBconst\fP \fBsc_unsigned\fP & a)\fR [inline]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >::assign_ (int a)\fR [inline]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >::assign_ (\fBint64\fP a)\fR [inline]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >::assign_ (\fBlong\fP a)\fR [inline]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >::assign_ (\fBuint64\fP a)\fR [inline]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >::assign_ (\fBunsigned\fP int a)\fR [inline]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >::assign_ (\fBunsigned\fP \fBlong\fP a)\fR [inline]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >::b_not ()\fR [inline]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >::back_cast ()\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBconst\fP X & \fBsc_dt::sc_proxy\fP< X >::back_cast () const\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBsc_bitref\fP< X > \fBsc_dt::sc_proxy\fP< X >::bit (int i)\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBsc_bitref_r\fP< X > \fBsc_dt::sc_proxy\fP< X >::bit (int i) const\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBvoid\fP \fBsc_dt::sc_proxy\fP< X >::check_bounds (int n) const\fR [inline]\fP, \fR [protected]\fP"

.SS "template<\fBclass\fP X > \fBvoid\fP \fBsc_dt::sc_proxy\fP< X >::check_wbounds (int n) const\fR [inline]\fP, \fR [protected]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >::lrotate (int n)\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBvalue_type\fP \fBsc_dt::sc_proxy\fP< X >::nand_reduce () const\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBvalue_type\fP \fBsc_dt::sc_proxy\fP< X >::nor_reduce () const\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP& (\fBconst\fP \fBbool\fP * b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP& (\fBconst\fP \fBchar\fP * b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP& (\fBconst\fP \fBsc_int_base\fP & b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP& (\fBconst\fP \fBsc_logic\fP * b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP& (\fBconst\fP \fBsc_signed\fP & b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP& (\fBconst\fP \fBsc_uint_base\fP & b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP& (\fBconst\fP \fBsc_unsigned\fP & b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP& (int b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP& (\fBint64\fP b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP& (\fBlong\fP b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP& (\fBuint64\fP b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP& (\fBunsigned\fP int b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP& (\fBunsigned\fP \fBlong\fP b) const"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP&= (\fBconst\fP \fBbool\fP * b)"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP&= (\fBconst\fP \fBchar\fP * b)"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP&= (\fBconst\fP \fBsc_int_base\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP&= (\fBconst\fP \fBsc_logic\fP * b)"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP&= (\fBconst\fP \fBsc_signed\fP & b)"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP&= (\fBconst\fP \fBsc_uint_base\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP&= (\fBconst\fP \fBsc_unsigned\fP & b)"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP&= (int b)\fR [inline]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP&= (\fBint64\fP b)"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP&= (\fBlong\fP b)"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP&= (\fBuint64\fP b)"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP&= (\fBunsigned\fP int b)\fR [inline]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP&= (\fBunsigned\fP \fBlong\fP b)"

.SS "template<\fBclass\fP X > \fBsc_subref\fP< X > \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP() (int hi, int lo)\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBsc_subref_r\fP< X > \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP() (int hi, int lo) const\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP<< (int n) const\fR [inline]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP<<= (int n)\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBbool\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP== (\fBconst\fP \fBbool\fP * b) const"

.SS "template<\fBclass\fP X > \fBbool\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP== (\fBconst\fP \fBchar\fP * b) const"

.SS "template<\fBclass\fP X > \fBbool\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP== (\fBconst\fP \fBsc_int_base\fP & b) const"

.SS "template<\fBclass\fP X > \fBbool\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP== (\fBconst\fP \fBsc_logic\fP * b) const"

.SS "template<\fBclass\fP X > \fBbool\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP== (\fBconst\fP \fBsc_signed\fP & b) const"

.SS "template<\fBclass\fP X > \fBbool\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP== (\fBconst\fP \fBsc_uint_base\fP & b) const"

.SS "template<\fBclass\fP X > \fBbool\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP== (\fBconst\fP \fBsc_unsigned\fP & b) const"

.SS "template<\fBclass\fP X > \fBbool\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP== (int b) const"

.SS "template<\fBclass\fP X > \fBbool\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP== (\fBint64\fP b) const"

.SS "template<\fBclass\fP X > \fBbool\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP== (\fBlong\fP b) const"

.SS "template<\fBclass\fP X > \fBbool\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP== (\fBuint64\fP b) const"

.SS "template<\fBclass\fP X > \fBbool\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP== (\fBunsigned\fP int b) const"

.SS "template<\fBclass\fP X > \fBbool\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP== (\fBunsigned\fP \fBlong\fP b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP>> (int n) const\fR [inline]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP>>= (int n)\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBsc_bitref\fP< X > \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP[] (int i)\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBsc_bitref_r\fP< X > \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP[] (int i) const\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP^ (\fBconst\fP \fBbool\fP * b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP^ (\fBconst\fP \fBchar\fP * b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP^ (\fBconst\fP \fBsc_int_base\fP & b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP^ (\fBconst\fP \fBsc_logic\fP * b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP^ (\fBconst\fP \fBsc_signed\fP & b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP^ (\fBconst\fP \fBsc_uint_base\fP & b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP^ (\fBconst\fP \fBsc_unsigned\fP & b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP^ (int b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP^ (\fBint64\fP b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP^ (\fBlong\fP b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP^ (\fBuint64\fP b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP^ (\fBunsigned\fP int b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP^ (\fBunsigned\fP \fBlong\fP b) const"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP^= (\fBconst\fP \fBbool\fP * b)"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP^= (\fBconst\fP \fBchar\fP * b)"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP^= (\fBconst\fP \fBsc_int_base\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP^= (\fBconst\fP \fBsc_logic\fP * b)"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP^= (\fBconst\fP \fBsc_signed\fP & b)"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP^= (\fBconst\fP \fBsc_uint_base\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP^= (\fBconst\fP \fBsc_unsigned\fP & b)"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP^= (int b)\fR [inline]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP^= (\fBint64\fP b)"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP^= (\fBlong\fP b)"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP^= (\fBuint64\fP b)"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP^= (\fBunsigned\fP int b)\fR [inline]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP^= (\fBunsigned\fP \fBlong\fP b)"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP| (\fBconst\fP \fBbool\fP * b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP| (\fBconst\fP \fBchar\fP * b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP| (\fBconst\fP \fBsc_int_base\fP & b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP| (\fBconst\fP \fBsc_logic\fP * b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP| (\fBconst\fP \fBsc_signed\fP & b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP| (\fBconst\fP \fBsc_uint_base\fP & b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP| (\fBconst\fP \fBsc_unsigned\fP & b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP| (int b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP| (\fBint64\fP b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP| (\fBlong\fP b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP| (\fBuint64\fP b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP| (\fBunsigned\fP int b) const"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP| (\fBunsigned\fP \fBlong\fP b) const"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP|= (\fBconst\fP \fBbool\fP * b)"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP|= (\fBconst\fP \fBchar\fP * b)"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP|= (\fBconst\fP \fBsc_int_base\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP|= (\fBconst\fP \fBsc_logic\fP * b)"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP|= (\fBconst\fP \fBsc_signed\fP & b)"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP|= (\fBconst\fP \fBsc_uint_base\fP & b)\fR [inline]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP|= (\fBconst\fP \fBsc_unsigned\fP & b)"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP|= (int b)\fR [inline]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP|= (\fBint64\fP b)"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP|= (\fBlong\fP b)"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP|= (\fBuint64\fP b)"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP|= (\fBunsigned\fP int b)\fR [inline]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >\fB::operator\fP|= (\fBunsigned\fP \fBlong\fP b)"

.SS "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::sc_proxy\fP< X >::operator~ () const\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBsc_proxy\fP< X >\fB::value_type\fP \fBsc_dt::sc_proxy\fP< X >::or_reduce () const\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBvoid\fP \fBsc_dt::sc_proxy\fP< X >::print (::std::ostream & os = \fR::std::cout\fP) const\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBsc_subref\fP< X > \fBsc_dt::sc_proxy\fP< X >::range (int hi, int lo)\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBsc_subref_r\fP< X > \fBsc_dt::sc_proxy\fP< X >::range (int hi, int lo) const\fR [inline]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >::reverse ()\fR [inline]\fP"

.SS "template<\fBclass\fP X > X & \fBsc_dt::sc_proxy\fP< X >::rrotate (int n)\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBvoid\fP \fBsc_dt::sc_proxy\fP< X >::scan (::std::istream & is = \fR::std::cin\fP)\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBint64\fP \fBsc_dt::sc_proxy\fP< X >::to_anything_signed () const\fR [inline]\fP, \fR [protected]\fP"

.SS "template<\fBclass\fP X > \fBsc_digit\fP \fBsc_dt::sc_proxy\fP< X >::to_anything_unsigned () const\fR [inline]\fP, \fR [protected]\fP"

.SS "template<\fBclass\fP X > int \fBsc_dt::sc_proxy\fP< X >::to_int () const\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBint64\fP \fBsc_dt::sc_proxy\fP< X >::to_int64 () const\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBlong\fP \fBsc_dt::sc_proxy\fP< X >::to_long () const\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBconst\fP std::string \fBsc_dt::sc_proxy\fP< X >::to_string () const\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBconst\fP std::string \fBsc_dt::sc_proxy\fP< X >::to_string (\fBsc_numrep\fP numrep) const\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBconst\fP std::string \fBsc_dt::sc_proxy\fP< X >::to_string (\fBsc_numrep\fP numrep, \fBbool\fP w_prefix) const\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBunsigned\fP int \fBsc_dt::sc_proxy\fP< X >::to_uint () const\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBuint64\fP \fBsc_dt::sc_proxy\fP< X >::to_uint64 () const\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBunsigned\fP \fBlong\fP \fBsc_dt::sc_proxy\fP< X >::to_ulong () const\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBvalue_type\fP \fBsc_dt::sc_proxy\fP< X >::xnor_reduce () const\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBsc_proxy\fP< X >\fB::value_type\fP \fBsc_dt::sc_proxy\fP< X >::xor_reduce () const\fR [inline]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for VHDL simulator from the source code\&.
