.TH "sc_core::sc_port_base" 3 "VHDL simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sc_core::sc_port_base
.SH SYNOPSIS
.br
.PP
.PP
\fR#include <sc_port\&.h>\fP
.PP
Inherits \fBsc_core::sc_object\fP\&.
.PP
Inherited by \fBsc_core::sc_port_b< sc_signal_in_if< sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< sc_fifo_in_if< T > >\fP, \fBsc_core::sc_port_b< sc_fifo_out_if< T > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< T > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< bool > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< sc_dt::sc_logic > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< sc_dt::sc_lv< W > > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< T > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< bool > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< sc_dt::sc_logic > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< sc_dt::sc_lv< W > > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if<> >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if< tlm_base_protocol_types > >\fP, \fBsc_core::sc_port_b< tlm_nonblocking_get_if< T > >\fP, \fBsc_core::sc_port_b< tlm_nonblocking_peek_if< T > >\fP, \fBsc_core::sc_port_b< tlm_nonblocking_put_if< T > >\fP, \fBsc_core::sc_port_b< bw_interface_type >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if< tlm::tlm_base_protocol_types > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if< TYPES > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< typename sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< typename sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< tlm::tlm_slave_if< REQ, RSP > >\fP, \fBsc_core::sc_port_b< tlm::tlm_transport_if< REQ, RSP > >\fP, \fBsc_core::sc_port_b< tlm::tlm_master_if< REQ, RSP > >\fP, and \fBsc_core::sc_port_b< IF >\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBsc_port_base\fP \fBthis_type\fP"
.br
.in -1c

Public Types inherited from \fBsc_core::sc_object\fP
.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBunsigned\fP \fBphase_cb_mask\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "int \fBbind_count\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_interface\fP * \fBget_interface\fP ()=0"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP \fBsc_interface\fP * \fBget_interface\fP () \fBconst\fP =0"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP \fBchar\fP * \fBkind\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBsc_type_index\fP \fBget_interface_type\fP () \fBconst\fP =0"
.br
.in -1c

Public Member Functions inherited from \fBsc_core::sc_object\fP
.in +1c
.ti -1c
.RI "\fBconst\fP \fBchar\fP * \fBname\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBchar\fP * \fBbasename\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBprint\fP (::std::ostream &\fBos\fP=::std::cout) \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBdump\fP (::std::ostream &\fBos\fP=::std::cout) \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBtrace\fP (\fBsc_trace_file\fP *tf) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_simcontext\fP * \fBsimcontext\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBadd_attribute\fP (\fBsc_attr_base\fP &)"
.br
.ti -1c
.RI "\fBsc_attr_base\fP * \fBget_attribute\fP (\fBconst\fP std::string &\fBname_\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_attr_base\fP * \fBget_attribute\fP (\fBconst\fP std::string &\fBname_\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_attr_base\fP * \fBremove_attribute\fP (\fBconst\fP std::string &\fBname_\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBremove_all_attributes\fP ()"
.br
.ti -1c
.RI "int \fBnum_attributes\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_attr_cltn\fP & \fBattr_cltn\fP ()"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_attr_cltn\fP & \fBattr_cltn\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP std::vector< \fBsc_event\fP * > & \fBget_child_events\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP std::vector< \fBsc_object\fP * > & \fBget_child_objects\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_object\fP * \fBget_parent\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_object\fP * \fBget_parent_object\fP () \fBconst\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBsc_port_base\fP (int \fBmax_size_\fP, \fBsc_port_policy\fP policy=\fBSC_ONE_OR_MORE_BOUND\fP)"
.br
.ti -1c
.RI "\fBsc_port_base\fP (\fBconst\fP \fBchar\fP *\fBname_\fP, int \fBmax_size_\fP, \fBsc_port_policy\fP policy=\fBSC_ONE_OR_MORE_BOUND\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fB~sc_port_base\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBbind\fP (\fBsc_interface\fP &\fBinterface_\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBbind\fP (\fBthis_type\fP &\fBparent_\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP int \fBvbind\fP (\fBsc_interface\fP &)=0"
.br
.ti -1c
.RI "\fBvirtual\fP int \fBvbind\fP (\fBsc_port_base\fP &)=0"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBbefore_end_of_elaboration\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBend_of_elaboration\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBstart_of_simulation\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBend_of_simulation\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBreport_error\fP (\fBconst\fP \fBchar\fP *id, \fBconst\fP \fBchar\fP *\fBadd_msg\fP=0) \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBmake_sensitive\fP (\fBsc_thread_handle\fP, \fBsc_event_finder\fP *=0) \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBmake_sensitive\fP (\fBsc_method_handle\fP, \fBsc_event_finder\fP *=0) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBadd_static_event\fP (\fBsc_method_handle\fP \fBprocess_p\fP, \fBconst\fP \fBsc_event\fP &event) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBadd_static_event\fP (\fBsc_thread_handle\fP \fBprocess_p\fP, \fBconst\fP \fBsc_event\fP &event) \fBconst\fP"
.br
.in -1c

Protected Member Functions inherited from \fBsc_core::sc_object\fP
.in +1c
.ti -1c
.RI "\fBsc_object\fP ()"
.br
.ti -1c
.RI "\fBsc_object\fP (\fBconst\fP \fBchar\fP *\fBnm\fP)"
.br
.ti -1c
.RI "\fBsc_object\fP (\fBconst\fP \fBsc_object\fP &)"
.br
.ti -1c
.RI "\fBsc_object\fP & \fBoperator=\fP (\fBconst\fP \fBsc_object\fP &)"
.br
.ti -1c
.RI "\fBvirtual\fP \fB~sc_object\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBadd_child_event\fP (\fBsc_event\fP *\fBevent_p\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBadd_child_object\fP (\fBsc_object\fP *\fBobject_p\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBbool\fP \fBremove_child_event\fP (\fBsc_event\fP *\fBevent_p\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBbool\fP \fBremove_child_object\fP (\fBsc_object\fP *\fBobject_p\fP)"
.br
.ti -1c
.RI "\fBphase_cb_mask\fP \fBregister_simulation_phase_callback\fP (\fBphase_cb_mask\fP)"
.br
.ti -1c
.RI "\fBphase_cb_mask\fP \fBunregister_simulation_phase_callback\fP (\fBphase_cb_mask\fP)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBsc_bind_info\fP * \fBm_bind_info\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBadd_interface\fP (\fBsc_interface\fP *)=0"
.br
.ti -1c
.RI "\fBvirtual\fP int \fBinterface_count\fP () \fBconst\fP =0"
.br
.ti -1c
.RI "\fBconst\fP \fBchar\fP * \fBif_typename\fP () \fBconst\fP"
.br
.ti -1c
.RI "int \fBpbind\fP (\fBsc_interface\fP &)"
.br
.ti -1c
.RI "int \fBpbind\fP (\fBsc_port_base\fP &)"
.br
.ti -1c
.RI "int \fBfirst_parent\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBinsert_parent\fP (int)"
.br
.ti -1c
.RI "\fBvoid\fP \fBconstruction_done\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBcomplete_binding\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBelaboration_done\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBstart_simulation\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBsimulation_done\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBfree_binding\fP ()"
.br
.ti -1c
.RI "\fBsc_port_base\fP ()"
.br
.ti -1c
.RI "\fBsc_port_base\fP (\fBconst\fP \fBthis_type\fP &)"
.br
.ti -1c
.RI "\fBthis_type\fP & \fBoperator=\fP (\fBconst\fP \fBthis_type\fP &)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "\fBclass\fP \fBsc_module\fP"
.br
.ti -1c
.RI "\fBclass\fP \fBsc_port_registry\fP"
.br
.ti -1c
.RI "\fBclass\fP \fBsc_sensitive\fP"
.br
.ti -1c
.RI "\fBclass\fP \fBsc_sensitive_pos\fP"
.br
.ti -1c
.RI "\fBclass\fP \fBsc_sensitive_neg\fP"
.br
.in -1c
.SH "Member Typedef Documentation"
.PP 
.SS "\fBtypedef\fP \fBsc_port_base\fP \fBsc_core::sc_port_base::this_type\fP"

.SH "Constructor & Destructor Documentation"
.PP 
.SS "sc_core::sc_port_base::sc_port_base (int max_size_, \fBsc_port_policy\fP policy = \fR\fBSC_ONE_OR_MORE_BOUND\fP\fP)\fR [explicit]\fP, \fR [protected]\fP"

.SS "sc_core::sc_port_base::sc_port_base (\fBconst\fP \fBchar\fP * name_, int max_size_, \fBsc_port_policy\fP policy = \fR\fBSC_ONE_OR_MORE_BOUND\fP\fP)\fR [protected]\fP"

.SS "\fBvirtual\fP sc_core::sc_port_base::~sc_port_base ()\fR [protected]\fP, \fR [virtual]\fP"

.SS "sc_core::sc_port_base::sc_port_base ()\fR [private]\fP"

.SS "sc_core::sc_port_base::sc_port_base (\fBconst\fP \fBthis_type\fP &)\fR [private]\fP"

.SH "Member Function Documentation"
.PP 
.SS "\fBvirtual\fP \fBvoid\fP sc_core::sc_port_base::add_interface (\fBsc_interface\fP *)\fR [private]\fP, \fR [pure virtual]\fP"

.PP
Implemented in \fBsc_core::sc_port_b< IF >\fP, \fBsc_core::sc_port_b< bw_interface_type >\fP, \fBsc_core::sc_port_b< sc_fifo_in_if< T > >\fP, \fBsc_core::sc_port_b< sc_fifo_out_if< T > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< bool > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< sc_dt::sc_logic > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< sc_dt::sc_lv< W > > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< T > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< typename sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< bool > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< sc_dt::sc_logic > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< sc_dt::sc_lv< W > > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< T > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< typename sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< tlm::tlm_master_if< REQ, RSP > >\fP, \fBsc_core::sc_port_b< tlm::tlm_slave_if< REQ, RSP > >\fP, \fBsc_core::sc_port_b< tlm::tlm_transport_if< REQ, RSP > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if< tlm::tlm_base_protocol_types > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if< tlm_base_protocol_types > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if< TYPES > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if<> >\fP, \fBsc_core::sc_port_b< tlm_nonblocking_get_if< T > >\fP, \fBsc_core::sc_port_b< tlm_nonblocking_peek_if< T > >\fP, and \fBsc_core::sc_port_b< tlm_nonblocking_put_if< T > >\fP\&.
.SS "\fBvoid\fP sc_core::sc_port_base::add_static_event (\fBsc_method_handle\fP process_p, \fBconst\fP \fBsc_event\fP & event) const\fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_port_base::add_static_event (\fBsc_thread_handle\fP process_p, \fBconst\fP \fBsc_event\fP & event) const\fR [protected]\fP"

.SS "\fBvirtual\fP \fBvoid\fP sc_core::sc_port_base::before_end_of_elaboration ()\fR [protected]\fP, \fR [virtual]\fP"

.PP
Reimplemented in \fBtlm_utils::multi_passthrough_initiator_socket< MODULE, BUSWIDTH, TYPES, N, POL >\fP, and \fBtlm_utils::multi_passthrough_initiator_socket< MODULE, 32, tlm::tlm_base_protocol_types, 0, sc_core::SC_ZERO_OR_MORE_BOUND >\fP\&.
.SS "\fBvoid\fP sc_core::sc_port_base::bind (\fBsc_interface\fP & interface_)\fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_port_base::bind (\fBthis_type\fP & parent_)\fR [protected]\fP"

.SS "int sc_core::sc_port_base::bind_count ()"

.SS "\fBvoid\fP sc_core::sc_port_base::complete_binding ()\fR [private]\fP"

.SS "\fBvoid\fP sc_core::sc_port_base::construction_done ()\fR [private]\fP"

.SS "\fBvoid\fP sc_core::sc_port_base::elaboration_done ()\fR [private]\fP"

.SS "\fBvirtual\fP \fBvoid\fP sc_core::sc_port_base::end_of_elaboration ()\fR [protected]\fP, \fR [virtual]\fP"

.PP
Reimplemented in \fBsc_core::sc_in< T >\fP, \fBsc_core::sc_in< sc_dt::sc_lv >\fP, \fBsc_core::sc_in< sc_dt::sc_lv< W > >\fP, \fBsc_core::sc_in< typename sc_dt::sc_lv >\fP, \fBsc_core::sc_in< bool >\fP, \fBsc_core::sc_in< sc_dt::sc_logic >\fP, \fBsc_core::sc_inout< T >\fP, \fBsc_core::sc_inout< bool >\fP, \fBsc_core::sc_inout< sc_dt::sc_lv >\fP, \fBsc_core::sc_inout< sc_dt::sc_lv< W > >\fP, \fBsc_core::sc_inout< typename sc_dt::sc_lv >\fP, \fBsc_core::sc_inout< bool >\fP, \fBsc_core::sc_inout< sc_dt::sc_logic >\fP, \fBsc_core::sc_in_resolved\fP, \fBsc_core::sc_inout_resolved\fP, \fBsc_core::sc_in_rv< W >\fP, and \fBsc_core::sc_inout_rv< W >\fP\&.
.SS "\fBvirtual\fP \fBvoid\fP sc_core::sc_port_base::end_of_simulation ()\fR [protected]\fP, \fR [virtual]\fP"

.SS "int sc_core::sc_port_base::first_parent ()\fR [private]\fP"

.SS "\fBvoid\fP sc_core::sc_port_base::free_binding ()\fR [private]\fP"

.SS "\fBvirtual\fP \fBconst\fP \fBsc_interface\fP * sc_core::sc_port_base::get_interface () const\fR [pure virtual]\fP"

.PP
Implemented in \fBsc_core::sc_port_b< IF >\fP, \fBsc_core::sc_port_b< bw_interface_type >\fP, \fBsc_core::sc_port_b< sc_fifo_in_if< T > >\fP, \fBsc_core::sc_port_b< sc_fifo_out_if< T > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< bool > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< sc_dt::sc_logic > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< sc_dt::sc_lv< W > > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< T > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< typename sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< bool > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< sc_dt::sc_logic > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< sc_dt::sc_lv< W > > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< T > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< typename sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< tlm::tlm_master_if< REQ, RSP > >\fP, \fBsc_core::sc_port_b< tlm::tlm_slave_if< REQ, RSP > >\fP, \fBsc_core::sc_port_b< tlm::tlm_transport_if< REQ, RSP > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if< tlm::tlm_base_protocol_types > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if< tlm_base_protocol_types > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if< TYPES > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if<> >\fP, \fBsc_core::sc_port_b< tlm_nonblocking_get_if< T > >\fP, \fBsc_core::sc_port_b< tlm_nonblocking_peek_if< T > >\fP, and \fBsc_core::sc_port_b< tlm_nonblocking_put_if< T > >\fP\&.
.SS "\fBvirtual\fP \fBsc_interface\fP * sc_core::sc_port_base::get_interface ()\fR [pure virtual]\fP"

.PP
Implemented in \fBsc_core::sc_port_b< IF >\fP, \fBsc_core::sc_port_b< bw_interface_type >\fP, \fBsc_core::sc_port_b< sc_fifo_in_if< T > >\fP, \fBsc_core::sc_port_b< sc_fifo_out_if< T > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< bool > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< sc_dt::sc_logic > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< sc_dt::sc_lv< W > > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< T > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< typename sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< bool > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< sc_dt::sc_logic > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< sc_dt::sc_lv< W > > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< T > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< typename sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< tlm::tlm_master_if< REQ, RSP > >\fP, \fBsc_core::sc_port_b< tlm::tlm_slave_if< REQ, RSP > >\fP, \fBsc_core::sc_port_b< tlm::tlm_transport_if< REQ, RSP > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if< tlm::tlm_base_protocol_types > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if< tlm_base_protocol_types > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if< TYPES > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if<> >\fP, \fBsc_core::sc_port_b< tlm_nonblocking_get_if< T > >\fP, \fBsc_core::sc_port_b< tlm_nonblocking_peek_if< T > >\fP, and \fBsc_core::sc_port_b< tlm_nonblocking_put_if< T > >\fP\&.
.SS "\fBvirtual\fP \fBsc_type_index\fP sc_core::sc_port_base::get_interface_type () const\fR [pure virtual]\fP"

.PP
Implemented in \fBsc_core::sc_port_b< IF >\fP, \fBsc_core::sc_port_b< bw_interface_type >\fP, \fBsc_core::sc_port_b< sc_fifo_in_if< T > >\fP, \fBsc_core::sc_port_b< sc_fifo_out_if< T > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< bool > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< sc_dt::sc_logic > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< sc_dt::sc_lv< W > > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< T > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< typename sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< bool > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< sc_dt::sc_logic > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< sc_dt::sc_lv< W > > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< T > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< typename sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< tlm::tlm_master_if< REQ, RSP > >\fP, \fBsc_core::sc_port_b< tlm::tlm_slave_if< REQ, RSP > >\fP, \fBsc_core::sc_port_b< tlm::tlm_transport_if< REQ, RSP > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if< tlm::tlm_base_protocol_types > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if< tlm_base_protocol_types > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if< TYPES > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if<> >\fP, \fBsc_core::sc_port_b< tlm_nonblocking_get_if< T > >\fP, \fBsc_core::sc_port_b< tlm_nonblocking_peek_if< T > >\fP, and \fBsc_core::sc_port_b< tlm_nonblocking_put_if< T > >\fP\&.
.SS "\fBconst\fP \fBchar\fP * sc_core::sc_port_base::if_typename () const\fR [inline]\fP, \fR [private]\fP"

.SS "\fBvoid\fP sc_core::sc_port_base::insert_parent (int)\fR [private]\fP"

.SS "\fBvirtual\fP int sc_core::sc_port_base::interface_count () const\fR [private]\fP, \fR [pure virtual]\fP"

.PP
Implemented in \fBsc_core::sc_port_b< IF >\fP, \fBsc_core::sc_port_b< bw_interface_type >\fP, \fBsc_core::sc_port_b< sc_fifo_in_if< T > >\fP, \fBsc_core::sc_port_b< sc_fifo_out_if< T > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< bool > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< sc_dt::sc_logic > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< sc_dt::sc_lv< W > > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< T > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< typename sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< bool > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< sc_dt::sc_logic > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< sc_dt::sc_lv< W > > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< T > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< typename sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< tlm::tlm_master_if< REQ, RSP > >\fP, \fBsc_core::sc_port_b< tlm::tlm_slave_if< REQ, RSP > >\fP, \fBsc_core::sc_port_b< tlm::tlm_transport_if< REQ, RSP > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if< tlm::tlm_base_protocol_types > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if< tlm_base_protocol_types > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if< TYPES > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if<> >\fP, \fBsc_core::sc_port_b< tlm_nonblocking_get_if< T > >\fP, \fBsc_core::sc_port_b< tlm_nonblocking_peek_if< T > >\fP, and \fBsc_core::sc_port_b< tlm_nonblocking_put_if< T > >\fP\&.
.SS "\fBvirtual\fP \fBconst\fP \fBchar\fP * sc_core::sc_port_base::kind () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Reimplemented from \fBsc_core::sc_object\fP\&.
.PP
Reimplemented in \fBsc_core::sc_fifo_in< T >\fP, \fBsc_core::sc_fifo_out< T >\fP, \fBsc_core::sc_port< IF, N, P >\fP, \fBsc_core::sc_port< bw_interface_type, 1, sc_core::SC_ONE_OR_MORE_BOUND >\fP, \fBsc_core::sc_port< bw_interface_type, N, POL >\fP, \fBsc_core::sc_port< sc_fifo_in_if< T >, 0, SC_ONE_OR_MORE_BOUND >\fP, \fBsc_core::sc_port< sc_fifo_out_if< T >, 0, SC_ONE_OR_MORE_BOUND >\fP, \fBsc_core::sc_port< sc_signal_in_if< bool >, 1, SC_ONE_OR_MORE_BOUND >\fP, \fBsc_core::sc_port< sc_signal_in_if< sc_dt::sc_logic >, 1, SC_ONE_OR_MORE_BOUND >\fP, \fBsc_core::sc_port< sc_signal_in_if< sc_dt::sc_lv >, 1, SC_ONE_OR_MORE_BOUND >\fP, \fBsc_core::sc_port< sc_signal_in_if< sc_dt::sc_lv< W > >, 1, SC_ONE_OR_MORE_BOUND >\fP, \fBsc_core::sc_port< sc_signal_in_if< T >, 1, SC_ONE_OR_MORE_BOUND >\fP, \fBsc_core::sc_port< sc_signal_in_if< typename sc_dt::sc_lv >, 1, SC_ONE_OR_MORE_BOUND >\fP, \fBsc_core::sc_port< sc_signal_inout_if< bool >, 1, SC_ONE_OR_MORE_BOUND >\fP, \fBsc_core::sc_port< sc_signal_inout_if< sc_dt::sc_logic >, 1, SC_ONE_OR_MORE_BOUND >\fP, \fBsc_core::sc_port< sc_signal_inout_if< sc_dt::sc_lv >, 1, SC_ONE_OR_MORE_BOUND >\fP, \fBsc_core::sc_port< sc_signal_inout_if< sc_dt::sc_lv< W > >, 1, SC_ONE_OR_MORE_BOUND >\fP, \fBsc_core::sc_port< sc_signal_inout_if< T >, 1, SC_ONE_OR_MORE_BOUND >\fP, \fBsc_core::sc_port< sc_signal_inout_if< typename sc_dt::sc_lv >, 1, SC_ONE_OR_MORE_BOUND >\fP, \fBsc_core::sc_port< tlm::tlm_master_if< REQ, RSP > >\fP, \fBsc_core::sc_port< tlm::tlm_slave_if< REQ, RSP > >\fP, \fBsc_core::sc_port< tlm::tlm_transport_if< REQ, RSP > >\fP, \fBsc_core::sc_port< tlm_fw_transport_if< tlm::tlm_base_protocol_types >, N, POL >\fP, \fBsc_core::sc_port< tlm_fw_transport_if< tlm_base_protocol_types >, N, POL >\fP, \fBsc_core::sc_port< tlm_fw_transport_if< TYPES >, N, POL >\fP, \fBsc_core::sc_port< tlm_fw_transport_if<>, 1, sc_core::SC_ONE_OR_MORE_BOUND >\fP, \fBsc_core::sc_port< tlm_nonblocking_get_if< T >, 1 >\fP, \fBsc_core::sc_port< tlm_nonblocking_peek_if< T >, 1 >\fP, \fBsc_core::sc_port< tlm_nonblocking_put_if< T >, 1 >\fP, \fBsc_core::sc_in< T >\fP, \fBsc_core::sc_in< sc_dt::sc_lv >\fP, \fBsc_core::sc_in< sc_dt::sc_lv< W > >\fP, \fBsc_core::sc_in< typename sc_dt::sc_lv >\fP, \fBsc_core::sc_in< bool >\fP, \fBsc_core::sc_in< sc_dt::sc_logic >\fP, \fBsc_core::sc_inout< T >\fP, \fBsc_core::sc_inout< bool >\fP, \fBsc_core::sc_inout< sc_dt::sc_lv >\fP, \fBsc_core::sc_inout< sc_dt::sc_lv< W > >\fP, \fBsc_core::sc_inout< typename sc_dt::sc_lv >\fP, \fBsc_core::sc_inout< bool >\fP, \fBsc_core::sc_inout< sc_dt::sc_logic >\fP, \fBsc_core::sc_out< T >\fP, \fBsc_core::sc_out< bool >\fP, \fBsc_core::sc_out< sc_dt::sc_lv >\fP, \fBsc_core::sc_out< typename sc_dt::sc_lv >\fP, \fBsc_core::sc_in_resolved\fP, \fBsc_core::sc_inout_resolved\fP, \fBsc_core::sc_out_resolved\fP, \fBsc_core::sc_in_rv< W >\fP, \fBsc_core::sc_inout_rv< W >\fP, \fBsc_core::sc_out_rv< W >\fP, \fBtlm::tlm_base_initiator_socket< BUSWIDTH, FW_IF, BW_IF, N, POL >\fP, \fBtlm::tlm_base_initiator_socket< 32, tlm_fw_transport_if< tlm_base_protocol_types >, tlm_bw_transport_if< tlm_base_protocol_types >, 1, sc_core::SC_ONE_OR_MORE_BOUND >\fP, \fBtlm::tlm_base_initiator_socket< BUSWIDTH, tlm_fw_transport_if< tlm::tlm_base_protocol_types >, tlm_bw_transport_if< tlm::tlm_base_protocol_types >, N, POL >\fP, \fBtlm::tlm_base_initiator_socket< BUSWIDTH, tlm_fw_transport_if< TYPES >, tlm_bw_transport_if< TYPES >, N, POL >\fP, \fBtlm::tlm_initiator_socket< BUSWIDTH, TYPES, N, POL >\fP, \fBtlm::tlm_initiator_socket< 32, tlm::tlm_base_protocol_types, 0, sc_core::SC_ONE_OR_MORE_BOUND >\fP, \fBtlm::tlm_initiator_socket< BUSWIDTH, tlm::tlm_base_protocol_types, 1, POL >\fP, \fBtlm::tlm_initiator_socket< BUSWIDTH, tlm::tlm_base_protocol_types, 1, sc_core::SC_ONE_OR_MORE_BOUND >\fP, \fBtlm::tlm_initiator_socket< BUSWIDTH, tlm::tlm_base_protocol_types, N, POL >\fP, and \fBtlm::tlm_initiator_socket< BUSWIDTH, TYPES, 1, sc_core::SC_ONE_OR_MORE_BOUND >\fP\&.
.SS "\fBvirtual\fP \fBvoid\fP sc_core::sc_port_base::make_sensitive (\fBsc_method_handle\fP, \fBsc_event_finder\fP * = \fR0\fP) const\fR [protected]\fP, \fR [virtual]\fP"

.PP
Reimplemented in \fBsc_core::sc_port_b< IF >\fP, \fBsc_core::sc_port_b< bw_interface_type >\fP, \fBsc_core::sc_port_b< sc_fifo_in_if< T > >\fP, \fBsc_core::sc_port_b< sc_fifo_out_if< T > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< bool > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< sc_dt::sc_logic > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< sc_dt::sc_lv< W > > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< T > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< typename sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< bool > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< sc_dt::sc_logic > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< sc_dt::sc_lv< W > > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< T > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< typename sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< tlm::tlm_master_if< REQ, RSP > >\fP, \fBsc_core::sc_port_b< tlm::tlm_slave_if< REQ, RSP > >\fP, \fBsc_core::sc_port_b< tlm::tlm_transport_if< REQ, RSP > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if< tlm::tlm_base_protocol_types > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if< tlm_base_protocol_types > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if< TYPES > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if<> >\fP, \fBsc_core::sc_port_b< tlm_nonblocking_get_if< T > >\fP, \fBsc_core::sc_port_b< tlm_nonblocking_peek_if< T > >\fP, and \fBsc_core::sc_port_b< tlm_nonblocking_put_if< T > >\fP\&.
.SS "\fBvirtual\fP \fBvoid\fP sc_core::sc_port_base::make_sensitive (\fBsc_thread_handle\fP, \fBsc_event_finder\fP * = \fR0\fP) const\fR [protected]\fP, \fR [virtual]\fP"

.PP
Reimplemented in \fBsc_core::sc_port_b< IF >\fP, \fBsc_core::sc_port_b< bw_interface_type >\fP, \fBsc_core::sc_port_b< sc_fifo_in_if< T > >\fP, \fBsc_core::sc_port_b< sc_fifo_out_if< T > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< bool > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< sc_dt::sc_logic > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< sc_dt::sc_lv< W > > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< T > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< typename sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< bool > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< sc_dt::sc_logic > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< sc_dt::sc_lv< W > > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< T > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< typename sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< tlm::tlm_master_if< REQ, RSP > >\fP, \fBsc_core::sc_port_b< tlm::tlm_slave_if< REQ, RSP > >\fP, \fBsc_core::sc_port_b< tlm::tlm_transport_if< REQ, RSP > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if< tlm::tlm_base_protocol_types > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if< tlm_base_protocol_types > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if< TYPES > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if<> >\fP, \fBsc_core::sc_port_b< tlm_nonblocking_get_if< T > >\fP, \fBsc_core::sc_port_b< tlm_nonblocking_peek_if< T > >\fP, and \fBsc_core::sc_port_b< tlm_nonblocking_put_if< T > >\fP\&.
.SS "\fBthis_type\fP & sc_core::sc_port_base::operator= (\fBconst\fP \fBthis_type\fP &)\fR [private]\fP"

.SS "int sc_core::sc_port_base::pbind (\fBsc_interface\fP &)\fR [private]\fP"

.SS "int sc_core::sc_port_base::pbind (\fBsc_port_base\fP &)\fR [private]\fP"

.SS "\fBvoid\fP sc_core::sc_port_base::report_error (\fBconst\fP \fBchar\fP * id, \fBconst\fP \fBchar\fP * add_msg = \fR0\fP) const\fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_port_base::simulation_done ()\fR [private]\fP"

.SS "\fBvirtual\fP \fBvoid\fP sc_core::sc_port_base::start_of_simulation ()\fR [protected]\fP, \fR [virtual]\fP"

.SS "\fBvoid\fP sc_core::sc_port_base::start_simulation ()\fR [private]\fP"

.SS "\fBvirtual\fP int sc_core::sc_port_base::vbind (\fBsc_interface\fP &)\fR [protected]\fP, \fR [pure virtual]\fP"

.PP
Implemented in \fBsc_core::sc_port_b< IF >\fP, \fBsc_core::sc_port_b< bw_interface_type >\fP, \fBsc_core::sc_port_b< sc_fifo_in_if< T > >\fP, \fBsc_core::sc_port_b< sc_fifo_out_if< T > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< bool > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< sc_dt::sc_logic > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< sc_dt::sc_lv< W > > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< T > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< typename sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< bool > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< sc_dt::sc_logic > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< sc_dt::sc_lv< W > > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< T > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< typename sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< tlm::tlm_master_if< REQ, RSP > >\fP, \fBsc_core::sc_port_b< tlm::tlm_slave_if< REQ, RSP > >\fP, \fBsc_core::sc_port_b< tlm::tlm_transport_if< REQ, RSP > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if< tlm::tlm_base_protocol_types > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if< tlm_base_protocol_types > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if< TYPES > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if<> >\fP, \fBsc_core::sc_port_b< tlm_nonblocking_get_if< T > >\fP, \fBsc_core::sc_port_b< tlm_nonblocking_peek_if< T > >\fP, \fBsc_core::sc_port_b< tlm_nonblocking_put_if< T > >\fP, \fBsc_core::sc_in< T >\fP, \fBsc_core::sc_in< sc_dt::sc_lv >\fP, \fBsc_core::sc_in< sc_dt::sc_lv< W > >\fP, \fBsc_core::sc_in< typename sc_dt::sc_lv >\fP, \fBsc_core::sc_in< bool >\fP, and \fBsc_core::sc_in< sc_dt::sc_logic >\fP\&.
.SS "\fBvirtual\fP int sc_core::sc_port_base::vbind (\fBsc_port_base\fP &)\fR [protected]\fP, \fR [pure virtual]\fP"

.PP
Implemented in \fBsc_core::sc_port_b< IF >\fP, \fBsc_core::sc_port_b< bw_interface_type >\fP, \fBsc_core::sc_port_b< sc_fifo_in_if< T > >\fP, \fBsc_core::sc_port_b< sc_fifo_out_if< T > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< bool > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< sc_dt::sc_logic > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< sc_dt::sc_lv< W > > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< T > >\fP, \fBsc_core::sc_port_b< sc_signal_in_if< typename sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< bool > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< sc_dt::sc_logic > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< sc_dt::sc_lv< W > > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< T > >\fP, \fBsc_core::sc_port_b< sc_signal_inout_if< typename sc_dt::sc_lv > >\fP, \fBsc_core::sc_port_b< tlm::tlm_master_if< REQ, RSP > >\fP, \fBsc_core::sc_port_b< tlm::tlm_slave_if< REQ, RSP > >\fP, \fBsc_core::sc_port_b< tlm::tlm_transport_if< REQ, RSP > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if< tlm::tlm_base_protocol_types > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if< tlm_base_protocol_types > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if< TYPES > >\fP, \fBsc_core::sc_port_b< tlm_fw_transport_if<> >\fP, \fBsc_core::sc_port_b< tlm_nonblocking_get_if< T > >\fP, \fBsc_core::sc_port_b< tlm_nonblocking_peek_if< T > >\fP, \fBsc_core::sc_port_b< tlm_nonblocking_put_if< T > >\fP, \fBsc_core::sc_in< T >\fP, \fBsc_core::sc_in< sc_dt::sc_lv >\fP, \fBsc_core::sc_in< sc_dt::sc_lv< W > >\fP, \fBsc_core::sc_in< typename sc_dt::sc_lv >\fP, \fBsc_core::sc_in< bool >\fP, and \fBsc_core::sc_in< sc_dt::sc_logic >\fP\&.
.SH "Friends And Related Symbol Documentation"
.PP 
.SS "\fBfriend\fP \fBclass\fP \fBsc_module\fP\fR [friend]\fP"

.SS "\fBfriend\fP \fBclass\fP \fBsc_port_registry\fP\fR [friend]\fP"

.SS "\fBfriend\fP \fBclass\fP \fBsc_sensitive\fP\fR [friend]\fP"

.SS "\fBfriend\fP \fBclass\fP \fBsc_sensitive_neg\fP\fR [friend]\fP"

.SS "\fBfriend\fP \fBclass\fP \fBsc_sensitive_pos\fP\fR [friend]\fP"

.SH "Member Data Documentation"
.PP 
.SS "\fBsc_bind_info\fP* sc_core::sc_port_base::m_bind_info\fR [protected]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for VHDL simulator from the source code\&.
