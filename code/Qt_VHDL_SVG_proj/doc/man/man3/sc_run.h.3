.TH "C:/Users/BJRODIER/Documents/QT_REPO/QT_VHDL_simulator/code/Qt_VHDL_SVG_proj/systemc_modules/sc_run.h" 3 "VHDL simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/BJRODIER/Documents/QT_REPO/QT_VHDL_simulator/code/Qt_VHDL_SVG_proj/systemc_modules/sc_run.h \- SystemC simulation control interface\&.  

.SH SYNOPSIS
.br
.PP
\fR#include <pthread\&.h>\fP
.br
\fR#include <vector>\fP
.br
\fR#include <string>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBsc_thread_run_s\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#\fBdefine\fP \fBSC_ST_COMMAND_RUN\fP   0"
.br
.ti -1c
.RI "#\fBdefine\fP \fBSC_ST_COMMAND_EXIT\fP   1"
.br
.ti -1c
.RI "#\fBdefine\fP \fBSC_ST_RESPONSE_STOP\fP   99"
.br
.ti -1c
.RI "#\fBdefine\fP \fBSC_ST_RESPONSE_FINISHED\fP   100"
.br
.ti -1c
.RI "#\fBdefine\fP \fBSC_ST_RESPONSE_ABORTED\fP   101"
.br
.ti -1c
.RI "#\fBdefine\fP \fBSC_ST_MAXCOMMAND\fP   50"
.br
.ti -1c
.RI "#\fBdefine\fP \fBSC_ST_MINRESPONSE\fP   60"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBstruct\fP \fBsc_thread_run_s\fP \fBsc_thread_run_t\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBint\fP \fBsc_StartTransactionFromUI\fP ()"
.br
.ti -1c
.RI "\fBint\fP \fBsc_EndTransactionFromUI\fP ()"
.br
.ti -1c
.RI "\fBint\fP \fBsc_NewStateFromUI\fP (\fBint\fP \fBnewState\fP=\fBSC_ST_COMMAND_RUN\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBsc_getRunResultFromUI\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBsc_setRunFromUI\fP (\fBsc_thread_run_t\fP *\fBtheRun\fP)"
.br
.ti -1c
.RI "std::vector< std::string > \fBsc_getHierarchyFromUI\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBsc_setTraceListFromUI\fP (std::vector< std::string > &\fBtl\fP)"
.br
.ti -1c
.RI "std::vector< std::string > \fBsc_getReportFromUI\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBsc_NotifyUIFromSC\fP (\fBint\fP \fBnewState\fP=\fBSC_ST_RESPONSE_STOP\fP)"
.br
.ti -1c
.RI "\fBint\fP \fBsc_waitStateChange\fP (\fBvoid\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBsc_setRunResult\fP (\fBint\fP \fBtheResult\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBsc_setReportFromSC\fP (std::vector< std::string > &\fBrep\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBsc_setHierarchyFromSC\fP (std::vector< std::string > &\fBhier\fP)"
.br
.in -1c
.SH "Detailed Description"
.PP 
SystemC simulation control interface\&. 

This file contains the SystemC simulation control interface\&.
.PP
The interface provides a way to control the simulation execution from a separate thread\&. The simulation control interface is used to start and stop the simulation, and to get the simulation results\&.
.PP
The interface is implemented using a SystemC thread that waits for commands from a separate thread\&. The SystemC thread is controlled by the simulation control interface functions\&. 
.SH "Macro Definition Documentation"
.PP 
.SS "#\fBdefine\fP SC_ST_COMMAND_EXIT   1"

.SS "#\fBdefine\fP SC_ST_COMMAND_RUN   0"

.SS "#\fBdefine\fP SC_ST_MAXCOMMAND   50"

.SS "#\fBdefine\fP SC_ST_MINRESPONSE   60"

.SS "#\fBdefine\fP SC_ST_RESPONSE_ABORTED   101"

.SS "#\fBdefine\fP SC_ST_RESPONSE_FINISHED   100"

.SS "#\fBdefine\fP SC_ST_RESPONSE_STOP   99"

.SH "Typedef Documentation"
.PP 
.SS "\fBtypedef\fP \fBstruct\fP \fBsc_thread_run_s\fP \fBsc_thread_run_t\fP"

.SH "Function Documentation"
.PP 
.SS "\fBint\fP sc_EndTransactionFromUI ()"

.SS "std::vector< std::string > sc_getHierarchyFromUI ()"

.SS "std::vector< std::string > sc_getReportFromUI ()"

.SS "\fBint\fP sc_getRunResultFromUI (\fBvoid\fP)"

.SS "\fBint\fP sc_NewStateFromUI (\fBint\fP newState = \fR\fBSC_ST_COMMAND_RUN\fP\fP)"

.SS "\fBvoid\fP sc_NotifyUIFromSC (\fBint\fP newState = \fR\fBSC_ST_RESPONSE_STOP\fP\fP)"

.SS "\fBvoid\fP sc_setHierarchyFromSC (std::vector< std::string > & hier)"

.SS "\fBvoid\fP sc_setReportFromSC (std::vector< std::string > & rep)"

.SS "\fBvoid\fP sc_setRunFromUI (\fBsc_thread_run_t\fP * theRun)"

.SS "\fBvoid\fP sc_setRunResult (\fBint\fP theResult)"

.SS "\fBvoid\fP sc_setTraceListFromUI (std::vector< std::string > & tl)"

.SS "\fBint\fP sc_StartTransactionFromUI ()"

.SS "\fBint\fP sc_waitStateChange (\fBvoid\fP)"

.SH "Author"
.PP 
Generated automatically by Doxygen for VHDL simulator from the source code\&.
