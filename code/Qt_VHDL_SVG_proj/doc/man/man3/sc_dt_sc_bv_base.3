.TH "sc_dt::sc_bv_base" 3 "VHDL simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sc_dt::sc_bv_base
.SH SYNOPSIS
.br
.PP
.PP
\fR#include <sc_bv_base\&.h>\fP
.PP
Inherits \fBsc_dt::sc_proxy< sc_bv_base >\fP\&.
.PP
Inherited by \fBsc_dt::sc_bv< W >\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBsc_proxy\fP< \fBsc_bv_base\fP > \fBbase_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP base_type::value_type \fBvalue_type\fP"
.br
.in -1c

Public Types inherited from \fBsc_dt::sc_proxy< sc_bv_base >\fP
.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBsc_proxy_traits\fP< \fBsc_bv_base\fP >::traits_type \fBtraits_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP traits_type::bit_type \fBbit_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP traits_type::value_type \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBsc_bv_base\fP (int \fBlength_\fP=\fBsc_length_param\fP()\&.len())"
.br
.ti -1c
.RI "\fBsc_bv_base\fP (\fBbool\fP \fBa\fP, int \fBlength_\fP=\fBsc_length_param\fP()\&.len())"
.br
.ti -1c
.RI "\fBsc_bv_base\fP (\fBconst\fP \fBchar\fP *\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP (\fBconst\fP \fBchar\fP *\fBa\fP, int \fBlength_\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBsc_bv_base\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP (\fBconst\fP \fBsc_bv_base\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fB~sc_bv_base\fP ()"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBsc_bv_base\fP & \fBoperator=\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator=\fP (\fBconst\fP \fBsc_bv_base\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator=\fP (\fBconst\fP \fBchar\fP *\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator=\fP (\fBconst\fP \fBbool\fP *\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator=\fP (\fBconst\fP \fBsc_logic\fP *\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator=\fP (\fBconst\fP \fBsc_unsigned\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator=\fP (\fBconst\fP \fBsc_signed\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator=\fP (\fBconst\fP \fBsc_uint_base\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator=\fP (\fBconst\fP \fBsc_int_base\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator=\fP (\fBunsigned\fP \fBlong\fP \fBa\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator=\fP (\fBlong\fP \fBa\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator=\fP (\fBunsigned\fP int \fBa\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator=\fP (int \fBa\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator=\fP (\fBuint64\fP \fBa\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator=\fP (\fBint64\fP \fBa\fP)"
.br
.ti -1c
.RI "int \fBlength\fP () \fBconst\fP"
.br
.ti -1c
.RI "int \fBsize\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvalue_type\fP \fBget_bit\fP (int \fBi\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBset_bit\fP (int \fBi\fP, \fBvalue_type\fP \fBvalue\fP)"
.br
.ti -1c
.RI "\fBsc_digit\fP \fBget_word\fP (int \fBi\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBset_word\fP (int \fBi\fP, \fBsc_digit\fP \fBw\fP)"
.br
.ti -1c
.RI "\fBsc_digit\fP \fBget_cword\fP (int) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBset_cword\fP (int \fBi\fP, \fBsc_digit\fP \fBw\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBclean_tail\fP ()"
.br
.ti -1c
.RI "\fBbool\fP \fBis_01\fP () \fBconst\fP"
.br
.in -1c

Public Member Functions inherited from \fBsc_dt::sc_proxy< sc_bv_base >\fP
.in +1c
.ti -1c
.RI "\fBvirtual\fP \fB~sc_proxy\fP ()"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBback_cast\fP ()"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_bv_base\fP & \fBback_cast\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBassign_\fP (\fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBassign_\fP (\fBconst\fP \fBchar\fP *\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBassign_\fP (\fBconst\fP \fBbool\fP *\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBassign_\fP (\fBconst\fP \fBsc_logic\fP *\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBassign_\fP (\fBconst\fP \fBsc_unsigned\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBassign_\fP (\fBconst\fP \fBsc_signed\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBassign_\fP (\fBconst\fP \fBsc_uint_base\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBassign_\fP (\fBconst\fP \fBsc_int_base\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBassign_\fP (\fBunsigned\fP int \fBa\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBassign_\fP (int \fBa\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBassign_\fP (\fBunsigned\fP \fBlong\fP \fBa\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBassign_\fP (\fBlong\fP \fBa\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBassign_\fP (\fBuint64\fP \fBa\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBassign_\fP (\fBint64\fP \fBa\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBb_not\fP ()"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator~\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator&=\fP (\fBconst\fP \fBchar\fP *b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator&=\fP (\fBconst\fP \fBbool\fP *b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator&=\fP (\fBconst\fP \fBsc_logic\fP *b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator&=\fP (\fBconst\fP \fBsc_unsigned\fP &b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator&=\fP (\fBconst\fP \fBsc_signed\fP &b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator&=\fP (\fBconst\fP \fBsc_uint_base\fP &b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator&=\fP (\fBconst\fP \fBsc_int_base\fP &b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator&=\fP (\fBunsigned\fP \fBlong\fP b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator&=\fP (\fBlong\fP b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator&=\fP (\fBunsigned\fP int b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator&=\fP (int b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator&=\fP (\fBuint64\fP b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator&=\fP (\fBint64\fP b)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBconst\fP \fBchar\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBconst\fP \fBbool\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBconst\fP \fBsc_logic\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBconst\fP \fBsc_unsigned\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBconst\fP \fBsc_signed\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBconst\fP \fBsc_uint_base\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBconst\fP \fBsc_int_base\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBunsigned\fP \fBlong\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBlong\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBunsigned\fP int b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (int b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBuint64\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBint64\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator|=\fP (\fBconst\fP \fBchar\fP *b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator|=\fP (\fBconst\fP \fBbool\fP *b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator|=\fP (\fBconst\fP \fBsc_logic\fP *b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator|=\fP (\fBconst\fP \fBsc_unsigned\fP &b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator|=\fP (\fBconst\fP \fBsc_signed\fP &b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator|=\fP (\fBconst\fP \fBsc_uint_base\fP &b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator|=\fP (\fBconst\fP \fBsc_int_base\fP &b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator|=\fP (\fBunsigned\fP \fBlong\fP b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator|=\fP (\fBlong\fP b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator|=\fP (\fBunsigned\fP int b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator|=\fP (int b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator|=\fP (\fBuint64\fP b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator|=\fP (\fBint64\fP b)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBconst\fP \fBchar\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBconst\fP \fBbool\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBconst\fP \fBsc_logic\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBconst\fP \fBsc_unsigned\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBconst\fP \fBsc_signed\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBconst\fP \fBsc_uint_base\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBconst\fP \fBsc_int_base\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBunsigned\fP \fBlong\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBlong\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBunsigned\fP int b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (int b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBuint64\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBint64\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator^=\fP (\fBconst\fP \fBchar\fP *b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator^=\fP (\fBconst\fP \fBbool\fP *b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator^=\fP (\fBconst\fP \fBsc_logic\fP *b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator^=\fP (\fBconst\fP \fBsc_unsigned\fP &b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator^=\fP (\fBconst\fP \fBsc_signed\fP &b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator^=\fP (\fBconst\fP \fBsc_uint_base\fP &b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator^=\fP (\fBconst\fP \fBsc_int_base\fP &b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator^=\fP (\fBunsigned\fP \fBlong\fP b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator^=\fP (\fBlong\fP b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator^=\fP (\fBunsigned\fP int b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator^=\fP (int b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator^=\fP (\fBuint64\fP b)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator^=\fP (\fBint64\fP b)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBconst\fP \fBchar\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBconst\fP \fBbool\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBconst\fP \fBsc_logic\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBconst\fP \fBsc_unsigned\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBconst\fP \fBsc_signed\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBconst\fP \fBsc_uint_base\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBconst\fP \fBsc_int_base\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBunsigned\fP \fBlong\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBlong\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBunsigned\fP int b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (int b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBuint64\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBint64\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator<<=\fP (int \fBn\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator<<\fP (int \fBn\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBoperator>>=\fP (int \fBn\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator>>\fP (int \fBn\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBlrotate\fP (int \fBn\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBrrotate\fP (int \fBn\fP)"
.br
.ti -1c
.RI "\fBsc_bv_base\fP & \fBreverse\fP ()"
.br
.ti -1c
.RI "\fBsc_bitref\fP< \fBsc_bv_base\fP > \fBoperator[]\fP (int \fBi\fP)"
.br
.ti -1c
.RI "\fBsc_bitref_r\fP< \fBsc_bv_base\fP > \fBoperator[]\fP (int \fBi\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_bitref\fP< \fBsc_bv_base\fP > \fBbit\fP (int \fBi\fP)"
.br
.ti -1c
.RI "\fBsc_bitref_r\fP< \fBsc_bv_base\fP > \fBbit\fP (int \fBi\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_subref\fP< \fBsc_bv_base\fP > \fBoperator()\fP (int \fBhi\fP, int \fBlo\fP)"
.br
.ti -1c
.RI "\fBsc_subref_r\fP< \fBsc_bv_base\fP > \fBoperator()\fP (int \fBhi\fP, int \fBlo\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_subref\fP< \fBsc_bv_base\fP > \fBrange\fP (int \fBhi\fP, int \fBlo\fP)"
.br
.ti -1c
.RI "\fBsc_subref_r\fP< \fBsc_bv_base\fP > \fBrange\fP (int \fBhi\fP, int \fBlo\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBvalue_type\fP \fBand_reduce\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvalue_type\fP \fBnand_reduce\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvalue_type\fP \fBor_reduce\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvalue_type\fP \fBnor_reduce\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvalue_type\fP \fBxor_reduce\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvalue_type\fP \fBxnor_reduce\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBchar\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBbool\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_logic\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_unsigned\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_signed\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_uint_base\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_int_base\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBunsigned\fP \fBlong\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBlong\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBunsigned\fP int b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (int b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBuint64\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBint64\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP (\fBsc_numrep\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP (\fBsc_numrep\fP, \fBbool\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBint64\fP \fBto_int64\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBuint64\fP \fBto_uint64\fP () \fBconst\fP"
.br
.ti -1c
.RI "int \fBto_int\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBunsigned\fP int \fBto_uint\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBlong\fP \fBto_long\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBunsigned\fP \fBlong\fP \fBto_ulong\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBprint\fP (::std::ostream &\fBos\fP=::std::cout) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBscan\fP (::std::istream &\fBis\fP=::std::cin)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "int \fBm_len\fP"
.br
.ti -1c
.RI "int \fBm_size\fP"
.br
.ti -1c
.RI "\fBsc_digit\fP * \fBm_data\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBvoid\fP \fBinit\fP (int \fBlength_\fP, \fBbool\fP \fBinit_value\fP=\fBfalse\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBassign_from_string\fP (\fBconst\fP std::string &)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "\fBclass\fP \fBsc_lv_base\fP"
.br
.in -1c
.SS "Additional Inherited Members"


Protected Member Functions inherited from \fBsc_dt::sc_proxy< sc_bv_base >\fP
.in +1c
.ti -1c
.RI "\fBvoid\fP \fBcheck_bounds\fP (int \fBn\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBcheck_wbounds\fP (int \fBn\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_digit\fP \fBto_anything_unsigned\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBint64\fP \fBto_anything_signed\fP () \fBconst\fP"
.br
.in -1c
.SH "Member Typedef Documentation"
.PP 
.SS "\fBtypedef\fP \fBsc_proxy\fP<\fBsc_bv_base\fP> \fBsc_dt::sc_bv_base::base_type\fP"

.SS "\fBtypedef\fP base_type::value_type \fBsc_dt::sc_bv_base::value_type\fP"

.SH "Constructor & Destructor Documentation"
.PP 
.SS "sc_dt::sc_bv_base::sc_bv_base (int length_ = \fR\fBsc_length_param\fP()\&.len()\fP)\fR [inline]\fP, \fR [explicit]\fP"

.SS "sc_dt::sc_bv_base::sc_bv_base (\fBbool\fP a, int length_ = \fR\fBsc_length_param\fP()\&.len()\fP)\fR [inline]\fP, \fR [explicit]\fP"

.SS "sc_dt::sc_bv_base::sc_bv_base (\fBconst\fP \fBchar\fP * a)"

.SS "sc_dt::sc_bv_base::sc_bv_base (\fBconst\fP \fBchar\fP * a, int length_)"

.SS "template<\fBclass\fP X > sc_dt::sc_bv_base::sc_bv_base (\fBconst\fP \fBsc_proxy\fP< X > & a)\fR [inline]\fP"

.SS "sc_dt::sc_bv_base::sc_bv_base (\fBconst\fP \fBsc_bv_base\fP & a)"

.SS "\fBvirtual\fP sc_dt::sc_bv_base::~sc_bv_base ()\fR [inline]\fP, \fR [virtual]\fP"

.SH "Member Function Documentation"
.PP 
.SS "\fBvoid\fP sc_dt::sc_bv_base::assign_from_string (\fBconst\fP std::string &)\fR [private]\fP"

.SS "\fBvoid\fP sc_dt::sc_bv_base::clean_tail ()\fR [inline]\fP"

.SS "\fBsc_bv_base::value_type\fP sc_dt::sc_bv_base::get_bit (int i) const\fR [inline]\fP"

.SS "\fBsc_digit\fP sc_dt::sc_bv_base::get_cword (int) const\fR [inline]\fP"

.SS "\fBsc_digit\fP sc_dt::sc_bv_base::get_word (int i) const\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::sc_bv_base::init (int length_, \fBbool\fP init_value = \fR\fBfalse\fP\fP)\fR [private]\fP"

.SS "\fBbool\fP sc_dt::sc_bv_base::is_01 () const\fR [inline]\fP"

.SS "int sc_dt::sc_bv_base::length () const\fR [inline]\fP"

.SS "\fBsc_bv_base\fP & sc_dt::sc_bv_base::operator= (\fBconst\fP \fBbool\fP * a)\fR [inline]\fP"

.SS "\fBsc_bv_base\fP & sc_dt::sc_bv_base::operator= (\fBconst\fP \fBchar\fP * a)"

.SS "\fBsc_bv_base\fP & sc_dt::sc_bv_base::operator= (\fBconst\fP \fBsc_bv_base\fP & a)\fR [inline]\fP"

.SS "\fBsc_bv_base\fP & sc_dt::sc_bv_base::operator= (\fBconst\fP \fBsc_int_base\fP & a)\fR [inline]\fP"

.SS "\fBsc_bv_base\fP & sc_dt::sc_bv_base::operator= (\fBconst\fP \fBsc_logic\fP * a)\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBsc_bv_base\fP & sc_dt::sc_bv_base::operator= (\fBconst\fP \fBsc_proxy\fP< X > & a)\fR [inline]\fP"

.SS "\fBsc_bv_base\fP & sc_dt::sc_bv_base::operator= (\fBconst\fP \fBsc_signed\fP & a)\fR [inline]\fP"

.SS "\fBsc_bv_base\fP & sc_dt::sc_bv_base::operator= (\fBconst\fP \fBsc_uint_base\fP & a)\fR [inline]\fP"

.SS "\fBsc_bv_base\fP & sc_dt::sc_bv_base::operator= (\fBconst\fP \fBsc_unsigned\fP & a)\fR [inline]\fP"

.SS "\fBsc_bv_base\fP & sc_dt::sc_bv_base::operator= (int a)\fR [inline]\fP"

.SS "\fBsc_bv_base\fP & sc_dt::sc_bv_base::operator= (\fBint64\fP a)\fR [inline]\fP"

.SS "\fBsc_bv_base\fP & sc_dt::sc_bv_base::operator= (\fBlong\fP a)\fR [inline]\fP"

.SS "\fBsc_bv_base\fP & sc_dt::sc_bv_base::operator= (\fBuint64\fP a)\fR [inline]\fP"

.SS "\fBsc_bv_base\fP & sc_dt::sc_bv_base::operator= (\fBunsigned\fP int a)\fR [inline]\fP"

.SS "\fBsc_bv_base\fP & sc_dt::sc_bv_base::operator= (\fBunsigned\fP \fBlong\fP a)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::sc_bv_base::set_bit (int i, \fBvalue_type\fP value)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::sc_bv_base::set_cword (int i, \fBsc_digit\fP w)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::sc_bv_base::set_word (int i, \fBsc_digit\fP w)\fR [inline]\fP"

.SS "int sc_dt::sc_bv_base::size () const\fR [inline]\fP"

.SH "Friends And Related Symbol Documentation"
.PP 
.SS "\fBfriend\fP \fBclass\fP \fBsc_lv_base\fP\fR [friend]\fP"

.SH "Member Data Documentation"
.PP 
.SS "\fBsc_digit\fP* sc_dt::sc_bv_base::m_data\fR [protected]\fP"

.SS "int sc_dt::sc_bv_base::m_len\fR [protected]\fP"

.SS "int sc_dt::sc_bv_base::m_size\fR [protected]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for VHDL simulator from the source code\&.
