.TH "SyscFlexInt< CLKEDGE, FLEXINT >" 3 "VHDL simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SyscFlexInt< CLKEDGE, FLEXINT >
.SH SYNOPSIS
.br
.PP
.PP
\fR#include <sc_flexint\&.h>\fP
.PP
Inherits sc_core::sc_module\&.
.PP
Inherited by \fBSyscCnt< W, CLKEDGE, FLEXINT >\fP, and \fBSyscReg< W, CLKEDGE, FLEXINT >\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBsc_lv\fP< 1 > \fBrst_t\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBsc_lv\fP< 1 > \fBena_t\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBSyscFlexInt\fP< \fBCLKEDGE\fP, \fBFLEXINT\fP > \fBSC_CURRENT_USER_MODULE\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSyscFlexInt\fP (::sc_core::sc_module_name name)"
.br
.ti -1c
.RI "\fBvoid\fP \fBdoSensitive\fP ()"
.br
.ti -1c
.RI "\fBbool\fP \fBbResetAction\fP ()"
.br
.ti -1c
.RI "\fBbool\fP \fBbEnableAction\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBbefore_end_of_elaboration\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBflexintDecode\fP (\fBconst\fP \fBuint8_t\fP \fBf\fP, \fBbool\fP *\fBuse\fP, \fBbool\fP *level)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBsc_in_clk\fP \fBclock\fP {'clock'}"
.br
.ti -1c
.RI "\fBsc_in\fP< \fBrst_t\fP > \fBreset\fP {'reset'}"
.br
.ti -1c
.RI "\fBsc_in\fP< \fBena_t\fP > \fBenable\fP {'enable'}"
.br
.ti -1c
.RI "\fBsc_signal\fP< \fBrst_t\fP > \fBrst_defbind\fP {'IGNORErst'}"
.br
.ti -1c
.RI "\fBsc_signal\fP< \fBena_t\fP > \fBena_defbind\fP {'IGNOREena'}"
.br
.ti -1c
.RI "\fBbool\fP \fBuse_rst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBrst_level\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBuse_ena\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBena_level\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<\fBbool\fP CLKEDGE = DEFAULT_CLKEDGE, \fBflexinterface_t\fP FLEXINT = DEFAULT_FLEXINT>
.br
class SyscFlexInt< CLKEDGE, FLEXINT >"code used in sc_counter but commented out before here TOFIX #define SC_FLEXINT_MODULE(user_module_name) \\ template <bool CLKEDGE = DEFAULT_CLKEDGE, flexinterface_t FLEXINT = DEFAULT_FLEXINT>> \\ class user_module_name : public SyscFlexInt<CLKEDGE, FLEXINT>
.PP
#define SC_FLEXINT_MODULE_T(user_module_name,additional_template) \\ template <additional_template, bool CLKEDGE = DEFAULT_CLKEDGE, flexinterface_t FLEXINT = DEFAULT_FLEXINT> \\ class user_module_name : public SyscFlexInt<CLKEDGE, FLEXINT> 
.SH "Member Typedef Documentation"
.PP 
.SS "template<\fBbool\fP CLKEDGE = DEFAULT_CLKEDGE, \fBflexinterface_t\fP FLEXINT = DEFAULT_FLEXINT> \fBtypedef\fP \fBsc_lv\fP<1> \fBSyscFlexInt\fP< \fBCLKEDGE\fP, \fBFLEXINT\fP >::ena_t"

.SS "template<\fBbool\fP CLKEDGE = DEFAULT_CLKEDGE, \fBflexinterface_t\fP FLEXINT = DEFAULT_FLEXINT> \fBtypedef\fP \fBsc_lv\fP<1> \fBSyscFlexInt\fP< \fBCLKEDGE\fP, \fBFLEXINT\fP >::rst_t"

.SS "template<\fBbool\fP CLKEDGE = DEFAULT_CLKEDGE, \fBflexinterface_t\fP FLEXINT = DEFAULT_FLEXINT> \fBtypedef\fP \fBSyscFlexInt\fP<\fBCLKEDGE\fP, \fBFLEXINT\fP> \fBSyscFlexInt\fP< \fBCLKEDGE\fP, \fBFLEXINT\fP >::SC_CURRENT_USER_MODULE"

.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<\fBbool\fP CLKEDGE = DEFAULT_CLKEDGE, \fBflexinterface_t\fP FLEXINT = DEFAULT_FLEXINT> \fBSyscFlexInt\fP< \fBCLKEDGE\fP, \fBFLEXINT\fP >\fB::SyscFlexInt\fP (::sc_core::sc_module_name name)\fR [inline]\fP"

.SH "Member Function Documentation"
.PP 
.SS "template<\fBbool\fP CLKEDGE = DEFAULT_CLKEDGE, \fBflexinterface_t\fP FLEXINT = DEFAULT_FLEXINT> \fBvoid\fP \fBSyscFlexInt\fP< \fBCLKEDGE\fP, \fBFLEXINT\fP >::before_end_of_elaboration ()\fR [inline]\fP"

.SS "template<\fBbool\fP CLKEDGE = DEFAULT_CLKEDGE, \fBflexinterface_t\fP FLEXINT = DEFAULT_FLEXINT> \fBbool\fP \fBSyscFlexInt\fP< \fBCLKEDGE\fP, \fBFLEXINT\fP >::bEnableAction ()\fR [inline]\fP"

.SS "template<\fBbool\fP CLKEDGE = DEFAULT_CLKEDGE, \fBflexinterface_t\fP FLEXINT = DEFAULT_FLEXINT> \fBbool\fP \fBSyscFlexInt\fP< \fBCLKEDGE\fP, \fBFLEXINT\fP >::bResetAction ()\fR [inline]\fP"

.SS "template<\fBbool\fP CLKEDGE = DEFAULT_CLKEDGE, \fBflexinterface_t\fP FLEXINT = DEFAULT_FLEXINT> \fBvoid\fP \fBSyscFlexInt\fP< \fBCLKEDGE\fP, \fBFLEXINT\fP >::doSensitive ()\fR [inline]\fP"

.SS "template<\fBbool\fP CLKEDGE = DEFAULT_CLKEDGE, \fBflexinterface_t\fP FLEXINT = DEFAULT_FLEXINT> \fBvoid\fP \fBSyscFlexInt\fP< \fBCLKEDGE\fP, \fBFLEXINT\fP >::flexintDecode (\fBconst\fP \fBuint8_t\fP f, \fBbool\fP * use, \fBbool\fP * level)\fR [inline]\fP"

.SH "Member Data Documentation"
.PP 
.SS "template<\fBbool\fP CLKEDGE = DEFAULT_CLKEDGE, \fBflexinterface_t\fP FLEXINT = DEFAULT_FLEXINT> \fBsc_in_clk\fP \fBSyscFlexInt\fP< \fBCLKEDGE\fP, \fBFLEXINT\fP >::clock {'clock'}"

.SS "template<\fBbool\fP CLKEDGE = DEFAULT_CLKEDGE, \fBflexinterface_t\fP FLEXINT = DEFAULT_FLEXINT> \fBsc_signal\fP<\fBena_t\fP> \fBSyscFlexInt\fP< \fBCLKEDGE\fP, \fBFLEXINT\fP >::ena_defbind {'IGNOREena'}"

.SS "template<\fBbool\fP CLKEDGE = DEFAULT_CLKEDGE, \fBflexinterface_t\fP FLEXINT = DEFAULT_FLEXINT> \fBbool\fP \fBSyscFlexInt\fP< \fBCLKEDGE\fP, \fBFLEXINT\fP >::ena_level"

.SS "template<\fBbool\fP CLKEDGE = DEFAULT_CLKEDGE, \fBflexinterface_t\fP FLEXINT = DEFAULT_FLEXINT> \fBsc_in\fP<\fBena_t\fP> \fBSyscFlexInt\fP< \fBCLKEDGE\fP, \fBFLEXINT\fP >::enable {'enable'}"

.SS "template<\fBbool\fP CLKEDGE = DEFAULT_CLKEDGE, \fBflexinterface_t\fP FLEXINT = DEFAULT_FLEXINT> \fBsc_in\fP<\fBrst_t\fP> \fBSyscFlexInt\fP< \fBCLKEDGE\fP, \fBFLEXINT\fP >::reset {'reset'}"

.SS "template<\fBbool\fP CLKEDGE = DEFAULT_CLKEDGE, \fBflexinterface_t\fP FLEXINT = DEFAULT_FLEXINT> \fBsc_signal\fP<\fBrst_t\fP> \fBSyscFlexInt\fP< \fBCLKEDGE\fP, \fBFLEXINT\fP >::rst_defbind {'IGNORErst'}"

.SS "template<\fBbool\fP CLKEDGE = DEFAULT_CLKEDGE, \fBflexinterface_t\fP FLEXINT = DEFAULT_FLEXINT> \fBbool\fP \fBSyscFlexInt\fP< \fBCLKEDGE\fP, \fBFLEXINT\fP >::rst_level"

.SS "template<\fBbool\fP CLKEDGE = DEFAULT_CLKEDGE, \fBflexinterface_t\fP FLEXINT = DEFAULT_FLEXINT> \fBbool\fP \fBSyscFlexInt\fP< \fBCLKEDGE\fP, \fBFLEXINT\fP >::use_ena"

.SS "template<\fBbool\fP CLKEDGE = DEFAULT_CLKEDGE, \fBflexinterface_t\fP FLEXINT = DEFAULT_FLEXINT> \fBbool\fP \fBSyscFlexInt\fP< \fBCLKEDGE\fP, \fBFLEXINT\fP >::use_rst"


.SH "Author"
.PP 
Generated automatically by Doxygen for VHDL simulator from the source code\&.
