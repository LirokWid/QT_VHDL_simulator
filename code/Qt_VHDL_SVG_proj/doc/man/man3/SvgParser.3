.TH "SvgParser" 3 "VHDL simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SvgParser \- The \fBSvgParser\fP class\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <SvgParser\&.h>\fP
.PP
Inherited by \fBSystemcLinker\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBs_io\fP"
.br
.RI "Struct for storing input/output information\&. "
.ti -1c
.RI "struct \fBs_tree_node\fP"
.br
.RI "Struct for representing tree nodes\&. "
.ti -1c
.RI "struct \fBs_tree_node_info\fP"
.br
.RI "Struct for storing tree node information\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSvgParser\fP (\fBQString\fP \fBsvg_file\fP)"
.br
.RI "\fBSvgParser\fP constructor\&. "
.ti -1c
.RI "\fB~SvgParser\fP ()"
.br
.RI "\fBSvgParser\fP destructor\&. "
.ti -1c
.RI "\fBconst\fP \fBs_components_list\fP & \fBget_components_list\fP () \fBconst\fP"
.br
.in -1c
.SS "Protected Types"

.in +1c
.ti -1c
.RI "enum \fBe_types\fP { \fBlabel\fP, \fBtype\fP, \fBgraphic\fP, \fBinput\fP, \fBoutput\fP, \fBinputs\fP, \fBoutputs\fP, \fBsel\fP, \fBwire\fP }"
.br
.RI "Enumeration for the names of the type attribute\&. "
.ti -1c
.RI "enum \fBe_returns\fP { \fBSUCCESS\fP, \fBFILE_NOT_FOUND\fP, \fBINVALID_ARGUMENT\fP }"
.br
.RI "Enumeration for return codes\&. "
.ti -1c
.RI "enum \fBe_states\fP { \fBTO_BE_FOUND\fP }"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBint\fP \fBgroups_number\fP"
.br
.RI "Number of groups\&. "
.ti -1c
.RI "\fBs_tree_node\fP \fBroot\fP"
.br
.RI "Root node of the tree\&. "
.ti -1c
.RI "\fBs_components_list\fP \fBall_components\fP"
.br
.RI "All components private variable\&. "
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBQString\fP \fBattr\fP (\fBe_types\fP \fBtype\fP)"
.br
.RI "Get the attribute name for a given type\&. "
.ti -1c
.RI "\fBQString\fP \fBattr_name_for_str\fP (\fBQString\fP \fBattr\fP)"
.br
.RI "Get the attribute name for a given string\&. "
.ti -1c
.RI "\fBvoid\fP \fBparse_one_element\fP (\fBconst\fP \fBQDomElement\fP \fBsvg_group_xml\fP, \fBs_elements\fP &elements)"
.br
.RI "parse one group element containing a component\&. "
.ti -1c
.RI "\fBvoid\fP \fBparse_element\fP (\fBs_tree_node\fP &\fBnode\fP)"
.br
.RI "Parse an element from an xml group tag: It can ether parse a <svg> or a <g> tag\&. "
.ti -1c
.RI "\fBvoid\fP \fBlist_attributes\fP (\fBconst\fP \fBQList\fP< \fBQDomElement\fP > &elements)"
.br
.RI "List attributes\&. "
.ti -1c
.RI "\fBvoid\fP \fBparse_svg\fP (\fBQString\fP \fBsvg_file\fP)"
.br
.RI "Parse SVG file\&. "
.ti -1c
.RI "\fBvoid\fP \fBparse_by_group\fP (\fBconst\fP \fBQDomNode\fP &\fBnode\fP, \fBs_tree_node\fP &\fBparentNode\fP, \fBint\fP level)"
.br
.RI "Parse by group\&. "
.ti -1c
.RI "\fBvoid\fP \fBget_group_header\fP (\fBconst\fP \fBQDomElement\fP &element, \fBs_tree_node_info\fP &\fBinfo\fP)"
.br
.RI "Get group header\&. "
.ti -1c
.RI "\fBvoid\fP \fBgenerate_tree\fP (\fBconst\fP \fBs_tree_node\fP &\fBnode\fP, \fBconst\fP \fBQString\fP &\fBprefix\fP)"
.br
.RI "Generate tree\&. "
.ti -1c
.RI "\fBvoid\fP \fBprint_tree_in_log\fP (\fBQString\fP \fBlog_buffer\fP)"
.br
.RI "Print tree in log\&. "
.ti -1c
.RI "\fBvoid\fP \fBparse_components\fP (\fBs_tree_node\fP &\fBnode\fP)"
.br
.RI "Parse links\&. "
.ti -1c
.RI "\fBvoid\fP \fBparse_simulation_IOs\fP (\fBconst\fP \fBQDomElement\fP \fBsvg_group_xml\fP, \fBs_sim_I_Os\fP &\fBparsed_IOs\fP)"
.br
.RI "Parse simulation IO\&. "
.ti -1c
.RI "\fBint\fP \fBget_list_of_outputs_name_and_width\fP (\fBQString\fP \fBoutputs_string\fP, \fBQList\fP< \fBs_element_io\fP > &\fBoutputs_list\fP)"
.br
.RI "Get a list of outputs name, width for sim:outputs attributes\&. "
.ti -1c
.RI "\fBint\fP \fBget_list_of_inputs_name_and_width\fP (\fBQString\fP \fBoutputs_string\fP, \fBQList\fP< \fBs_element_io\fP > &\fBinputs_list\fP)"
.br
.RI "Get a list of outputs name, width for sim:outputs attributes\&. "
.ti -1c
.RI "\fBbool\fP \fBcheck_and_get_attr\fP (\fBconst\fP \fBQDomElement\fP &\fBxml\fP, \fBQString\fP &\fBstr_to_get\fP, \fBQString\fP \fBattr_name\fP)"
.br
.RI "Get attribute value if it exist\&. "
.ti -1c
.RI "\fBvoid\fP \fBparse_simulation_wires\fP (\fBconst\fP \fBQDomElement\fP \fBsvg_group_xml\fP, \fBs_sim_wires\fP &\fBparsed_wires\fP)"
.br
.RI "Parse simulation wires\&. "
.ti -1c
.RI "\fBvoid\fP \fBlist_matching_attr_with_value\fP (\fBconst\fP \fBQDomElement\fP \fBelem_to_look_into\fP, \fBconst\fP \fBQString\fP \fBattr_name\fP, \fBconst\fP \fBQString\fP \fBattr_value\fP, \fBQList\fP< \fBQDomElement\fP > &\fBfound_elements\fP)"
.br
.RI "Find elements with attribute\&. "
.ti -1c
.RI "\fBvoid\fP \fBadd_error_message\fP (\fBs_parse_error\fP &error, \fBconst\fP \fBQString\fP &\fBerrorMessage\fP)"
.br
.RI "Attach an error message to a structure\&. "
.ti -1c
.RI "\fBint\fP \fBlist_matching_attr\fP (\fBconst\fP \fBQDomElement\fP \fBelem_to_look_into\fP, \fBconst\fP \fBQString\fP \fBattr_name\fP, \fBQList\fP< \fBQDomElement\fP > &\fBfound_elements\fP)"
.br
.RI "list_matching_attr "
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBQString\fP \fBsvg_file\fP"
.br
.RI "File name of the SVG file\&. "
.ti -1c
.RI "\fBconst\fP \fBQString\fP \fBcustom_attribute\fP = \fBCUSTOM_ATTRIBUTE\fP"
.br
.RI "Custom attribute prefix\&. "
.ti -1c
.RI "\fBDebugWindow\fP * \fBdebug\fP"
.br
.ti -1c
.RI "\fBQString\fP \fBlog_buffer\fP"
.br
.RI "Buffer for log messages\&. "
.in -1c
.SH "Detailed Description"
.PP 
The \fBSvgParser\fP class\&. 

This class parses an SVG file and extracts electrical links from Qt_attr attributes of SVG elements\&. 
.SH "Member Enumeration Documentation"
.PP 
.SS "\fBenum\fP \fBSvgParser::e_returns\fP\fR [protected]\fP"

.PP
Enumeration for return codes\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISUCCESS \fP\fP
Success return code\&. 
.TP
\fB\fIFILE_NOT_FOUND \fP\fP
File not found return code\&. 
.TP
\fB\fIINVALID_ARGUMENT \fP\fP
Invalid argument return code\&. 
.SS "\fBenum\fP \fBSvgParser::e_states\fP\fR [protected]\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITO_BE_FOUND \fP\fP
To be found state\&. 
.SS "\fBenum\fP \fBSvgParser::e_types\fP\fR [protected]\fP"

.PP
Enumeration for the names of the type attribute\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIlabel \fP\fP
Label attribute type\&. 
.TP
\fB\fItype \fP\fP
Type attribute type\&. 
.TP
\fB\fIgraphic \fP\fP
Graphic attribute type\&. 
.TP
\fB\fIinput \fP\fP
Input attribute type\&. 
.TP
\fB\fIoutput \fP\fP
Output attribute type\&. 
.TP
\fB\fIinputs \fP\fP
Inputs attribute type\&. 
.TP
\fB\fIoutputs \fP\fP
Outputs attribute type\&. 
.TP
\fB\fIsel \fP\fP
Selection attribute type\&. 
.TP
\fB\fIwire \fP\fP
Wire attribute type\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SvgParser::SvgParser (\fBQString\fP svg_file)"

.PP
\fBSvgParser\fP constructor\&. 
.PP
\fBParameters\fP
.RS 4
\fIsvg_file\fP The file path of the SVG file to parse\&. 
.RE
.PP

.SS "SvgParser::~SvgParser ()"

.PP
\fBSvgParser\fP destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBvoid\fP SvgParser::add_error_message (\fBs_parse_error\fP & error, \fBconst\fP \fBQString\fP & errorMessage)\fR [private]\fP"

.PP
Attach an error message to a structure\&. 
.PP
\fBParameters\fP
.RS 4
\fIsim_IO\fP The simulation IO structure\&. 
.br
\fIerrorMessage\fP The error message\&. 
.RE
.PP

.SS "\fBQString\fP SvgParser::attr (\fBe_types\fP type)\fR [private]\fP"

.PP
Get the attribute name for a given type\&. 
.PP
\fBParameters\fP
.RS 4
\fItype\fP The type of the attribute\&. 
.RE
.PP
\fBReturns\fP
.RS 4
The attribute name\&. 
.RE
.PP

.SS "\fBQString\fP SvgParser::attr_name_for_str (\fBQString\fP attr)\fR [private]\fP"

.PP
Get the attribute name for a given string\&. 
.PP
\fBParameters\fP
.RS 4
\fIattr\fP The attribute string\&. 
.RE
.PP
\fBReturns\fP
.RS 4
The attribute name\&. 
.RE
.PP

.SS "\fBbool\fP SvgParser::check_and_get_attr (\fBconst\fP \fBQDomElement\fP & xml, \fBQString\fP & str_to_get, \fBQString\fP attr_name)\fR [private]\fP"

.PP
Get attribute value if it exist\&. 
.PP
\fBParameters\fP
.RS 4
\fIxml\fP The XML element to check 
.br
\fIstr_to_get\fP The string to get fron the attribute 
.br
\fIattr_name\fP The attribute name 
.RE
.PP

.SS "\fBvoid\fP SvgParser::generate_tree (\fBconst\fP \fBs_tree_node\fP & node, \fBconst\fP \fBQString\fP & prefix)\fR [private]\fP"

.PP
Generate tree\&. 
.PP
\fBParameters\fP
.RS 4
\fInode\fP The tree node\&. 
.br
\fIprefix\fP The prefix for formatting\&. 
.RE
.PP

.SS "\fBconst\fP \fBs_components_list\fP & SvgParser::get_components_list () const\fR [inline]\fP"

.SS "\fBvoid\fP SvgParser::get_group_header (\fBconst\fP \fBQDomElement\fP & element, \fBs_tree_node_info\fP & info)\fR [private]\fP"

.PP
Get group header\&. 
.PP
\fBParameters\fP
.RS 4
\fIelement\fP The XML element\&. 
.br
\fIinfo\fP The node information\&. 
.RE
.PP

.SS "\fBint\fP SvgParser::get_list_of_inputs_name_and_width (\fBQString\fP outputs_string, \fBQList\fP< \fBs_element_io\fP > & inputs_list)\fR [private]\fP"

.PP
Get a list of outputs name, width for sim:outputs attributes\&. 
.PP
\fBParameters\fP
.RS 4
\fIoutputs_string\fP 
.br
\fIout_struct\fP 
.RE
.PP
\fBReturns\fP
.RS 4
Number of outputs found if success, -1 if error 
.RE
.PP

.SS "\fBint\fP SvgParser::get_list_of_outputs_name_and_width (\fBQString\fP outputs_string, \fBQList\fP< \fBs_element_io\fP > & outputs_list)\fR [private]\fP"

.PP
Get a list of outputs name, width for sim:outputs attributes\&. 
.PP
\fBParameters\fP
.RS 4
\fIoutputs_string\fP 
.br
\fIout_struct\fP 
.RE
.PP
\fBReturns\fP
.RS 4
Number of outputs found if success, -1 if error 
.RE
.PP

.SS "\fBvoid\fP SvgParser::list_attributes (\fBconst\fP \fBQList\fP< \fBQDomElement\fP > & elements)\fR [private]\fP"

.PP
List attributes\&. 
.PP
\fBParameters\fP
.RS 4
\fIelements\fP The vector of elements\&. 
.RE
.PP

.SS "\fBint\fP SvgParser::list_matching_attr (\fBconst\fP \fBQDomElement\fP elem_to_look_into, \fBconst\fP \fBQString\fP attr_name, \fBQList\fP< \fBQDomElement\fP > & found_elements)\fR [private]\fP"

.PP
list_matching_attr 
.PP
\fBParameters\fP
.RS 4
\fIelem_to_look_into\fP 
.br
\fIattr_name\fP 
.br
\fIfound_elements\fP 
.RE
.PP
\fBReturns\fP
.RS 4
number of elements found 
.RE
.PP

.SS "\fBvoid\fP SvgParser::list_matching_attr_with_value (\fBconst\fP \fBQDomElement\fP elem_to_look_into, \fBconst\fP \fBQString\fP attr_name, \fBconst\fP \fBQString\fP attr_value, \fBQList\fP< \fBQDomElement\fP > & found_elements)\fR [private]\fP"

.PP
Find elements with attribute\&. 
.PP
\fBParameters\fP
.RS 4
\fIelem_to_look_into\fP The element to search into\&. 
.br
\fIattr_name\fP The attribute name\&. 
.br
\fIattr_value\fP The attribute value\&. 
.br
\fIfound_elements\fP The list of found elements\&. 
.RE
.PP

.SS "\fBvoid\fP SvgParser::parse_by_group (\fBconst\fP \fBQDomNode\fP & node, \fBs_tree_node\fP & parentNode, \fBint\fP level)\fR [private]\fP"

.PP
Parse by group\&. 
.PP
\fBParameters\fP
.RS 4
\fInode\fP The XML node to parse\&. 
.br
\fIparentNode\fP The parent node\&. 
.br
\fIlevel\fP The level of the node in the tree\&. 
.RE
.PP

.SS "\fBvoid\fP SvgParser::parse_components (\fBs_tree_node\fP & node)\fR [private]\fP"

.PP
Parse links\&. 
.PP
\fBParameters\fP
.RS 4
\fInode\fP The tree node\&. 
.RE
.PP

.SS "\fBvoid\fP SvgParser::parse_element (\fBs_tree_node\fP & node)\fR [private]\fP"

.PP
Parse an element from an xml group tag: It can ether parse a <svg> or a <g> tag\&. 
.PP
\fBParameters\fP
.RS 4
\fInode\fP The tree node to parse\&. 
.RE
.PP

.SS "\fBvoid\fP SvgParser::parse_one_element (\fBconst\fP \fBQDomElement\fP svg_group_xml, \fBs_elements\fP & elements)\fR [private]\fP"

.PP
parse one group element containing a component\&. 
.PP
\fBParameters\fP
.RS 4
\fIsvg_group_xml\fP 
.br
\fIelement_io\fP 
.RE
.PP
On an element, we should have the following attributes:
.IP "\(bu" 2
device: the type of the component
.IP "\(bu" 2
label : the schematic name of the component
.IP "\(bu" 2
inputs: the list of inputs -> d0:1:IN0,d1:1:IN1 (d0:1:IN0 means input 0, width 1, connected to IN0)
.IP "\(bu" 2
outputs: the list of outputs -> d0:1,d1:1
.PP

.SS "\fBvoid\fP SvgParser::parse_simulation_IOs (\fBconst\fP \fBQDomElement\fP svg_group_xml, \fBs_sim_I_Os\fP & parsed_IOs)\fR [private]\fP"

.PP
Parse simulation IO\&. 
.PP
\fBParameters\fP
.RS 4
\fIsvg_group_xml\fP The SVG group XML\&. 
.br
\fIparsed_IOs\fP The parsed IOs\&. 
.RE
.PP

.SS "\fBvoid\fP SvgParser::parse_simulation_wires (\fBconst\fP \fBQDomElement\fP svg_group_xml, \fBs_sim_wires\fP & parsed_wires)\fR [private]\fP"

.PP
Parse simulation wires\&. 
.PP
\fBParameters\fP
.RS 4
\fIsvg_group_xml\fP The SVG group XML\&. 
.br
\fIparsed_wires\fP The parsed wires\&. 
.RE
.PP

.SS "\fBvoid\fP SvgParser::parse_svg (\fBQString\fP svg_file)\fR [private]\fP"

.PP
Parse SVG file\&. 
.PP
\fBParameters\fP
.RS 4
\fIsvg_file\fP The SVG file to parse\&. 
.RE
.PP

.SS "\fBvoid\fP SvgParser::print_tree_in_log (\fBQString\fP log_buffer)\fR [private]\fP"

.PP
Print tree in log\&. 
.PP
\fBParameters\fP
.RS 4
\fIlog_buffer\fP The log buffer\&. 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "\fBs_components_list\fP SvgParser::all_components\fR [protected]\fP"

.PP
All components private variable\&. 
.SS "\fBconst\fP \fBQString\fP SvgParser::custom_attribute = \fBCUSTOM_ATTRIBUTE\fP\fR [private]\fP"

.PP
Custom attribute prefix\&. 
.SS "\fBDebugWindow\fP* SvgParser::debug\fR [private]\fP"

.SS "\fBint\fP SvgParser::groups_number\fR [protected]\fP"

.PP
Number of groups\&. 
.SS "\fBQString\fP SvgParser::log_buffer\fR [private]\fP"

.PP
Buffer for log messages\&. 
.SS "\fBs_tree_node\fP SvgParser::root\fR [protected]\fP"

.PP
Root node of the tree\&. 
.SS "\fBQString\fP SvgParser::svg_file\fR [private]\fP"

.PP
File name of the SVG file\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for VHDL simulator from the source code\&.
