.TH "sc_core::sc_module" 3 "VHDL simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sc_core::sc_module
.SH SYNOPSIS
.br
.PP
.PP
\fR#include <sc_module\&.h>\fP
.PP
Inherits \fBsc_core::sc_object\fP, and \fBsc_core::sc_process_host\fP\&.
.PP
Inherited by \fBSyscFlexInt< DEFAULT_CLKEDGE, DEFAULT_FLEXINT >\fP, \fBSyscFlexInt< CLKEDGE, FLEXINT >\fP, \fBSyscFlexInt< DEFAULT_CLKEDGE, DEFAULT_FLEXINT >\fP, \fBSyscFlexInt< CLKEDGE, FLEXINT >\fP, \fBSyscLogicGate< 2, 1 >\fP, \fBSyscLogicGate< 1, 1 >\fP, \fBSyscLogicGate< N, W >\fP, \fBSyscLogicGate< 2, 1 >\fP, \fBSyscLogicGate< 1, 1 >\fP, \fBSyscLogicGate< N, W >\fP, \fBSyscLogicGate_pv< 2, 1 >\fP, \fBSyscLogicGate_pv< 2, 1 >\fP, \fBSyscTerminal< 1 >\fP, \fBSyscTerminal< 1 >\fP, \fBtlm::tlm_req_rsp_channel< REQ, RSP, tlm_fifo< REQ >, tlm_fifo< RSP > >\fP, \fBSyscFlexInt< CLKEDGE, FLEXINT >\fP, \fBSyscFlexInt< CLKEDGE, FLEXINT >\fP, \fBSyscLogicGate< N, W >\fP, \fBSyscLogicGate< N, W >\fP, \fBSyscLogicGate_pv< N, W >\fP, \fBSyscLogicGate_pv< N, W >\fP, \fBSyscTerminal< W >\fP, \fBSyscTerminal< W >\fP, \fBsc_core::sc_event_queue\fP, \fBtlm::tlm_req_rsp_channel< REQ, RSP, REQ_CHANNEL, RSP_CHANNEL >\fP, \fBtlm::tlm_slave_to_transport< REQ, RSP >\fP, \fBtlm::tlm_transport_channel< REQ, RSP, REQ_CHANNEL, RSP_CHANNEL >\fP, and \fBtlm::tlm_transport_to_master< REQ, RSP >\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBsc_simcontext\fP * \fBsc_get_curr_simcontext\fP ()"
.br
.ti -1c
.RI "\fBconst\fP \fBchar\fP * \fBgen_unique_name\fP (\fBconst\fP \fBchar\fP *\fBbasename_\fP, \fBbool\fP \fBpreserve_first\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP \fBchar\fP * \fBkind\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fB~sc_module\fP ()"
.br
.ti -1c
.RI "\fBsc_module\fP & \fBoperator<<\fP (\fBsc_interface\fP &)"
.br
.ti -1c
.RI "\fBsc_module\fP & \fBoperator<<\fP (\fBsc_port_base\fP &)"
.br
.ti -1c
.RI "\fBsc_module\fP & \fBoperator,\fP (\fBsc_interface\fP &\fBinterface_\fP)"
.br
.ti -1c
.RI "\fBsc_module\fP & \fBoperator,\fP (\fBsc_port_base\fP &\fBport_\fP)"
.br
.ti -1c
.RI "\fBconst\fP ::std::vector< \fBsc_object\fP * > & \fBget_child_objects\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBdefunct\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBoperator()\fP (\fBconst\fP \fBsc_bind_proxy\fP &\fBp001\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp002\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp003\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp004\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp005\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp006\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp007\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp008\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp009\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp010\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp011\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp012\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp013\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp014\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp015\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp016\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp017\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp018\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp019\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp020\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp021\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp022\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp023\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp024\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp025\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp026\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp027\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp028\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp029\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp030\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp031\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp032\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp033\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp034\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp035\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp036\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp037\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp038\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp039\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp040\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp041\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp042\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp043\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp044\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp045\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp046\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp047\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp048\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp049\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp050\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp051\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp052\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp053\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp054\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp055\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp056\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp057\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp058\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp059\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp060\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp061\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp062\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp063\fP=\fBSC_BIND_PROXY_NIL\fP, \fBconst\fP \fBsc_bind_proxy\fP &\fBp064\fP=\fBSC_BIND_PROXY_NIL\fP)"
.br
.in -1c

Public Member Functions inherited from \fBsc_core::sc_object\fP
.in +1c
.ti -1c
.RI "\fBconst\fP \fBchar\fP * \fBname\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBchar\fP * \fBbasename\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBprint\fP (::std::ostream &\fBos\fP=::std::cout) \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBdump\fP (::std::ostream &\fBos\fP=::std::cout) \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBtrace\fP (\fBsc_trace_file\fP *tf) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_simcontext\fP * \fBsimcontext\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBadd_attribute\fP (\fBsc_attr_base\fP &)"
.br
.ti -1c
.RI "\fBsc_attr_base\fP * \fBget_attribute\fP (\fBconst\fP std::string &\fBname_\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_attr_base\fP * \fBget_attribute\fP (\fBconst\fP std::string &\fBname_\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_attr_base\fP * \fBremove_attribute\fP (\fBconst\fP std::string &\fBname_\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBremove_all_attributes\fP ()"
.br
.ti -1c
.RI "int \fBnum_attributes\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_attr_cltn\fP & \fBattr_cltn\fP ()"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_attr_cltn\fP & \fBattr_cltn\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP std::vector< \fBsc_event\fP * > & \fBget_child_events\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_object\fP * \fBget_parent\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_object\fP * \fBget_parent_object\fP () \fBconst\fP"
.br
.in -1c

Public Member Functions inherited from \fBsc_core::sc_process_host\fP
.in +1c
.ti -1c
.RI "\fBsc_process_host\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fB~sc_process_host\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBdefunct\fP ()"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBbefore_end_of_elaboration\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBconstruction_done\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBend_of_elaboration\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBelaboration_done\fP (\fBbool\fP &)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBstart_of_simulation\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBstart_simulation\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBend_of_simulation\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBsimulation_done\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBsc_module_init\fP ()"
.br
.ti -1c
.RI "\fBsc_module\fP ()"
.br
.ti -1c
.RI "\fBsc_module\fP (\fBconst\fP \fBsc_module_name\fP &\fBnm\fP)"
.br
.ti -1c
.RI "\fBsc_module\fP (\fBconst\fP \fBchar\fP *\fBnm\fP)"
.br
.ti -1c
.RI "\fBsc_module\fP (\fBconst\fP std::string &\fBnm\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBend_module\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBdont_initialize\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBpositional_bind\fP (\fBsc_interface\fP &)"
.br
.ti -1c
.RI "\fBvoid\fP \fBpositional_bind\fP (\fBsc_port_base\fP &)"
.br
.ti -1c
.RI "\fBvoid\fP \fBasync_reset_signal_is\fP (\fBconst\fP \fBsc_in\fP< \fBbool\fP > &port, \fBbool\fP level)"
.br
.ti -1c
.RI "\fBvoid\fP \fBasync_reset_signal_is\fP (\fBconst\fP \fBsc_inout\fP< \fBbool\fP > &port, \fBbool\fP level)"
.br
.ti -1c
.RI "\fBvoid\fP \fBasync_reset_signal_is\fP (\fBconst\fP \fBsc_out\fP< \fBbool\fP > &port, \fBbool\fP level)"
.br
.ti -1c
.RI "\fBvoid\fP \fBasync_reset_signal_is\fP (\fBconst\fP \fBsc_signal_in_if\fP< \fBbool\fP > &iface, \fBbool\fP level)"
.br
.ti -1c
.RI "\fBvoid\fP \fBreset_signal_is\fP (\fBconst\fP \fBsc_in\fP< \fBbool\fP > &port, \fBbool\fP level)"
.br
.ti -1c
.RI "\fBvoid\fP \fBreset_signal_is\fP (\fBconst\fP \fBsc_inout\fP< \fBbool\fP > &port, \fBbool\fP level)"
.br
.ti -1c
.RI "\fBvoid\fP \fBreset_signal_is\fP (\fBconst\fP \fBsc_out\fP< \fBbool\fP > &port, \fBbool\fP level)"
.br
.ti -1c
.RI "\fBvoid\fP \fBreset_signal_is\fP (\fBconst\fP \fBsc_signal_in_if\fP< \fBbool\fP > &iface, \fBbool\fP level)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBconst\fP \fBsc_event\fP &\fBe\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBconst\fP \fBsc_event_or_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBconst\fP \fBsc_event_and_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBconst\fP \fBsc_time\fP &t)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBdouble\fP v, \fBsc_time_unit\fP \fBtu\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBconst\fP \fBsc_time\fP &t, \fBconst\fP \fBsc_event\fP &\fBe\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBdouble\fP v, \fBsc_time_unit\fP \fBtu\fP, \fBconst\fP \fBsc_event\fP &\fBe\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBconst\fP \fBsc_time\fP &t, \fBconst\fP \fBsc_event_or_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBdouble\fP v, \fBsc_time_unit\fP \fBtu\fP, \fBconst\fP \fBsc_event_or_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBconst\fP \fBsc_time\fP &t, \fBconst\fP \fBsc_event_and_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBdouble\fP v, \fBsc_time_unit\fP \fBtu\fP, \fBconst\fP \fBsc_event_and_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBconst\fP \fBsc_event\fP &\fBe\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBconst\fP \fBsc_event_or_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBconst\fP \fBsc_event_and_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBconst\fP \fBsc_time\fP &t)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBdouble\fP v, \fBsc_time_unit\fP \fBtu\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBconst\fP \fBsc_time\fP &t, \fBconst\fP \fBsc_event\fP &\fBe\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBdouble\fP v, \fBsc_time_unit\fP \fBtu\fP, \fBconst\fP \fBsc_event\fP &\fBe\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBconst\fP \fBsc_time\fP &t, \fBconst\fP \fBsc_event_or_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBdouble\fP v, \fBsc_time_unit\fP \fBtu\fP, \fBconst\fP \fBsc_event_or_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBconst\fP \fBsc_time\fP &t, \fBconst\fP \fBsc_event_and_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBdouble\fP v, \fBsc_time_unit\fP \fBtu\fP, \fBconst\fP \fBsc_event_and_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBtimed_out\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBhalt\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (int \fBn\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBat_posedge\fP (\fBconst\fP \fBsc_signal_in_if\fP< \fBbool\fP > &s)"
.br
.ti -1c
.RI "\fBvoid\fP \fBat_posedge\fP (\fBconst\fP \fBsc_signal_in_if\fP< \fBsc_dt::sc_logic\fP > &s)"
.br
.ti -1c
.RI "\fBvoid\fP \fBat_negedge\fP (\fBconst\fP \fBsc_signal_in_if\fP< \fBbool\fP > &s)"
.br
.ti -1c
.RI "\fBvoid\fP \fBat_negedge\fP (\fBconst\fP \fBsc_signal_in_if\fP< \fBsc_dt::sc_logic\fP > &s)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwatching\fP (\fBbool\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBset_stack_size\fP (std::size_t)"
.br
.ti -1c
.RI "int \fBappend_port\fP (\fBsc_port_base\fP *)"
.br
.in -1c

Protected Member Functions inherited from \fBsc_core::sc_object\fP
.in +1c
.ti -1c
.RI "\fBsc_object\fP ()"
.br
.ti -1c
.RI "\fBsc_object\fP (\fBconst\fP \fBchar\fP *\fBnm\fP)"
.br
.ti -1c
.RI "\fBsc_object\fP (\fBconst\fP \fBsc_object\fP &)"
.br
.ti -1c
.RI "\fBsc_object\fP & \fBoperator=\fP (\fBconst\fP \fBsc_object\fP &)"
.br
.ti -1c
.RI "\fBvirtual\fP \fB~sc_object\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBadd_child_event\fP (\fBsc_event\fP *\fBevent_p\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBadd_child_object\fP (\fBsc_object\fP *\fBobject_p\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBbool\fP \fBremove_child_event\fP (\fBsc_event\fP *\fBevent_p\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBbool\fP \fBremove_child_object\fP (\fBsc_object\fP *\fBobject_p\fP)"
.br
.ti -1c
.RI "\fBphase_cb_mask\fP \fBregister_simulation_phase_callback\fP (\fBphase_cb_mask\fP)"
.br
.ti -1c
.RI "\fBphase_cb_mask\fP \fBunregister_simulation_phase_callback\fP (\fBphase_cb_mask\fP)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBsc_sensitive\fP \fBsensitive\fP"
.br
.ti -1c
.RI "\fBsc_sensitive_pos\fP \fBsensitive_pos\fP"
.br
.ti -1c
.RI "\fBsc_sensitive_neg\fP \fBsensitive_neg\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBsc_module\fP (\fBconst\fP \fBsc_module\fP &)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_module\fP & \fBoperator=\fP (\fBconst\fP \fBsc_module\fP &)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBbool\fP \fBm_end_module_called\fP"
.br
.ti -1c
.RI "std::vector< \fBsc_port_base\fP * > * \fBm_port_vec\fP"
.br
.ti -1c
.RI "int \fBm_port_index\fP"
.br
.ti -1c
.RI "\fBsc_name_gen\fP * \fBm_name_gen\fP"
.br
.ti -1c
.RI "\fBsc_module_name\fP * \fBm_module_name_p\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "\fBclass\fP \fBsc_module_name\fP"
.br
.ti -1c
.RI "\fBclass\fP \fBsc_module_registry\fP"
.br
.ti -1c
.RI "\fBclass\fP \fBsc_object\fP"
.br
.ti -1c
.RI "\fBclass\fP \fBsc_port_registry\fP"
.br
.ti -1c
.RI "\fBclass\fP \fBsc_process_b\fP"
.br
.ti -1c
.RI "\fBclass\fP \fBsc_simcontext\fP"
.br
.in -1c
.SS "Additional Inherited Members"


Public Types inherited from \fBsc_core::sc_object\fP
.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBunsigned\fP \fBphase_cb_mask\fP"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "sc_core::sc_module::sc_module ()\fR [protected]\fP"

.SS "sc_core::sc_module::sc_module (\fBconst\fP \fBsc_module_name\fP & nm)\fR [protected]\fP"

.SS "sc_core::sc_module::sc_module (\fBconst\fP \fBchar\fP * nm)\fR [protected]\fP"

.SS "sc_core::sc_module::sc_module (\fBconst\fP std::string & nm)\fR [protected]\fP"

.SS "\fBvirtual\fP sc_core::sc_module::~sc_module ()\fR [virtual]\fP"

.SS "sc_core::sc_module::sc_module (\fBconst\fP \fBsc_module\fP &)\fR [private]\fP"

.SH "Member Function Documentation"
.PP 
.SS "int sc_core::sc_module::append_port (\fBsc_port_base\fP *)\fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::async_reset_signal_is (\fBconst\fP \fBsc_in\fP< \fBbool\fP > & port, \fBbool\fP level)\fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::async_reset_signal_is (\fBconst\fP \fBsc_inout\fP< \fBbool\fP > & port, \fBbool\fP level)\fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::async_reset_signal_is (\fBconst\fP \fBsc_out\fP< \fBbool\fP > & port, \fBbool\fP level)\fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::async_reset_signal_is (\fBconst\fP \fBsc_signal_in_if\fP< \fBbool\fP > & iface, \fBbool\fP level)\fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::at_negedge (\fBconst\fP \fBsc_signal_in_if\fP< \fBbool\fP > & s)\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::at_negedge (\fBconst\fP \fBsc_signal_in_if\fP< \fBsc_dt::sc_logic\fP > & s)\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::at_posedge (\fBconst\fP \fBsc_signal_in_if\fP< \fBbool\fP > & s)\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::at_posedge (\fBconst\fP \fBsc_signal_in_if\fP< \fBsc_dt::sc_logic\fP > & s)\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvirtual\fP \fBvoid\fP sc_core::sc_module::before_end_of_elaboration ()\fR [protected]\fP, \fR [virtual]\fP"

.PP
Reimplemented in \fBSyscFlexInt< CLKEDGE, FLEXINT >\fP, \fBSyscFlexInt< CLKEDGE, FLEXINT >\fP, \fBSyscFlexInt< DEFAULT_CLKEDGE, DEFAULT_FLEXINT >\fP, \fBSyscFlexInt< CLKEDGE, FLEXINT >\fP, \fBSyscFlexInt< CLKEDGE, FLEXINT >\fP, and \fBSyscFlexInt< DEFAULT_CLKEDGE, DEFAULT_FLEXINT >\fP\&.
.SS "\fBvoid\fP sc_core::sc_module::construction_done ()\fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::defunct ()\fR [inline]\fP"

.SS "\fBvoid\fP sc_core::sc_module::dont_initialize ()\fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::elaboration_done (\fBbool\fP &)\fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::end_module ()\fR [protected]\fP"

.SS "\fBvirtual\fP \fBvoid\fP sc_core::sc_module::end_of_elaboration ()\fR [protected]\fP, \fR [virtual]\fP"

.SS "\fBvirtual\fP \fBvoid\fP sc_core::sc_module::end_of_simulation ()\fR [protected]\fP, \fR [virtual]\fP"

.SS "\fBconst\fP \fBchar\fP * sc_core::sc_module::gen_unique_name (\fBconst\fP \fBchar\fP * basename_, \fBbool\fP preserve_first)"

.SS "\fBconst\fP ::std::vector< \fBsc_object\fP * > & sc_core::sc_module::get_child_objects () const\fR [virtual]\fP"

.PP
Reimplemented from \fBsc_core::sc_object\fP\&.
.SS "\fBvoid\fP sc_core::sc_module::halt ()\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvirtual\fP \fBconst\fP \fBchar\fP * sc_core::sc_module::kind () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Reimplemented from \fBsc_core::sc_object\fP\&.
.PP
Reimplemented in \fBsc_core::sc_event_queue\fP\&.
.SS "\fBvoid\fP sc_core::sc_module::next_trigger ()\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::next_trigger (\fBconst\fP \fBsc_event\fP & e)\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::next_trigger (\fBconst\fP \fBsc_event_and_list\fP & el)\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::next_trigger (\fBconst\fP \fBsc_event_or_list\fP & el)\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::next_trigger (\fBconst\fP \fBsc_time\fP & t)\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::next_trigger (\fBconst\fP \fBsc_time\fP & t, \fBconst\fP \fBsc_event\fP & e)\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::next_trigger (\fBconst\fP \fBsc_time\fP & t, \fBconst\fP \fBsc_event_and_list\fP & el)\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::next_trigger (\fBconst\fP \fBsc_time\fP & t, \fBconst\fP \fBsc_event_or_list\fP & el)\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::next_trigger (\fBdouble\fP v, \fBsc_time_unit\fP tu)\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::next_trigger (\fBdouble\fP v, \fBsc_time_unit\fP tu, \fBconst\fP \fBsc_event\fP & e)\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::next_trigger (\fBdouble\fP v, \fBsc_time_unit\fP tu, \fBconst\fP \fBsc_event_and_list\fP & el)\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::next_trigger (\fBdouble\fP v, \fBsc_time_unit\fP tu, \fBconst\fP \fBsc_event_or_list\fP & el)\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::operator() (\fBconst\fP \fBsc_bind_proxy\fP & p001, \fBconst\fP \fBsc_bind_proxy\fP & p002 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p003 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p004 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p005 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p006 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p007 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p008 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p009 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p010 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p011 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p012 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p013 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p014 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p015 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p016 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p017 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p018 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p019 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p020 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p021 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p022 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p023 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p024 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p025 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p026 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p027 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p028 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p029 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p030 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p031 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p032 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p033 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p034 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p035 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p036 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p037 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p038 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p039 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p040 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p041 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p042 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p043 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p044 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p045 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p046 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p047 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p048 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p049 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p050 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p051 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p052 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p053 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p054 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p055 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p056 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p057 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p058 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p059 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p060 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p061 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p062 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p063 = \fR\fBSC_BIND_PROXY_NIL\fP\fP, \fBconst\fP \fBsc_bind_proxy\fP & p064 = \fR\fBSC_BIND_PROXY_NIL\fP\fP)"

.SS "\fBsc_module\fP & sc_core::sc_module::operator, (\fBsc_interface\fP & interface_)\fR [inline]\fP"

.SS "\fBsc_module\fP & sc_core::sc_module::operator, (\fBsc_port_base\fP & port_)\fR [inline]\fP"

.SS "\fBsc_module\fP & sc_core::sc_module::operator<< (\fBsc_interface\fP &)"

.SS "\fBsc_module\fP & sc_core::sc_module::operator<< (\fBsc_port_base\fP &)"

.SS "\fBconst\fP \fBsc_module\fP & sc_core::sc_module::operator= (\fBconst\fP \fBsc_module\fP &)\fR [private]\fP"

.SS "\fBvoid\fP sc_core::sc_module::positional_bind (\fBsc_interface\fP &)\fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::positional_bind (\fBsc_port_base\fP &)\fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::reset_signal_is (\fBconst\fP \fBsc_in\fP< \fBbool\fP > & port, \fBbool\fP level)\fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::reset_signal_is (\fBconst\fP \fBsc_inout\fP< \fBbool\fP > & port, \fBbool\fP level)\fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::reset_signal_is (\fBconst\fP \fBsc_out\fP< \fBbool\fP > & port, \fBbool\fP level)\fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::reset_signal_is (\fBconst\fP \fBsc_signal_in_if\fP< \fBbool\fP > & iface, \fBbool\fP level)\fR [protected]\fP"

.SS "\fBsc_simcontext\fP * sc_core::sc_module::sc_get_curr_simcontext ()\fR [inline]\fP"

.SS "\fBvoid\fP sc_core::sc_module::sc_module_init ()\fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::set_stack_size (std::size_t)\fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::simulation_done ()\fR [protected]\fP"

.SS "\fBvirtual\fP \fBvoid\fP sc_core::sc_module::start_of_simulation ()\fR [protected]\fP, \fR [virtual]\fP"

.SS "\fBvoid\fP sc_core::sc_module::start_simulation ()\fR [protected]\fP"

.SS "\fBbool\fP sc_core::sc_module::timed_out ()\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::wait ()\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::wait (\fBconst\fP \fBsc_event\fP & e)\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::wait (\fBconst\fP \fBsc_event_and_list\fP & el)\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::wait (\fBconst\fP \fBsc_event_or_list\fP & el)\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::wait (\fBconst\fP \fBsc_time\fP & t)\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::wait (\fBconst\fP \fBsc_time\fP & t, \fBconst\fP \fBsc_event\fP & e)\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::wait (\fBconst\fP \fBsc_time\fP & t, \fBconst\fP \fBsc_event_and_list\fP & el)\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::wait (\fBconst\fP \fBsc_time\fP & t, \fBconst\fP \fBsc_event_or_list\fP & el)\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::wait (\fBdouble\fP v, \fBsc_time_unit\fP tu)\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::wait (\fBdouble\fP v, \fBsc_time_unit\fP tu, \fBconst\fP \fBsc_event\fP & e)\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::wait (\fBdouble\fP v, \fBsc_time_unit\fP tu, \fBconst\fP \fBsc_event_and_list\fP & el)\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::wait (\fBdouble\fP v, \fBsc_time_unit\fP tu, \fBconst\fP \fBsc_event_or_list\fP & el)\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::wait (int n)\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvoid\fP sc_core::sc_module::watching (\fBbool\fP)\fR [inline]\fP, \fR [protected]\fP"

.SH "Friends And Related Symbol Documentation"
.PP 
.SS "\fBfriend\fP \fBclass\fP \fBsc_module_name\fP\fR [friend]\fP"

.SS "\fBfriend\fP \fBclass\fP \fBsc_module_registry\fP\fR [friend]\fP"

.SS "\fBfriend\fP \fBclass\fP \fBsc_object\fP\fR [friend]\fP"

.SS "\fBfriend\fP \fBclass\fP \fBsc_port_registry\fP\fR [friend]\fP"

.SS "\fBfriend\fP \fBclass\fP \fBsc_process_b\fP\fR [friend]\fP"

.SS "\fBfriend\fP \fBclass\fP \fBsc_simcontext\fP\fR [friend]\fP"

.SH "Member Data Documentation"
.PP 
.SS "\fBbool\fP sc_core::sc_module::m_end_module_called\fR [private]\fP"

.SS "\fBsc_module_name\fP* sc_core::sc_module::m_module_name_p\fR [private]\fP"

.SS "\fBsc_name_gen\fP* sc_core::sc_module::m_name_gen\fR [private]\fP"

.SS "int sc_core::sc_module::m_port_index\fR [private]\fP"

.SS "std::vector<\fBsc_port_base\fP*>* sc_core::sc_module::m_port_vec\fR [private]\fP"

.SS "\fBsc_sensitive\fP sc_core::sc_module::sensitive\fR [protected]\fP"

.SS "\fBsc_sensitive_neg\fP sc_core::sc_module::sensitive_neg\fR [protected]\fP"

.SS "\fBsc_sensitive_pos\fP sc_core::sc_module::sensitive_pos\fR [protected]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for VHDL simulator from the source code\&.
