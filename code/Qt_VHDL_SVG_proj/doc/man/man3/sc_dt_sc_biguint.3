.TH "sc_dt::sc_biguint< W >" 3 "VHDL simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sc_dt::sc_biguint< W >
.SH SYNOPSIS
.br
.PP
.PP
\fR#include <sc_biguint\&.h>\fP
.PP
Inherits \fBsc_dt::sc_unsigned\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBsc_biguint\fP ()"
.br
.ti -1c
.RI "\fBsc_biguint\fP (\fBconst\fP \fBsc_biguint\fP< \fBW\fP > &v)"
.br
.ti -1c
.RI "\fBsc_biguint\fP (\fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBsc_biguint\fP (\fBconst\fP \fBsc_unsigned_subref\fP &v)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_biguint\fP (\fBconst\fP \fBsc_generic_base\fP< \fBT\fP > &\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_biguint\fP (\fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBsc_biguint\fP (\fBconst\fP \fBsc_signed_subref\fP &v)"
.br
.ti -1c
.RI "\fBsc_biguint\fP (\fBconst\fP \fBchar\fP *v)"
.br
.ti -1c
.RI "\fBsc_biguint\fP (\fBint64\fP v)"
.br
.ti -1c
.RI "\fBsc_biguint\fP (\fBuint64\fP v)"
.br
.ti -1c
.RI "\fBsc_biguint\fP (\fBlong\fP v)"
.br
.ti -1c
.RI "\fBsc_biguint\fP (\fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBsc_biguint\fP (int v)"
.br
.ti -1c
.RI "\fBsc_biguint\fP (\fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBsc_biguint\fP (\fBdouble\fP v)"
.br
.ti -1c
.RI "\fBsc_biguint\fP (\fBconst\fP \fBsc_bv_base\fP &v)"
.br
.ti -1c
.RI "\fBsc_biguint\fP (\fBconst\fP \fBsc_lv_base\fP &v)"
.br
.ti -1c
.RI "\fB~sc_biguint\fP ()"
.br
.ti -1c
.RI "\fBsc_biguint\fP< \fBW\fP > & \fBoperator=\fP (\fBconst\fP \fBsc_biguint\fP< \fBW\fP > &v)"
.br
.ti -1c
.RI "\fBsc_biguint\fP< \fBW\fP > & \fBoperator=\fP (\fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBsc_biguint\fP< \fBW\fP > & \fBoperator=\fP (\fBconst\fP \fBsc_unsigned_subref\fP &v)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_biguint\fP< \fBW\fP > & \fBoperator=\fP (\fBconst\fP \fBsc_generic_base\fP< \fBT\fP > &\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_biguint\fP< \fBW\fP > & \fBoperator=\fP (\fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBsc_biguint\fP< \fBW\fP > & \fBoperator=\fP (\fBconst\fP \fBsc_signed_subref\fP &v)"
.br
.ti -1c
.RI "\fBsc_biguint\fP< \fBW\fP > & \fBoperator=\fP (\fBconst\fP \fBchar\fP *v)"
.br
.ti -1c
.RI "\fBsc_biguint\fP< \fBW\fP > & \fBoperator=\fP (\fBint64\fP v)"
.br
.ti -1c
.RI "\fBsc_biguint\fP< \fBW\fP > & \fBoperator=\fP (\fBuint64\fP v)"
.br
.ti -1c
.RI "\fBsc_biguint\fP< \fBW\fP > & \fBoperator=\fP (\fBlong\fP v)"
.br
.ti -1c
.RI "\fBsc_biguint\fP< \fBW\fP > & \fBoperator=\fP (\fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBsc_biguint\fP< \fBW\fP > & \fBoperator=\fP (int v)"
.br
.ti -1c
.RI "\fBsc_biguint\fP< \fBW\fP > & \fBoperator=\fP (\fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBsc_biguint\fP< \fBW\fP > & \fBoperator=\fP (\fBdouble\fP v)"
.br
.ti -1c
.RI "\fBsc_biguint\fP< \fBW\fP > & \fBoperator=\fP (\fBconst\fP \fBsc_bv_base\fP &v)"
.br
.ti -1c
.RI "\fBsc_biguint\fP< \fBW\fP > & \fBoperator=\fP (\fBconst\fP \fBsc_lv_base\fP &v)"
.br
.ti -1c
.RI "\fBsc_biguint\fP< \fBW\fP > & \fBoperator=\fP (\fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBsc_biguint\fP< \fBW\fP > & \fBoperator=\fP (\fBconst\fP \fBsc_uint_base\fP &v)"
.br
.in -1c

Public Member Functions inherited from \fBsc_dt::sc_unsigned\fP
.in +1c
.ti -1c
.RI "\fBsc_unsigned\fP (int \fBnb\fP=\fBsc_length_param\fP()\&.len())"
.br
.ti -1c
.RI "\fBsc_unsigned\fP (\fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP (\fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBsc_unsigned\fP (\fBconst\fP \fBsc_generic_base\fP< \fBT\fP > &v)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP (\fBconst\fP \fBsc_bv_base\fP &v)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP (\fBconst\fP \fBsc_lv_base\fP &v)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP (\fBconst\fP \fBsc_int_subref_r\fP &v)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP (\fBconst\fP \fBsc_uint_subref_r\fP &v)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP (\fBconst\fP \fBsc_signed_subref_r\fP &v)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP (\fBconst\fP \fBsc_unsigned_subref_r\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator=\fP (\fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator=\fP (\fBconst\fP \fBsc_unsigned_subref_r\fP &\fBa\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBT\fP > \fBconst\fP \fBsc_unsigned\fP & \fBoperator=\fP (\fBconst\fP \fBsc_generic_base\fP< \fBT\fP > &\fBa\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator=\fP (\fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator=\fP (\fBconst\fP \fBsc_signed_subref_r\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator=\fP (\fBconst\fP \fBchar\fP *v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator=\fP (\fBint64\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator=\fP (\fBuint64\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator=\fP (\fBlong\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator=\fP (\fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator=\fP (int v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator=\fP (\fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator=\fP (\fBdouble\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator=\fP (\fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator=\fP (\fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator=\fP (\fBconst\fP \fBsc_bv_base\fP &)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator=\fP (\fBconst\fP \fBsc_lv_base\fP &)"
.br
.ti -1c
.RI "\fBvirtual\fP \fB~sc_unsigned\fP ()"
.br
.ti -1c
.RI "\fBsc_digit\fP * \fBget_raw\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP int \fBconcat_length\fP (\fBbool\fP *\fBxz_present_p\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBbool\fP \fBconcat_get_ctrl\fP (\fBsc_digit\fP *\fBdst_p\fP, int \fBlow_i\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBbool\fP \fBconcat_get_data\fP (\fBsc_digit\fP *\fBdst_p\fP, int \fBlow_i\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBuint64\fP \fBconcat_get_uint64\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBconcat_set\fP (\fBint64\fP \fBsrc\fP, int \fBlow_i\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBconcat_set\fP (\fBconst\fP \fBsc_signed\fP &\fBsrc\fP, int \fBlow_i\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBconcat_set\fP (\fBconst\fP \fBsc_unsigned\fP &\fBsrc\fP, int \fBlow_i\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBconcat_set\fP (\fBuint64\fP \fBsrc\fP, int \fBlow_i\fP)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP & \fBoperator++\fP ()"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP \fBoperator++\fP (int)"
.br
.ti -1c
.RI "\fBsc_unsigned\fP & \fBoperator\-\-\fP ()"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP \fBoperator\-\-\fP (int)"
.br
.ti -1c
.RI "\fBvoid\fP \fBcheck_index\fP (int \fBi\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBinvalid_index\fP (int \fBi\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_unsigned_bitref\fP & \fBoperator[]\fP (int \fBi\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned_bitref_r\fP & \fBoperator[]\fP (int \fBi\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_unsigned_bitref\fP & \fBbit\fP (int \fBi\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned_bitref_r\fP & \fBbit\fP (int \fBi\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBcheck_range\fP (int \fBl\fP, int \fBr\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBinvalid_range\fP (int \fBl\fP, int \fBr\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_unsigned_subref\fP & \fBrange\fP (int \fBi\fP, int \fBj\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned_subref_r\fP & \fBrange\fP (int \fBi\fP, int \fBj\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_unsigned_subref\fP & \fBoperator()\fP (int \fBi\fP, int \fBj\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned_subref_r\fP & \fBoperator()\fP (int \fBi\fP, int \fBj\fP) \fBconst\fP"
.br
.ti -1c
.RI "int \fBto_int\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBunsigned\fP int \fBto_uint\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBlong\fP \fBto_long\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBunsigned\fP \fBlong\fP \fBto_ulong\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBint64\fP \fBto_int64\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBuint64\fP \fBto_uint64\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBdouble\fP \fBto_double\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP (\fBsc_numrep\fP \fBnumrep\fP=\fBSC_DEC\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP (\fBsc_numrep\fP \fBnumrep\fP, \fBbool\fP \fBw_prefix\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBprint\fP (::std::ostream &\fBos\fP=::std::cout) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBscan\fP (::std::istream &\fBis\fP=::std::cin)"
.br
.ti -1c
.RI "\fBvoid\fP \fBdump\fP (::std::ostream &\fBos\fP=::std::cout) \fBconst\fP"
.br
.ti -1c
.RI "int \fBlength\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBiszero\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBsign\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBand_reduce\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBnand_reduce\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBor_reduce\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBnor_reduce\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBxor_reduce\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBxnor_reduce\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBtest\fP (int \fBi\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBset\fP (int \fBi\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBclear\fP (int \fBi\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBset\fP (int \fBi\fP, \fBbool\fP v)"
.br
.ti -1c
.RI "\fBvoid\fP \fBinvert\fP (int \fBi\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBreverse\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBget_packed_rep\fP (\fBsc_digit\fP *\fBbuf\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBset_packed_rep\fP (\fBsc_digit\fP *\fBbuf\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator+=\fP (\fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator+=\fP (\fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator+=\fP (\fBint64\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator+=\fP (\fBuint64\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator+=\fP (\fBlong\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator+=\fP (\fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator+=\fP (int v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator+=\fP (\fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator+=\fP (\fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator+=\fP (\fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator\-=\fP (\fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator\-=\fP (\fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator\-=\fP (\fBint64\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator\-=\fP (\fBuint64\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator\-=\fP (\fBlong\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator\-=\fP (\fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator\-=\fP (int v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator\-=\fP (\fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator\-=\fP (\fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator\-=\fP (\fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator*=\fP (\fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator*=\fP (\fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator*=\fP (\fBint64\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator*=\fP (\fBuint64\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator*=\fP (\fBlong\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator*=\fP (\fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator*=\fP (int v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator*=\fP (\fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator*=\fP (\fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator*=\fP (\fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator/=\fP (\fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator/=\fP (\fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator/=\fP (\fBint64\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator/=\fP (\fBuint64\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator/=\fP (\fBlong\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator/=\fP (\fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator/=\fP (int v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator/=\fP (\fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator/=\fP (\fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator/=\fP (\fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator%=\fP (\fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator%=\fP (\fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator%=\fP (\fBint64\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator%=\fP (\fBuint64\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator%=\fP (\fBlong\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator%=\fP (\fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator%=\fP (int v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator%=\fP (\fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator%=\fP (\fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator%=\fP (\fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator&=\fP (\fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator&=\fP (\fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator&=\fP (\fBint64\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator&=\fP (\fBuint64\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator&=\fP (\fBlong\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator&=\fP (\fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator&=\fP (int v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator&=\fP (\fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator&=\fP (\fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator&=\fP (\fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator|=\fP (\fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator|=\fP (\fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator|=\fP (\fBint64\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator|=\fP (\fBuint64\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator|=\fP (\fBlong\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator|=\fP (\fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator|=\fP (int v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator|=\fP (\fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator|=\fP (\fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator|=\fP (\fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator^=\fP (\fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator^=\fP (\fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator^=\fP (\fBint64\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator^=\fP (\fBuint64\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator^=\fP (\fBlong\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator^=\fP (\fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator^=\fP (int v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator^=\fP (\fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator^=\fP (\fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator^=\fP (\fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator<<=\fP (\fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator<<=\fP (\fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator<<=\fP (\fBint64\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator<<=\fP (\fBuint64\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator<<=\fP (\fBlong\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator<<=\fP (\fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator<<=\fP (int v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator<<=\fP (\fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator<<=\fP (\fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator<<=\fP (\fBconst\fP \fBsc_uint_base\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator>>=\fP (\fBconst\fP \fBsc_signed\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator>>=\fP (\fBconst\fP \fBsc_unsigned\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator>>=\fP (\fBint64\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator>>=\fP (\fBuint64\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator>>=\fP (\fBlong\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator>>=\fP (\fBunsigned\fP \fBlong\fP v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator>>=\fP (int v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator>>=\fP (\fBunsigned\fP int v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator>>=\fP (\fBconst\fP \fBsc_int_base\fP &v)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP & \fBoperator>>=\fP (\fBconst\fP \fBsc_uint_base\fP &v)"
.br
.in -1c

Public Member Functions inherited from \fBsc_dt::sc_value_base\fP
.in +1c
.ti -1c
.RI "\fBvirtual\fP \fB~sc_value_base\fP ()"
.br
.in -1c
.SS "Additional Inherited Members"


Static Public Attributes inherited from \fBsc_dt::sc_unsigned\fP
.in +1c
.ti -1c
.RI "\fBstatic\fP \fBsc_core::sc_vpool\fP< \fBsc_unsigned\fP > \fBm_pool\fP"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<int W> \fBsc_dt::sc_biguint\fP< \fBW\fP >::sc_biguint ()\fR [inline]\fP"

.SS "template<int W> \fBsc_dt::sc_biguint\fP< \fBW\fP >::sc_biguint (\fBconst\fP \fBsc_biguint\fP< \fBW\fP > & v)\fR [inline]\fP"

.SS "template<int W> \fBsc_dt::sc_biguint\fP< \fBW\fP >::sc_biguint (\fBconst\fP \fBsc_unsigned\fP & v)\fR [inline]\fP"

.SS "template<int W> \fBsc_dt::sc_biguint\fP< \fBW\fP >::sc_biguint (\fBconst\fP \fBsc_unsigned_subref\fP & v)\fR [inline]\fP"

.SS "template<int W> template<\fBclass\fP \fBT\fP > \fBsc_dt::sc_biguint\fP< \fBW\fP >::sc_biguint (\fBconst\fP \fBsc_generic_base\fP< \fBT\fP > & a)\fR [inline]\fP"

.SS "template<int W> \fBsc_dt::sc_biguint\fP< \fBW\fP >::sc_biguint (\fBconst\fP \fBsc_signed\fP & v)\fR [inline]\fP"

.SS "template<int W> \fBsc_dt::sc_biguint\fP< \fBW\fP >::sc_biguint (\fBconst\fP \fBsc_signed_subref\fP & v)\fR [inline]\fP"

.SS "template<int W> \fBsc_dt::sc_biguint\fP< \fBW\fP >::sc_biguint (\fBconst\fP \fBchar\fP * v)\fR [inline]\fP"

.SS "template<int W> \fBsc_dt::sc_biguint\fP< \fBW\fP >::sc_biguint (\fBint64\fP v)\fR [inline]\fP"

.SS "template<int W> \fBsc_dt::sc_biguint\fP< \fBW\fP >::sc_biguint (\fBuint64\fP v)\fR [inline]\fP"

.SS "template<int W> \fBsc_dt::sc_biguint\fP< \fBW\fP >::sc_biguint (\fBlong\fP v)\fR [inline]\fP"

.SS "template<int W> \fBsc_dt::sc_biguint\fP< \fBW\fP >::sc_biguint (\fBunsigned\fP \fBlong\fP v)\fR [inline]\fP"

.SS "template<int W> \fBsc_dt::sc_biguint\fP< \fBW\fP >::sc_biguint (int v)\fR [inline]\fP"

.SS "template<int W> \fBsc_dt::sc_biguint\fP< \fBW\fP >::sc_biguint (\fBunsigned\fP int v)\fR [inline]\fP"

.SS "template<int W> \fBsc_dt::sc_biguint\fP< \fBW\fP >::sc_biguint (\fBdouble\fP v)\fR [inline]\fP"

.SS "template<int W> \fBsc_dt::sc_biguint\fP< \fBW\fP >::sc_biguint (\fBconst\fP \fBsc_bv_base\fP & v)\fR [inline]\fP"

.SS "template<int W> \fBsc_dt::sc_biguint\fP< \fBW\fP >::sc_biguint (\fBconst\fP \fBsc_lv_base\fP & v)\fR [inline]\fP"

.SS "template<int W> \fBsc_dt::sc_biguint\fP< \fBW\fP >::~\fBsc_biguint\fP ()\fR [inline]\fP"

.SH "Member Function Documentation"
.PP 
.SS "template<int W> \fBsc_biguint\fP< \fBW\fP > & \fBsc_dt::sc_biguint\fP< \fBW\fP >\fB::operator\fP= (\fBconst\fP \fBchar\fP * v)\fR [inline]\fP"

.SS "template<int W> \fBsc_biguint\fP< \fBW\fP > & \fBsc_dt::sc_biguint\fP< \fBW\fP >\fB::operator\fP= (\fBconst\fP \fBsc_biguint\fP< \fBW\fP > & v)\fR [inline]\fP"

.SS "template<int W> \fBsc_biguint\fP< \fBW\fP > & \fBsc_dt::sc_biguint\fP< \fBW\fP >\fB::operator\fP= (\fBconst\fP \fBsc_bv_base\fP & v)\fR [inline]\fP"

.SS "template<int W> template<\fBclass\fP \fBT\fP > \fBsc_biguint\fP< \fBW\fP > & \fBsc_dt::sc_biguint\fP< \fBW\fP >\fB::operator\fP= (\fBconst\fP \fBsc_generic_base\fP< \fBT\fP > & a)\fR [inline]\fP"

.SS "template<int W> \fBsc_biguint\fP< \fBW\fP > & \fBsc_dt::sc_biguint\fP< \fBW\fP >\fB::operator\fP= (\fBconst\fP \fBsc_int_base\fP & v)\fR [inline]\fP"

.SS "template<int W> \fBsc_biguint\fP< \fBW\fP > & \fBsc_dt::sc_biguint\fP< \fBW\fP >\fB::operator\fP= (\fBconst\fP \fBsc_lv_base\fP & v)\fR [inline]\fP"

.SS "template<int W> \fBsc_biguint\fP< \fBW\fP > & \fBsc_dt::sc_biguint\fP< \fBW\fP >\fB::operator\fP= (\fBconst\fP \fBsc_signed\fP & v)\fR [inline]\fP"

.SS "template<int W> \fBsc_biguint\fP< \fBW\fP > & \fBsc_dt::sc_biguint\fP< \fBW\fP >\fB::operator\fP= (\fBconst\fP \fBsc_signed_subref\fP & v)\fR [inline]\fP"

.SS "template<int W> \fBsc_biguint\fP< \fBW\fP > & \fBsc_dt::sc_biguint\fP< \fBW\fP >\fB::operator\fP= (\fBconst\fP \fBsc_uint_base\fP & v)\fR [inline]\fP"

.SS "template<int W> \fBsc_biguint\fP< \fBW\fP > & \fBsc_dt::sc_biguint\fP< \fBW\fP >\fB::operator\fP= (\fBconst\fP \fBsc_unsigned\fP & v)\fR [inline]\fP"

.SS "template<int W> \fBsc_biguint\fP< \fBW\fP > & \fBsc_dt::sc_biguint\fP< \fBW\fP >\fB::operator\fP= (\fBconst\fP \fBsc_unsigned_subref\fP & v)\fR [inline]\fP"

.SS "template<int W> \fBsc_biguint\fP< \fBW\fP > & \fBsc_dt::sc_biguint\fP< \fBW\fP >\fB::operator\fP= (\fBdouble\fP v)\fR [inline]\fP"

.SS "template<int W> \fBsc_biguint\fP< \fBW\fP > & \fBsc_dt::sc_biguint\fP< \fBW\fP >\fB::operator\fP= (int v)\fR [inline]\fP"

.SS "template<int W> \fBsc_biguint\fP< \fBW\fP > & \fBsc_dt::sc_biguint\fP< \fBW\fP >\fB::operator\fP= (\fBint64\fP v)\fR [inline]\fP"

.SS "template<int W> \fBsc_biguint\fP< \fBW\fP > & \fBsc_dt::sc_biguint\fP< \fBW\fP >\fB::operator\fP= (\fBlong\fP v)\fR [inline]\fP"

.SS "template<int W> \fBsc_biguint\fP< \fBW\fP > & \fBsc_dt::sc_biguint\fP< \fBW\fP >\fB::operator\fP= (\fBuint64\fP v)\fR [inline]\fP"

.SS "template<int W> \fBsc_biguint\fP< \fBW\fP > & \fBsc_dt::sc_biguint\fP< \fBW\fP >\fB::operator\fP= (\fBunsigned\fP int v)\fR [inline]\fP"

.SS "template<int W> \fBsc_biguint\fP< \fBW\fP > & \fBsc_dt::sc_biguint\fP< \fBW\fP >\fB::operator\fP= (\fBunsigned\fP \fBlong\fP v)\fR [inline]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for VHDL simulator from the source code\&.
