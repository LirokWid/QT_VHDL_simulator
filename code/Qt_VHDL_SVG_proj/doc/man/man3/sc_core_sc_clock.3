.TH "sc_core::sc_clock" 3 "VHDL simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sc_core::sc_clock
.SH SYNOPSIS
.br
.PP
.PP
\fR#include <sc_clock\&.h>\fP
.PP
Inherits \fBsc_core::sc_signal< bool, SC_ONE_WRITER >\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBsc_clock\fP ()"
.br
.ti -1c
.RI "\fBsc_clock\fP (\fBconst\fP \fBchar\fP *\fBname_\fP)"
.br
.ti -1c
.RI "\fBsc_clock\fP (\fBconst\fP \fBchar\fP *\fBname_\fP, \fBconst\fP \fBsc_time\fP &\fBperiod_\fP, \fBdouble\fP \fBduty_cycle_\fP=0\&.5, \fBconst\fP \fBsc_time\fP &\fBstart_time_\fP=\fBSC_ZERO_TIME\fP, \fBbool\fP \fBposedge_first_\fP=\fBtrue\fP)"
.br
.ti -1c
.RI "\fBsc_clock\fP (\fBconst\fP \fBchar\fP *\fBname_\fP, \fBdouble\fP \fBperiod_v_\fP, \fBsc_time_unit\fP \fBperiod_tu_\fP, \fBdouble\fP \fBduty_cycle_\fP=0\&.5)"
.br
.ti -1c
.RI "\fBsc_clock\fP (\fBconst\fP \fBchar\fP *\fBname_\fP, \fBdouble\fP \fBperiod_v_\fP, \fBsc_time_unit\fP \fBperiod_tu_\fP, \fBdouble\fP \fBduty_cycle_\fP, \fBdouble\fP \fBstart_time_v_\fP, \fBsc_time_unit\fP \fBstart_time_tu_\fP, \fBbool\fP \fBposedge_first_\fP=\fBtrue\fP)"
.br
.ti -1c
.RI "\fBsc_clock\fP (\fBconst\fP \fBchar\fP *\fBname_\fP, \fBdouble\fP \fBperiod_\fP, \fBdouble\fP \fBduty_cycle_\fP=0\&.5, \fBdouble\fP \fBstart_time_\fP=0\&.0, \fBbool\fP \fBposedge_first_\fP=\fBtrue\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fB~sc_clock\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBregister_port\fP (\fBsc_port_base\fP &, \fBconst\fP \fBchar\fP *\fBif_type\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBwrite\fP (\fBconst\fP \fBbool\fP &)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_time\fP & \fBperiod\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBdouble\fP \fBduty_cycle\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBposedge_first\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_time\fP \fBstart_time\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP \fBchar\fP * \fBkind\fP () \fBconst\fP"
.br
.in -1c

Public Member Functions inherited from \fBsc_core::sc_signal< bool, SC_ONE_WRITER >\fP
.in +1c
.ti -1c
.RI "\fBsc_signal\fP ()"
.br
.ti -1c
.RI "\fBsc_signal\fP (\fBconst\fP \fBchar\fP *\fBname_\fP)"
.br
.ti -1c
.RI "\fBsc_signal\fP (\fBconst\fP \fBchar\fP *\fBname_\fP, \fBconst\fP \fBvalue_type\fP &\fBinitial_value_\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fB~sc_signal\fP ()"
.br
.ti -1c
.RI "\fBthis_type\fP & \fBoperator=\fP (\fBconst\fP \fBvalue_type\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBthis_type\fP & \fBoperator=\fP (\fBconst\fP \fBsc_signal_in_if\fP< \fBvalue_type\fP > &\fBa\fP)"
.br
.ti -1c
.RI "\fBthis_type\fP & \fBoperator=\fP (\fBconst\fP \fBthis_type\fP &\fBa\fP)"
.br
.in -1c

Public Member Functions inherited from \fBsc_core::sc_signal_t< T, POL >\fP
.in +1c
.ti -1c
.RI "\fBvirtual\fP \fBsc_writer_policy\fP \fBget_writer_policy\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP \fBsc_event\fP & \fBdefault_event\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP \fBsc_event\fP & \fBvalue_changed_event\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP \fBT\fP & \fBread\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP \fBT\fP & \fBget_data_ref\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBbool\fP \fBevent\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBwrite\fP (\fBconst\fP \fBT\fP &)"
.br
.ti -1c
.RI "\fBoperator const T &\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBthis_type\fP & \fBoperator=\fP (\fBconst\fP \fBT\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBthis_type\fP & \fBoperator=\fP (\fBconst\fP \fBsc_signal_in_if\fP< \fBT\fP > &\fBa\fP)"
.br
.ti -1c
.RI "\fBthis_type\fP & \fBoperator=\fP (\fBconst\fP \fBthis_type\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBT\fP & \fBget_new_value\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBtrace\fP (\fBsc_trace_file\fP *tf) \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBprint\fP (::std::ostream &=::std::cout) \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBdump\fP (::std::ostream &=::std::cout) \fBconst\fP"
.br
.in -1c

Public Member Functions inherited from \fBsc_core::sc_interface\fP
.in +1c
.ti -1c
.RI "\fBvirtual\fP \fB~sc_interface\fP ()"
.br
.in -1c

Public Member Functions inherited from \fBsc_core::sc_signal_write_if< T >\fP
.in +1c
.ti -1c
.RI "\fBsc_signal_write_if\fP ()"
.br
.in -1c

Public Member Functions inherited from \fBsc_core::sc_signal_channel\fP
.in +1c
.ti -1c
.RI "\fBvirtual\fP \fB~sc_signal_channel\fP ()"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_event\fP & \fBdefault_event\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_event\fP & \fBvalue_changed_event\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBevent\fP () \fBconst\fP"
.br
.in -1c

Public Member Functions inherited from \fBsc_core::sc_prim_channel\fP
.in +1c
.ti -1c
.RI "\fBbool\fP \fBupdate_requested\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBrequest_update\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBasync_request_update\fP ()"
.br
.in -1c

Public Member Functions inherited from \fBsc_core::sc_object\fP
.in +1c
.ti -1c
.RI "\fBconst\fP \fBchar\fP * \fBname\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBchar\fP * \fBbasename\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_simcontext\fP * \fBsimcontext\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBadd_attribute\fP (\fBsc_attr_base\fP &)"
.br
.ti -1c
.RI "\fBsc_attr_base\fP * \fBget_attribute\fP (\fBconst\fP std::string &\fBname_\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_attr_base\fP * \fBget_attribute\fP (\fBconst\fP std::string &\fBname_\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_attr_base\fP * \fBremove_attribute\fP (\fBconst\fP std::string &\fBname_\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBremove_all_attributes\fP ()"
.br
.ti -1c
.RI "int \fBnum_attributes\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_attr_cltn\fP & \fBattr_cltn\fP ()"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_attr_cltn\fP & \fBattr_cltn\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP std::vector< \fBsc_event\fP * > & \fBget_child_events\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvirtual\fP \fBconst\fP std::vector< \fBsc_object\fP * > & \fBget_child_objects\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_object\fP * \fBget_parent\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_object\fP * \fBget_parent_object\fP () \fBconst\fP"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "\fBstatic\fP \fBconst\fP \fBsc_time\fP & \fBtime_stamp\fP ()"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBvoid\fP \fBbefore_end_of_elaboration\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBposedge_action\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBnegedge_action\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBreport_error\fP (\fBconst\fP \fBchar\fP *id, \fBconst\fP \fBchar\fP *\fBadd_msg\fP=0) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBinit\fP (\fBconst\fP \fBsc_time\fP &, \fBdouble\fP, \fBconst\fP \fBsc_time\fP &, \fBbool\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBis_clock\fP () \fBconst\fP"
.br
.in -1c

Protected Member Functions inherited from \fBsc_core::sc_signal_t< T, POL >\fP
.in +1c
.ti -1c
.RI "\fBsc_signal_t\fP (\fBconst\fP \fBchar\fP *\fBname_\fP, \fBconst\fP \fBT\fP &\fBinitial_value_\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fB~sc_signal_t\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBupdate\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBdo_update\fP ()"
.br
.in -1c

Protected Member Functions inherited from \fBsc_core::sc_signal_inout_if< T >\fP
.in +1c
.ti -1c
.RI "\fBsc_signal_inout_if\fP ()"
.br
.in -1c

Protected Member Functions inherited from \fBsc_core::sc_signal_in_if< T >\fP
.in +1c
.ti -1c
.RI "\fBsc_signal_in_if\fP ()"
.br
.in -1c

Protected Member Functions inherited from \fBsc_core::sc_interface\fP
.in +1c
.ti -1c
.RI "\fBsc_interface\fP ()"
.br
.in -1c

Protected Member Functions inherited from \fBsc_core::sc_signal_channel\fP
.in +1c
.ti -1c
.RI "\fBsc_signal_channel\fP (\fBconst\fP \fBchar\fP *\fBname_\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBdo_update\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBdeprecated_get_data_ref\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBdeprecated_get_new_value\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBdeprecated_trace\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_event\fP * \fBlazy_kernel_event\fP (\fBsc_event\fP **, \fBconst\fP \fBchar\fP *) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBnotify_next_delta\fP (\fBsc_event\fP *\fBev\fP) \fBconst\fP"
.br
.in -1c

Protected Member Functions inherited from \fBsc_core::sc_prim_channel\fP
.in +1c
.ti -1c
.RI "\fBsc_prim_channel\fP ()"
.br
.ti -1c
.RI "\fBsc_prim_channel\fP (\fBconst\fP \fBchar\fP *)"
.br
.ti -1c
.RI "\fBvirtual\fP \fB~sc_prim_channel\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBend_of_elaboration\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBstart_of_simulation\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBend_of_simulation\fP ()"
.br
.ti -1c
.RI "\fBbool\fP \fBasync_attach_suspending\fP ()"
.br
.ti -1c
.RI "\fBbool\fP \fBasync_detach_suspending\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBconst\fP \fBsc_event\fP &\fBe\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBconst\fP \fBsc_event_or_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBconst\fP \fBsc_event_and_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBconst\fP \fBsc_time\fP &t)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBdouble\fP v, \fBsc_time_unit\fP \fBtu\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBconst\fP \fBsc_time\fP &t, \fBconst\fP \fBsc_event\fP &\fBe\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBdouble\fP v, \fBsc_time_unit\fP \fBtu\fP, \fBconst\fP \fBsc_event\fP &\fBe\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBconst\fP \fBsc_time\fP &t, \fBconst\fP \fBsc_event_or_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBdouble\fP v, \fBsc_time_unit\fP \fBtu\fP, \fBconst\fP \fBsc_event_or_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBconst\fP \fBsc_time\fP &t, \fBconst\fP \fBsc_event_and_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (\fBdouble\fP v, \fBsc_time_unit\fP \fBtu\fP, \fBconst\fP \fBsc_event_and_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwait\fP (int \fBn\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP ()"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBconst\fP \fBsc_event\fP &\fBe\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBconst\fP \fBsc_event_or_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBconst\fP \fBsc_event_and_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBconst\fP \fBsc_time\fP &t)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBdouble\fP v, \fBsc_time_unit\fP \fBtu\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBconst\fP \fBsc_time\fP &t, \fBconst\fP \fBsc_event\fP &\fBe\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBdouble\fP v, \fBsc_time_unit\fP \fBtu\fP, \fBconst\fP \fBsc_event\fP &\fBe\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBconst\fP \fBsc_time\fP &t, \fBconst\fP \fBsc_event_or_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBdouble\fP v, \fBsc_time_unit\fP \fBtu\fP, \fBconst\fP \fBsc_event_or_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBconst\fP \fBsc_time\fP &t, \fBconst\fP \fBsc_event_and_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBnext_trigger\fP (\fBdouble\fP v, \fBsc_time_unit\fP \fBtu\fP, \fBconst\fP \fBsc_event_and_list\fP &\fBel\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBtimed_out\fP ()"
.br
.in -1c

Protected Member Functions inherited from \fBsc_core::sc_object\fP
.in +1c
.ti -1c
.RI "\fBsc_object\fP ()"
.br
.ti -1c
.RI "\fBsc_object\fP (\fBconst\fP \fBchar\fP *\fBnm\fP)"
.br
.ti -1c
.RI "\fBsc_object\fP (\fBconst\fP \fBsc_object\fP &)"
.br
.ti -1c
.RI "\fBsc_object\fP & \fBoperator=\fP (\fBconst\fP \fBsc_object\fP &)"
.br
.ti -1c
.RI "\fBvirtual\fP \fB~sc_object\fP ()"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBadd_child_event\fP (\fBsc_event\fP *\fBevent_p\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBadd_child_object\fP (\fBsc_object\fP *\fBobject_p\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBbool\fP \fBremove_child_event\fP (\fBsc_event\fP *\fBevent_p\fP)"
.br
.ti -1c
.RI "\fBvirtual\fP \fBbool\fP \fBremove_child_object\fP (\fBsc_object\fP *\fBobject_p\fP)"
.br
.ti -1c
.RI "\fBphase_cb_mask\fP \fBregister_simulation_phase_callback\fP (\fBphase_cb_mask\fP)"
.br
.ti -1c
.RI "\fBphase_cb_mask\fP \fBunregister_simulation_phase_callback\fP (\fBphase_cb_mask\fP)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBsc_time\fP \fBm_period\fP"
.br
.ti -1c
.RI "\fBdouble\fP \fBm_duty_cycle\fP"
.br
.ti -1c
.RI "\fBsc_time\fP \fBm_start_time\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBm_posedge_first\fP"
.br
.ti -1c
.RI "\fBsc_time\fP \fBm_posedge_time\fP"
.br
.ti -1c
.RI "\fBsc_time\fP \fBm_negedge_time\fP"
.br
.ti -1c
.RI "\fBsc_event\fP \fBm_next_posedge_event\fP"
.br
.ti -1c
.RI "\fBsc_event\fP \fBm_next_negedge_event\fP"
.br
.in -1c

Protected Attributes inherited from \fBsc_core::sc_signal_t< T, POL >\fP
.in +1c
.ti -1c
.RI "\fBT\fP \fBm_cur_val\fP"
.br
.ti -1c
.RI "\fBT\fP \fBm_new_val\fP"
.br
.in -1c

Protected Attributes inherited from \fBsc_core::sc_signal_channel\fP
.in +1c
.ti -1c
.RI "\fBsc_event\fP * \fBm_change_event_p\fP"
.br
.ti -1c
.RI "\fBsc_dt::uint64\fP \fBm_change_stamp\fP"
.br
.in -1c
.SS "Private Types"

.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBsc_signal\fP< \fBbool\fP, \fBSC_ONE_WRITER\fP > \fBbase_type\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBsc_clock\fP (\fBconst\fP \fBsc_clock\fP &)"
.br
.ti -1c
.RI "\fBsc_clock\fP & \fBoperator=\fP (\fBconst\fP \fBsc_clock\fP &)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "\fBclass\fP \fBsc_clock_posedge_callback\fP"
.br
.ti -1c
.RI "\fBclass\fP \fBsc_clock_negedge_callback\fP"
.br
.in -1c
.SS "Additional Inherited Members"


Public Types inherited from \fBsc_core::sc_signal< bool, SC_ONE_WRITER >\fP
.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBsc_signal_inout_if\fP< \fBbool\fP > \fBif_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBsc_signal_t\fP< \fBbool\fP, \fBPOL\fP > \fBbase_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBsc_signal\fP< \fBbool\fP, \fBPOL\fP > \fBthis_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBbool\fP \fBvalue_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBsc_writer_policy_check\fP< \fBPOL\fP > \fBpolicy_type\fP"
.br
.in -1c

Public Types inherited from \fBsc_core::sc_prim_channel\fP
.in +1c
.ti -1c
.RI "enum { \fBlist_end\fP = 0xdb }"
.br
.in -1c

Public Types inherited from \fBsc_core::sc_object\fP
.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBunsigned\fP \fBphase_cb_mask\fP"
.br
.in -1c

Protected Types inherited from \fBsc_core::sc_signal_t< T, POL >\fP
.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBsc_signal_inout_if\fP< \fBT\fP > \fBif_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBsc_signal_channel\fP \fBbase_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBsc_signal_t\fP< \fBT\fP, \fBPOL\fP > \fBthis_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP \fBsc_writer_policy_check\fP< \fBPOL\fP > \fBpolicy_type\fP"
.br
.in -1c
.SH "Member Typedef Documentation"
.PP 
.SS "\fBtypedef\fP \fBsc_signal\fP<\fBbool\fP,\fBSC_ONE_WRITER\fP> \fBsc_core::sc_clock::base_type\fP\fR [private]\fP"

.SH "Constructor & Destructor Documentation"
.PP 
.SS "sc_core::sc_clock::sc_clock ()"

.SS "sc_core::sc_clock::sc_clock (\fBconst\fP \fBchar\fP * name_)\fR [explicit]\fP"

.SS "sc_core::sc_clock::sc_clock (\fBconst\fP \fBchar\fP * name_, \fBconst\fP \fBsc_time\fP & period_, \fBdouble\fP duty_cycle_ = \fR0\&.5\fP, \fBconst\fP \fBsc_time\fP & start_time_ = \fR\fBSC_ZERO_TIME\fP\fP, \fBbool\fP posedge_first_ = \fR\fBtrue\fP\fP)"

.SS "sc_core::sc_clock::sc_clock (\fBconst\fP \fBchar\fP * name_, \fBdouble\fP period_v_, \fBsc_time_unit\fP period_tu_, \fBdouble\fP duty_cycle_ = \fR0\&.5\fP)"

.SS "sc_core::sc_clock::sc_clock (\fBconst\fP \fBchar\fP * name_, \fBdouble\fP period_v_, \fBsc_time_unit\fP period_tu_, \fBdouble\fP duty_cycle_, \fBdouble\fP start_time_v_, \fBsc_time_unit\fP start_time_tu_, \fBbool\fP posedge_first_ = \fR\fBtrue\fP\fP)"

.SS "sc_core::sc_clock::sc_clock (\fBconst\fP \fBchar\fP * name_, \fBdouble\fP period_, \fBdouble\fP duty_cycle_ = \fR0\&.5\fP, \fBdouble\fP start_time_ = \fR0\&.0\fP, \fBbool\fP posedge_first_ = \fR\fBtrue\fP\fP)"

.SS "\fBvirtual\fP sc_core::sc_clock::~sc_clock ()\fR [virtual]\fP"

.SS "sc_core::sc_clock::sc_clock (\fBconst\fP \fBsc_clock\fP &)\fR [private]\fP"

.SH "Member Function Documentation"
.PP 
.SS "\fBvoid\fP sc_core::sc_clock::before_end_of_elaboration ()\fR [protected]\fP, \fR [virtual]\fP"

.PP
Reimplemented from \fBsc_core::sc_prim_channel\fP\&.
.SS "\fBdouble\fP sc_core::sc_clock::duty_cycle () const\fR [inline]\fP"

.SS "\fBvoid\fP sc_core::sc_clock::init (\fBconst\fP \fBsc_time\fP &, \fBdouble\fP, \fBconst\fP \fBsc_time\fP &, \fBbool\fP)\fR [protected]\fP"

.SS "\fBbool\fP sc_core::sc_clock::is_clock () const\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBvirtual\fP \fBconst\fP \fBchar\fP * sc_core::sc_clock::kind () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Reimplemented from \fBsc_core::sc_signal_t< T, POL >\fP\&.
.SS "\fBvoid\fP sc_core::sc_clock::negedge_action ()\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBsc_clock\fP & sc_core::sc_clock::operator= (\fBconst\fP \fBsc_clock\fP &)\fR [private]\fP"

.SS "\fBconst\fP \fBsc_time\fP & sc_core::sc_clock::period () const\fR [inline]\fP"

.SS "\fBvoid\fP sc_core::sc_clock::posedge_action ()\fR [inline]\fP, \fR [protected]\fP"

.SS "\fBbool\fP sc_core::sc_clock::posedge_first () const\fR [inline]\fP"

.SS "\fBvirtual\fP \fBvoid\fP sc_core::sc_clock::register_port (\fBsc_port_base\fP &, \fBconst\fP \fBchar\fP * if_type)\fR [virtual]\fP"

.PP
Reimplemented from \fBsc_core::sc_signal_t< T, POL >\fP\&.
.SS "\fBvoid\fP sc_core::sc_clock::report_error (\fBconst\fP \fBchar\fP * id, \fBconst\fP \fBchar\fP * add_msg = \fR0\fP) const\fR [protected]\fP"

.SS "\fBsc_time\fP sc_core::sc_clock::start_time () const\fR [inline]\fP"

.SS "\fBstatic\fP \fBconst\fP \fBsc_time\fP & sc_core::sc_clock::time_stamp ()\fR [static]\fP"

.SS "\fBvirtual\fP \fBvoid\fP sc_core::sc_clock::write (\fBconst\fP \fBbool\fP &)\fR [virtual]\fP"

.SH "Friends And Related Symbol Documentation"
.PP 
.SS "\fBfriend\fP \fBclass\fP \fBsc_clock_negedge_callback\fP\fR [friend]\fP"

.SS "\fBfriend\fP \fBclass\fP \fBsc_clock_posedge_callback\fP\fR [friend]\fP"

.SH "Member Data Documentation"
.PP 
.SS "\fBdouble\fP sc_core::sc_clock::m_duty_cycle\fR [protected]\fP"

.SS "\fBsc_time\fP sc_core::sc_clock::m_negedge_time\fR [protected]\fP"

.SS "\fBsc_event\fP sc_core::sc_clock::m_next_negedge_event\fR [protected]\fP"

.SS "\fBsc_event\fP sc_core::sc_clock::m_next_posedge_event\fR [protected]\fP"

.SS "\fBsc_time\fP sc_core::sc_clock::m_period\fR [protected]\fP"

.SS "\fBbool\fP sc_core::sc_clock::m_posedge_first\fR [protected]\fP"

.SS "\fBsc_time\fP sc_core::sc_clock::m_posedge_time\fR [protected]\fP"

.SS "\fBsc_time\fP sc_core::sc_clock::m_start_time\fR [protected]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for VHDL simulator from the source code\&.
