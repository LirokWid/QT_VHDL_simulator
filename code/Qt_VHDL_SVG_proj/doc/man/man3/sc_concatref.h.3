.TH "C:/Users/BJRODIER/Documents/QT_REPO/QT_VHDL_simulator/code/Ressources/SystemC/include/sysc/datatypes/misc/sc_concatref.h" 3 "VHDL simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/BJRODIER/Documents/QT_REPO/QT_VHDL_simulator/code/Ressources/SystemC/include/sysc/datatypes/misc/sc_concatref.h
.SH SYNOPSIS
.br
.PP
\fR#include 'sysc/kernel/sc_object\&.h'\fP
.br
\fR#include 'sysc/datatypes/misc/sc_value_base\&.h'\fP
.br
\fR#include 'sysc/utils/sc_temporary\&.h'\fP
.br
\fR#include 'sysc/datatypes/bit/sc_bv\&.h'\fP
.br
\fR#include 'sysc/datatypes/bit/sc_lv\&.h'\fP
.br
\fR#include 'sysc/datatypes/int/sc_int_base\&.h'\fP
.br
\fR#include 'sysc/datatypes/int/sc_uint_base\&.h'\fP
.br
\fR#include 'sysc/datatypes/int/sc_signed\&.h'\fP
.br
\fR#include 'sysc/datatypes/int/sc_unsigned\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBsc_dt::sc_concatref\fP"
.br
.ti -1c
.RI "class \fBsc_dt::sc_concat_bool\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBsc_dt\fP"
.br
.ti -1c
.RI "namespace \fBsc_core\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#\fBdefine\fP \fBSC_CONCAT_OP_TYPE\fP(\fBRESULT\fP,  \fBOP\fP,  \fBOTHER_TYPE\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBSC_CONCAT_OP\fP(\fBRESULT\fP,  \fBOP\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBSC_CONCAT_BOOL_OP\fP(\fBOP\fP)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBbool\fP \fBsc_dt::and_reduce\fP (\fBconst\fP \fBsc_concatref\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBsc_dt::nand_reduce\fP (\fBconst\fP \fBsc_concatref\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBsc_dt::or_reduce\fP (\fBconst\fP \fBsc_concatref\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBsc_dt::nor_reduce\fP (\fBconst\fP \fBsc_concatref\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBsc_dt::xor_reduce\fP (\fBconst\fP \fBsc_concatref\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBsc_dt::xnor_reduce\fP (\fBconst\fP \fBsc_concatref\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP \fBsc_dt::operator<<\fP (\fBconst\fP \fBsc_concatref\fP &target, \fBuint64\fP \fBshift\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP \fBsc_dt::operator<<\fP (\fBconst\fP \fBsc_concatref\fP &target, \fBint64\fP \fBshift\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP \fBsc_dt::operator<<\fP (\fBconst\fP \fBsc_concatref\fP &target, \fBunsigned\fP \fBlong\fP \fBshift\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP \fBsc_dt::operator<<\fP (\fBconst\fP \fBsc_concatref\fP &target, int \fBshift\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP \fBsc_dt::operator<<\fP (\fBconst\fP \fBsc_concatref\fP &target, \fBunsigned\fP int \fBshift\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP \fBsc_dt::operator<<\fP (\fBconst\fP \fBsc_concatref\fP &target, \fBlong\fP \fBshift\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP \fBsc_dt::operator>>\fP (\fBconst\fP \fBsc_concatref\fP &target, \fBuint64\fP \fBshift\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP \fBsc_dt::operator>>\fP (\fBconst\fP \fBsc_concatref\fP &target, \fBint64\fP \fBshift\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP \fBsc_dt::operator>>\fP (\fBconst\fP \fBsc_concatref\fP &target, \fBunsigned\fP \fBlong\fP \fBshift\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP \fBsc_dt::operator>>\fP (\fBconst\fP \fBsc_concatref\fP &target, int \fBshift\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP \fBsc_dt::operator>>\fP (\fBconst\fP \fBsc_concatref\fP &target, \fBunsigned\fP int \fBshift\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_unsigned\fP \fBsc_dt::operator>>\fP (\fBconst\fP \fBsc_concatref\fP &target, \fBlong\fP \fBshift\fP)"
.br
.ti -1c
.RI "inline::std::ostream & \fBsc_dt::operator<<\fP (::std::ostream &\fBos\fP, \fBconst\fP \fBsc_concatref\fP &v)"
.br
.ti -1c
.RI "inline::std::istream & \fBsc_dt::operator>>\fP (::std::istream &\fBis\fP, \fBsc_concatref\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_dt::sc_concatref\fP & \fBsc_dt::concat\fP (\fBsc_dt::sc_value_base\fP &\fBa\fP, \fBsc_dt::sc_value_base\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_dt::sc_concatref\fP & \fBsc_dt::concat\fP (\fBconst\fP \fBsc_dt::sc_value_base\fP &\fBa\fP, \fBconst\fP \fBsc_dt::sc_value_base\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_dt::sc_concatref\fP & \fBsc_dt::concat\fP (\fBconst\fP \fBsc_dt::sc_value_base\fP &\fBa\fP, \fBbool\fP \fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_dt::sc_concatref\fP & \fBsc_dt::concat\fP (\fBbool\fP \fBa\fP, \fBconst\fP \fBsc_dt::sc_value_base\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBsc_dt::sc_concatref\fP & \fBsc_dt::operator,\fP (\fBsc_dt::sc_value_base\fP &\fBa\fP, \fBsc_dt::sc_value_base\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_dt::sc_concatref\fP & \fBsc_dt::operator,\fP (\fBconst\fP \fBsc_dt::sc_value_base\fP &\fBa\fP, \fBconst\fP \fBsc_dt::sc_value_base\fP &\fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_dt::sc_concatref\fP & \fBsc_dt::operator,\fP (\fBconst\fP \fBsc_dt::sc_value_base\fP &\fBa\fP, \fBbool\fP \fBb\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_dt::sc_concatref\fP & \fBsc_dt::operator,\fP (\fBbool\fP \fBa\fP, \fBconst\fP \fBsc_dt::sc_value_base\fP &\fBb\fP)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBsc_byte_heap\fP \fBSC_API\fP \fBsc_core::sc_temp_heap\fP"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#\fBdefine\fP SC_CONCAT_BOOL_OP(\fBOP\fP)"
\fBValue:\fP.PP
.nf
    inline bool operator OP ( const sc_concatref& a, const sc_concatref& b ) \\
    { \\
        return a\&.value() OP b\&.value(); \\
    }  \\
    SC_CONCAT_OP_TYPE(bool,OP,int) \\
    SC_CONCAT_OP_TYPE(bool,OP,long) \\
    SC_CONCAT_OP_TYPE(bool,OP,int64) \\
    SC_CONCAT_OP_TYPE(bool,OP,unsigned int) \\
    SC_CONCAT_OP_TYPE(bool,OP,unsigned long) \\
    SC_CONCAT_OP_TYPE(bool,OP,uint64) \\
    SC_CONCAT_OP_TYPE(bool,OP,const sc_int_base&) \\
    SC_CONCAT_OP_TYPE(bool,OP,const sc_uint_base&) \\
    SC_CONCAT_OP_TYPE(bool,OP,const sc_signed&) \\
    SC_CONCAT_OP_TYPE(bool,OP,const sc_unsigned&) \\
    inline bool operator OP ( const sc_concatref& a, bool b ) \\
    { \\
        return a\&.value() OP (int)b; \\
    } \\
    inline bool operator OP ( bool a, const sc_concatref& b ) \\
    { \\
        return (int)a OP b\&.value(); \\
    }
.fi

.SS "#\fBdefine\fP SC_CONCAT_OP(\fBRESULT\fP, \fBOP\fP)"
\fBValue:\fP.PP
.nf
    inline RESULT operator OP ( const sc_concatref& a, const sc_concatref& b ) \\
    { \\
        return a\&.value() OP b\&.value(); \\
    }  \\
    SC_CONCAT_OP_TYPE(const sc_signed,OP,int) \\
    SC_CONCAT_OP_TYPE(const sc_signed,OP,long) \\
    SC_CONCAT_OP_TYPE(const sc_signed,OP,int64) \\
    SC_CONCAT_OP_TYPE(RESULT,OP,unsigned int) \\
    SC_CONCAT_OP_TYPE(RESULT,OP,unsigned long) \\
    SC_CONCAT_OP_TYPE(RESULT,OP,uint64) \\
    SC_CONCAT_OP_TYPE(const sc_signed,OP,const sc_int_base&) \\
    SC_CONCAT_OP_TYPE(RESULT,OP,const sc_uint_base&) \\
    SC_CONCAT_OP_TYPE(const sc_signed,OP,const sc_signed&) \\
    SC_CONCAT_OP_TYPE(RESULT,OP,const sc_unsigned&) \\
    inline RESULT operator OP ( const sc_concatref& a, bool b ) \\
    { \\
        return a\&.value() OP (int)b; \\
    } \\
    inline RESULT operator OP ( bool a, const sc_concatref& b ) \\
    { \\
        return (int)a OP b\&.value(); \\
    }
.fi

.SS "#\fBdefine\fP SC_CONCAT_OP_TYPE(\fBRESULT\fP, \fBOP\fP, \fBOTHER_TYPE\fP)"
\fBValue:\fP.PP
.nf
    inline RESULT operator OP ( const sc_concatref& a, OTHER_TYPE b ) \\
    { \\
        return a\&.value() OP b; \\
    } \\
    inline RESULT operator OP ( OTHER_TYPE a, const sc_concatref& b ) \\
    { \\
        return a OP b\&.value(); \\
    }
.fi

.SH "Author"
.PP 
Generated automatically by Doxygen for VHDL simulator from the source code\&.
