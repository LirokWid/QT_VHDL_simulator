.TH "sc_dt::sc_fxval_fast" 3 "VHDL simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sc_dt::sc_fxval_fast
.SH SYNOPSIS
.br
.PP
.PP
\fR#include <sc_fxval\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBsc_fxval_fast\fP (\fBsc_fxval_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fBSCFX_EXPLICIT_\fP \fBsc_fxval_fast\fP (\fBint\fP, \fBsc_fxval_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fBSCFX_EXPLICIT_\fP \fBsc_fxval_fast\fP (\fBunsigned\fP \fBint\fP, \fBsc_fxval_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fBSCFX_EXPLICIT_\fP \fBsc_fxval_fast\fP (\fBlong\fP, \fBsc_fxval_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fBSCFX_EXPLICIT_\fP \fBsc_fxval_fast\fP (\fBunsigned\fP \fBlong\fP, \fBsc_fxval_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fBSCFX_EXPLICIT_\fP \fBsc_fxval_fast\fP (\fBfloat\fP, \fBsc_fxval_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fBSCFX_EXPLICIT_\fP \fBsc_fxval_fast\fP (\fBdouble\fP, \fBsc_fxval_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fBSCFX_EXPLICIT_\fP \fBsc_fxval_fast\fP (\fBconst\fP \fBchar\fP *, \fBsc_fxval_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fBsc_fxval_fast\fP (\fBconst\fP \fBsc_fxval\fP &, \fBsc_fxval_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fBsc_fxval_fast\fP (\fBconst\fP \fBsc_fxval_fast\fP &, \fBsc_fxval_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fBsc_fxval_fast\fP (\fBconst\fP \fBsc_fxnum\fP &, \fBsc_fxval_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fBsc_fxval_fast\fP (\fBconst\fP \fBsc_fxnum_fast\fP &, \fBsc_fxval_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fBSCFX_EXPLICIT_OTHER_\fP \fBsc_fxval_fast\fP (\fBint64\fP, \fBsc_fxval_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fBSCFX_EXPLICIT_OTHER_\fP \fBsc_fxval_fast\fP (\fBuint64\fP, \fBsc_fxval_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fBSCFX_EXPLICIT_OTHER_\fP \fBsc_fxval_fast\fP (\fBconst\fP \fBsc_int_base\fP &, \fBsc_fxval_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fBSCFX_EXPLICIT_OTHER_\fP \fBsc_fxval_fast\fP (\fBconst\fP \fBsc_uint_base\fP &, \fBsc_fxval_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fBSCFX_EXPLICIT_OTHER_\fP \fBsc_fxval_fast\fP (\fBconst\fP \fBsc_signed\fP &, \fBsc_fxval_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fBSCFX_EXPLICIT_OTHER_\fP \fBsc_fxval_fast\fP (\fBconst\fP \fBsc_unsigned\fP &, \fBsc_fxval_fast_observer\fP *=0)"
.br
.ti -1c
.RI "\fB~sc_fxval_fast\fP ()"
.br
.ti -1c
.RI "\fBdouble\fP \fBget_val\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBset_val\fP (\fBdouble\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval_fast\fP \fBoperator\-\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval_fast\fP & \fBoperator+\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBDECL_BIN_OP_T\fP (/, \fBint64\fP) DECL_BIN_OP_T(/"
.br
.ti -1c
.RI "\fBuint64\fP \fBDECL_BIN_OP_T\fP (/, \fBconst\fP \fBsc_int_base\fP &) DECL_BIN_OP_T(/"
.br
.ti -1c
.RI "\fBuint64\fP \fBconst\fP \fBsc_uint_base\fP & \fBDECL_BIN_OP_T\fP (/, \fBconst\fP \fBsc_signed\fP &) \fBfriend\fP \fBconst\fP \fBsc_fxval_fast\fP \fBoperator\fP<<(\fBconst\fP \fBsc_fxval_fast\fP &"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval_fast\fP \fBoperator++\fP (\fBint\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval_fast\fP \fBoperator\-\-\fP (\fBint\fP)"
.br
.ti -1c
.RI "\fBsc_fxval_fast\fP & \fBoperator++\fP ()"
.br
.ti -1c
.RI "\fBsc_fxval_fast\fP & \fBoperator\-\-\fP ()"
.br
.ti -1c
.RI "\fBoperator double\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBshort\fP \fBto_short\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBunsigned\fP \fBshort\fP \fBto_ushort\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBint\fP \fBto_int\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBunsigned\fP \fBint\fP \fBto_uint\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBlong\fP \fBto_long\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBunsigned\fP \fBlong\fP \fBto_ulong\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBint64\fP \fBto_int64\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBuint64\fP \fBto_uint64\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBfloat\fP \fBto_float\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBdouble\fP \fBto_double\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP (\fBsc_numrep\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP (\fBsc_numrep\fP, \fBbool\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP (\fBsc_fmt\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP (\fBsc_numrep\fP, \fBsc_fmt\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP (\fBsc_numrep\fP, \fBbool\fP, \fBsc_fmt\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_dec\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_bin\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_oct\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_hex\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBis_neg\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBis_zero\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBis_nan\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBis_inf\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBis_normal\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBrounding_flag\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBprint\fP (::std::ostream &=::std::cout) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBscan\fP (::std::istream &=::std::cin)"
.br
.ti -1c
.RI "\fBvoid\fP \fBdump\fP (::std::ostream &=::std::cout) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBget_bit\fP (\fBint\fP) \fBconst\fP"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBuint64\fP \fBconst\fP \fBsc_uint_base\fP \fBint\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBsc_fxval_fast_observer\fP * \fBobserver\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_fxval_fast_observer\fP * \fBlock_observer\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBunlock_observer\fP (\fBsc_fxval_fast_observer\fP *) \fBconst\fP"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBstatic\fP \fBdouble\fP \fBfrom_string\fP (\fBconst\fP \fBchar\fP *)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBdouble\fP \fBm_val\fP"
.br
.ti -1c
.RI "\fBsc_fxval_fast_observer\fP * \fBm_observer\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "\fBclass\fP \fBsc_fxnum_fast\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBneg\fP (\fBsc_fxval_fast\fP &, \fBconst\fP \fBsc_fxval_fast\fP &)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval_fast\fP \fBoperator/\fP (\fBconst\fP \fBsc_fxval_fast\fP &, \fBconst\fP \fBsc_fxval_fast\fP &)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_fxval_fast\fP \fBoperator>>\fP (\fBconst\fP \fBsc_fxval_fast\fP &, \fBint\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBlshift\fP (\fBsc_fxval_fast\fP &, \fBconst\fP \fBsc_fxval_fast\fP &, \fBint\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBrshift\fP (\fBsc_fxval_fast\fP &, \fBconst\fP \fBsc_fxval_fast\fP &, \fBint\fP)"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "sc_dt::sc_fxval_fast::sc_fxval_fast (\fBsc_fxval_fast_observer\fP * observer_ = \fR0\fP)\fR [inline]\fP, \fR [explicit]\fP"

.SS "\fBSCFX_EXPLICIT_\fP sc_dt::sc_fxval_fast::sc_fxval_fast (\fBint\fP, \fBsc_fxval_fast_observer\fP * = \fR0\fP)"

.SS "\fBSCFX_EXPLICIT_\fP sc_dt::sc_fxval_fast::sc_fxval_fast (\fBunsigned\fP \fBint\fP, \fBsc_fxval_fast_observer\fP * = \fR0\fP)"

.SS "\fBSCFX_EXPLICIT_\fP sc_dt::sc_fxval_fast::sc_fxval_fast (\fBlong\fP, \fBsc_fxval_fast_observer\fP * = \fR0\fP)"

.SS "\fBSCFX_EXPLICIT_\fP sc_dt::sc_fxval_fast::sc_fxval_fast (\fBunsigned\fP \fBlong\fP, \fBsc_fxval_fast_observer\fP * = \fR0\fP)"

.SS "\fBSCFX_EXPLICIT_\fP sc_dt::sc_fxval_fast::sc_fxval_fast (\fBfloat\fP, \fBsc_fxval_fast_observer\fP * = \fR0\fP)"

.SS "\fBSCFX_EXPLICIT_\fP sc_dt::sc_fxval_fast::sc_fxval_fast (\fBdouble\fP, \fBsc_fxval_fast_observer\fP * = \fR0\fP)"

.SS "\fBSCFX_EXPLICIT_\fP sc_dt::sc_fxval_fast::sc_fxval_fast (\fBconst\fP \fBchar\fP *, \fBsc_fxval_fast_observer\fP * = \fR0\fP)"

.SS "sc_dt::sc_fxval_fast::sc_fxval_fast (\fBconst\fP \fBsc_fxval\fP &, \fBsc_fxval_fast_observer\fP * = \fR0\fP)"

.SS "sc_dt::sc_fxval_fast::sc_fxval_fast (\fBconst\fP \fBsc_fxval_fast\fP & a, \fBsc_fxval_fast_observer\fP * observer_ = \fR0\fP)\fR [inline]\fP"

.SS "sc_dt::sc_fxval_fast::sc_fxval_fast (\fBconst\fP \fBsc_fxnum\fP & a, \fBsc_fxval_fast_observer\fP * observer_ = \fR0\fP)\fR [inline]\fP"

.SS "sc_dt::sc_fxval_fast::sc_fxval_fast (\fBconst\fP \fBsc_fxnum_fast\fP & a, \fBsc_fxval_fast_observer\fP * observer_ = \fR0\fP)\fR [inline]\fP"

.SS "\fBSCFX_EXPLICIT_OTHER_\fP sc_dt::sc_fxval_fast::sc_fxval_fast (\fBint64\fP, \fBsc_fxval_fast_observer\fP * = \fR0\fP)"

.SS "\fBSCFX_EXPLICIT_OTHER_\fP sc_dt::sc_fxval_fast::sc_fxval_fast (\fBuint64\fP, \fBsc_fxval_fast_observer\fP * = \fR0\fP)"

.SS "\fBSCFX_EXPLICIT_OTHER_\fP sc_dt::sc_fxval_fast::sc_fxval_fast (\fBconst\fP \fBsc_int_base\fP &, \fBsc_fxval_fast_observer\fP * = \fR0\fP)"

.SS "\fBSCFX_EXPLICIT_OTHER_\fP sc_dt::sc_fxval_fast::sc_fxval_fast (\fBconst\fP \fBsc_uint_base\fP &, \fBsc_fxval_fast_observer\fP * = \fR0\fP)"

.SS "\fBSCFX_EXPLICIT_OTHER_\fP sc_dt::sc_fxval_fast::sc_fxval_fast (\fBconst\fP \fBsc_signed\fP &, \fBsc_fxval_fast_observer\fP * = \fR0\fP)"

.SS "\fBSCFX_EXPLICIT_OTHER_\fP sc_dt::sc_fxval_fast::sc_fxval_fast (\fBconst\fP \fBsc_unsigned\fP &, \fBsc_fxval_fast_observer\fP * = \fR0\fP)"

.SS "sc_dt::sc_fxval_fast::~sc_fxval_fast ()\fR [inline]\fP"

.SH "Member Function Documentation"
.PP 
.SS "\fBuint64\fP sc_dt::sc_fxval_fast::DECL_BIN_OP_T (/, \fBconst\fP \fBsc_int_base\fP &)"

.SS "\fBuint64\fP \fBconst\fP \fBsc_uint_base\fP & sc_dt::sc_fxval_fast::DECL_BIN_OP_T (/, \fBconst\fP \fBsc_signed\fP &) const &"

.SS "sc_dt::sc_fxval_fast::DECL_BIN_OP_T (/, \fBint64\fP)"

.SS "\fBvoid\fP sc_dt::sc_fxval_fast::dump (::std::ostream & = \fR::std::cout\fP) const"

.SS "\fBstatic\fP \fBdouble\fP sc_dt::sc_fxval_fast::from_string (\fBconst\fP \fBchar\fP *)\fR [static]\fP, \fR [protected]\fP"

.SS "\fBbool\fP sc_dt::sc_fxval_fast::get_bit (\fBint\fP) const"

.SS "\fBdouble\fP sc_dt::sc_fxval_fast::get_val () const\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::sc_fxval_fast::is_inf () const\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::sc_fxval_fast::is_nan () const\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::sc_fxval_fast::is_neg () const\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::sc_fxval_fast::is_normal () const\fR [inline]\fP"

.SS "\fBbool\fP sc_dt::sc_fxval_fast::is_zero () const\fR [inline]\fP"

.SS "\fBsc_fxval_fast_observer\fP * sc_dt::sc_fxval_fast::lock_observer () const\fR [protected]\fP"

.SS "\fBsc_fxval_fast_observer\fP * sc_dt::sc_fxval_fast::observer () const\fR [inline]\fP, \fR [protected]\fP"

.SS "sc_dt::sc_fxval_fast::operator \fBdouble\fP () const\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_fxval_fast\fP & sc_dt::sc_fxval_fast::operator+ () const\fR [inline]\fP"

.SS "\fBsc_fxval_fast\fP & sc_dt::sc_fxval_fast::operator++ ()\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_fxval_fast\fP sc_dt::sc_fxval_fast::operator++ (\fBint\fP)\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_fxval_fast\fP sc_dt::sc_fxval_fast::operator\- () const\fR [inline]\fP"

.SS "\fBsc_fxval_fast\fP & sc_dt::sc_fxval_fast::operator\-\- ()\fR [inline]\fP"

.SS "\fBconst\fP \fBsc_fxval_fast\fP sc_dt::sc_fxval_fast::operator\-\- (\fBint\fP)\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::sc_fxval_fast::print (::std::ostream & = \fR::std::cout\fP) const"

.SS "\fBbool\fP sc_dt::sc_fxval_fast::rounding_flag () const\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::sc_fxval_fast::scan (::std::istream & = \fR::std::cin\fP)"

.SS "\fBvoid\fP sc_dt::sc_fxval_fast::set_val (\fBdouble\fP val_)\fR [inline]\fP"

.SS "\fBconst\fP std::string sc_dt::sc_fxval_fast::to_bin () const"

.SS "\fBconst\fP std::string sc_dt::sc_fxval_fast::to_dec () const"

.SS "\fBdouble\fP sc_dt::sc_fxval_fast::to_double () const\fR [inline]\fP"

.SS "\fBfloat\fP sc_dt::sc_fxval_fast::to_float () const\fR [inline]\fP"

.SS "\fBconst\fP std::string sc_dt::sc_fxval_fast::to_hex () const"

.SS "\fBint\fP sc_dt::sc_fxval_fast::to_int () const\fR [inline]\fP"

.SS "\fBint64\fP sc_dt::sc_fxval_fast::to_int64 () const\fR [inline]\fP"

.SS "\fBlong\fP sc_dt::sc_fxval_fast::to_long () const\fR [inline]\fP"

.SS "\fBconst\fP std::string sc_dt::sc_fxval_fast::to_oct () const"

.SS "\fBshort\fP sc_dt::sc_fxval_fast::to_short () const\fR [inline]\fP"

.SS "\fBconst\fP std::string sc_dt::sc_fxval_fast::to_string () const"

.SS "\fBconst\fP std::string sc_dt::sc_fxval_fast::to_string (\fBsc_fmt\fP) const"

.SS "\fBconst\fP std::string sc_dt::sc_fxval_fast::to_string (\fBsc_numrep\fP) const"

.SS "\fBconst\fP std::string sc_dt::sc_fxval_fast::to_string (\fBsc_numrep\fP, \fBbool\fP) const"

.SS "\fBconst\fP std::string sc_dt::sc_fxval_fast::to_string (\fBsc_numrep\fP, \fBbool\fP, \fBsc_fmt\fP) const"

.SS "\fBconst\fP std::string sc_dt::sc_fxval_fast::to_string (\fBsc_numrep\fP, \fBsc_fmt\fP) const"

.SS "\fBunsigned\fP \fBint\fP sc_dt::sc_fxval_fast::to_uint () const\fR [inline]\fP"

.SS "\fBuint64\fP sc_dt::sc_fxval_fast::to_uint64 () const\fR [inline]\fP"

.SS "\fBunsigned\fP \fBlong\fP sc_dt::sc_fxval_fast::to_ulong () const\fR [inline]\fP"

.SS "\fBunsigned\fP \fBshort\fP sc_dt::sc_fxval_fast::to_ushort () const\fR [inline]\fP"

.SS "\fBvoid\fP sc_dt::sc_fxval_fast::unlock_observer (\fBsc_fxval_fast_observer\fP *) const\fR [protected]\fP"

.SH "Friends And Related Symbol Documentation"
.PP 
.SS "\fBvoid\fP lshift (\fBsc_fxval_fast\fP & c, \fBconst\fP \fBsc_fxval_fast\fP & a, \fBint\fP b)\fR [friend]\fP"

.SS "\fBvoid\fP neg (\fBsc_fxval_fast\fP & c, \fBconst\fP \fBsc_fxval_fast\fP & a)\fR [friend]\fP"

.SS "\fBconst\fP \fBsc_fxval_fast\fP \fBoperator\fP/ (\fBconst\fP \fBsc_fxval_fast\fP & a, \fBconst\fP \fBsc_fxval_fast\fP & b)\fR [friend]\fP"

.SS "\fBconst\fP \fBsc_fxval_fast\fP \fBoperator\fP>> (\fBconst\fP \fBsc_fxval_fast\fP & a, \fBint\fP b)\fR [friend]\fP"

.SS "\fBvoid\fP rshift (\fBsc_fxval_fast\fP & c, \fBconst\fP \fBsc_fxval_fast\fP & a, \fBint\fP b)\fR [friend]\fP"

.SS "\fBfriend\fP \fBclass\fP \fBsc_fxnum_fast\fP\fR [friend]\fP"

.SH "Member Data Documentation"
.PP 
.SS "\fBuint64\fP \fBconst\fP \fBsc_uint_base\fP sc_dt::sc_fxval_fast::int"

.SS "\fBsc_fxval_fast_observer\fP* sc_dt::sc_fxval_fast::m_observer\fR [mutable]\fP, \fR [private]\fP"

.SS "\fBdouble\fP sc_dt::sc_fxval_fast::m_val\fR [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for VHDL simulator from the source code\&.
