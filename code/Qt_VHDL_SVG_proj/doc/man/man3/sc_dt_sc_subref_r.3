.TH "sc_dt::sc_subref_r< X >" 3 "VHDL simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sc_dt::sc_subref_r< X >
.SH SYNOPSIS
.br
.PP
.PP
\fR#include <sc_bit_proxies\&.h>\fP
.PP
Inherits \fBsc_dt::sc_proxy< sc_subref_r< X > >\fP\&.
.PP
Inherited by \fBsc_dt::sc_subref< X >\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBsc_proxy\fP< \fBsc_subref_r\fP< X > >::value_type \fBvalue_type\fP"
.br
.in -1c

Public Types inherited from \fBsc_dt::sc_proxy< sc_subref_r< X > >\fP
.in +1c
.ti -1c
.RI "\fBtypedef\fP \fBsc_proxy_traits\fP< X >::traits_type \fBtraits_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP traits_type::bit_type \fBbit_type\fP"
.br
.ti -1c
.RI "\fBtypedef\fP traits_type::value_type \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBsc_subref_r\fP (\fBconst\fP X &\fBobj_\fP, int \fBhi_\fP, int \fBlo_\fP)"
.br
.ti -1c
.RI "\fBsc_subref_r\fP (\fBconst\fP \fBsc_subref_r\fP< X > &\fBa\fP)"
.br
.ti -1c
.RI "\fBsc_subref_r\fP< X > * \fBclone\fP () \fBconst\fP"
.br
.ti -1c
.RI "int \fBlength\fP () \fBconst\fP"
.br
.ti -1c
.RI "int \fBsize\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvalue_type\fP \fBget_bit\fP (int \fBn\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBset_bit\fP (int \fBn\fP, \fBvalue_type\fP \fBvalue\fP)"
.br
.ti -1c
.RI "\fBsc_digit\fP \fBget_word\fP (int \fBi\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBset_word\fP (int \fBi\fP, \fBsc_digit\fP \fBw\fP)"
.br
.ti -1c
.RI "\fBsc_digit\fP \fBget_cword\fP (int \fBi\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBset_cword\fP (int \fBi\fP, \fBsc_digit\fP \fBw\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBclean_tail\fP ()"
.br
.ti -1c
.RI "\fBbool\fP \fBis_01\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBreversed\fP () \fBconst\fP"
.br
.in -1c

Public Member Functions inherited from \fBsc_dt::sc_proxy< sc_subref_r< X > >\fP
.in +1c
.ti -1c
.RI "\fBvirtual\fP \fB~sc_proxy\fP ()"
.br
.ti -1c
.RI "X & \fBback_cast\fP ()"
.br
.ti -1c
.RI "\fBconst\fP X & \fBback_cast\fP () \fBconst\fP"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBconst\fP \fBchar\fP *\fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBconst\fP \fBbool\fP *\fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBconst\fP \fBsc_logic\fP *\fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBconst\fP \fBsc_unsigned\fP &\fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBconst\fP \fBsc_signed\fP &\fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBconst\fP \fBsc_uint_base\fP &\fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBconst\fP \fBsc_int_base\fP &\fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBunsigned\fP int \fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (int \fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBunsigned\fP \fBlong\fP \fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBlong\fP \fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBuint64\fP \fBa\fP)"
.br
.ti -1c
.RI "X & \fBassign_\fP (\fBint64\fP \fBa\fP)"
.br
.ti -1c
.RI "X & \fBb_not\fP ()"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator~\fP () \fBconst\fP"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBconst\fP \fBchar\fP *b)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBconst\fP \fBbool\fP *b)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBconst\fP \fBsc_logic\fP *b)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBconst\fP \fBsc_unsigned\fP &b)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBconst\fP \fBsc_signed\fP &b)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBconst\fP \fBsc_uint_base\fP &b)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBconst\fP \fBsc_int_base\fP &b)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBunsigned\fP \fBlong\fP b)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBlong\fP b)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBunsigned\fP int b)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (int b)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBuint64\fP b)"
.br
.ti -1c
.RI "X & \fBoperator&=\fP (\fBint64\fP b)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBconst\fP \fBchar\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBconst\fP \fBbool\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBconst\fP \fBsc_logic\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBconst\fP \fBsc_unsigned\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBconst\fP \fBsc_signed\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBconst\fP \fBsc_uint_base\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBconst\fP \fBsc_int_base\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBunsigned\fP \fBlong\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBlong\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBunsigned\fP int b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (int b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBuint64\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator&\fP (\fBint64\fP b) \fBconst\fP"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBconst\fP \fBchar\fP *b)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBconst\fP \fBbool\fP *b)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBconst\fP \fBsc_logic\fP *b)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBconst\fP \fBsc_unsigned\fP &b)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBconst\fP \fBsc_signed\fP &b)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBconst\fP \fBsc_uint_base\fP &b)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBconst\fP \fBsc_int_base\fP &b)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBunsigned\fP \fBlong\fP b)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBlong\fP b)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBunsigned\fP int b)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (int b)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBuint64\fP b)"
.br
.ti -1c
.RI "X & \fBoperator|=\fP (\fBint64\fP b)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBconst\fP \fBchar\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBconst\fP \fBbool\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBconst\fP \fBsc_logic\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBconst\fP \fBsc_unsigned\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBconst\fP \fBsc_signed\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBconst\fP \fBsc_uint_base\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBconst\fP \fBsc_int_base\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBunsigned\fP \fBlong\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBlong\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBunsigned\fP int b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (int b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBuint64\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator|\fP (\fBint64\fP b) \fBconst\fP"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBconst\fP \fBchar\fP *b)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBconst\fP \fBbool\fP *b)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBconst\fP \fBsc_logic\fP *b)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBconst\fP \fBsc_unsigned\fP &b)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBconst\fP \fBsc_signed\fP &b)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBconst\fP \fBsc_uint_base\fP &b)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBconst\fP \fBsc_int_base\fP &b)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBunsigned\fP \fBlong\fP b)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBlong\fP b)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBunsigned\fP int b)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (int b)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBuint64\fP b)"
.br
.ti -1c
.RI "X & \fBoperator^=\fP (\fBint64\fP b)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBconst\fP \fBchar\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBconst\fP \fBbool\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBconst\fP \fBsc_logic\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBconst\fP \fBsc_unsigned\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBconst\fP \fBsc_signed\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBconst\fP \fBsc_uint_base\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBconst\fP \fBsc_int_base\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBunsigned\fP \fBlong\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBlong\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBunsigned\fP int b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (int b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBuint64\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator^\fP (\fBint64\fP b) \fBconst\fP"
.br
.ti -1c
.RI "X & \fBoperator<<=\fP (int \fBn\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator<<\fP (int \fBn\fP) \fBconst\fP"
.br
.ti -1c
.RI "X & \fBoperator>>=\fP (int \fBn\fP)"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_lv_base\fP \fBoperator>>\fP (int \fBn\fP) \fBconst\fP"
.br
.ti -1c
.RI "X & \fBlrotate\fP (int \fBn\fP)"
.br
.ti -1c
.RI "X & \fBrrotate\fP (int \fBn\fP)"
.br
.ti -1c
.RI "X & \fBreverse\fP ()"
.br
.ti -1c
.RI "\fBsc_bitref\fP< X > \fBoperator[]\fP (int \fBi\fP)"
.br
.ti -1c
.RI "\fBsc_bitref_r\fP< X > \fBoperator[]\fP (int \fBi\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_bitref\fP< X > \fBbit\fP (int \fBi\fP)"
.br
.ti -1c
.RI "\fBsc_bitref_r\fP< X > \fBbit\fP (int \fBi\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_subref\fP< X > \fBoperator()\fP (int \fBhi\fP, int \fBlo\fP)"
.br
.ti -1c
.RI "\fBsc_subref_r\fP< X > \fBoperator()\fP (int \fBhi\fP, int \fBlo\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_subref\fP< X > \fBrange\fP (int \fBhi\fP, int \fBlo\fP)"
.br
.ti -1c
.RI "\fBsc_subref_r\fP< X > \fBrange\fP (int \fBhi\fP, int \fBlo\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBvalue_type\fP \fBand_reduce\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvalue_type\fP \fBnand_reduce\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvalue_type\fP \fBor_reduce\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvalue_type\fP \fBnor_reduce\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvalue_type\fP \fBxor_reduce\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvalue_type\fP \fBxnor_reduce\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBchar\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBbool\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_logic\fP *b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_unsigned\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_signed\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_uint_base\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBsc_int_base\fP &b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBunsigned\fP \fBlong\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBlong\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBunsigned\fP int b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (int b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBuint64\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBint64\fP b) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP (\fBsc_numrep\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBconst\fP std::string \fBto_string\fP (\fBsc_numrep\fP, \fBbool\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBint64\fP \fBto_int64\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBuint64\fP \fBto_uint64\fP () \fBconst\fP"
.br
.ti -1c
.RI "int \fBto_int\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBunsigned\fP int \fBto_uint\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBlong\fP \fBto_long\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBunsigned\fP \fBlong\fP \fBto_ulong\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBprint\fP (::std::ostream &\fBos\fP=::std::cout) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBscan\fP (::std::istream &\fBis\fP=::std::cin)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "X & \fBm_obj\fP"
.br
.ti -1c
.RI "int \fBm_hi\fP"
.br
.ti -1c
.RI "int \fBm_lo\fP"
.br
.ti -1c
.RI "int \fBm_len\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBvoid\fP \fBcheck_bounds\fP ()"
.br
.ti -1c
.RI "\fBsc_subref_r\fP ()"
.br
.ti -1c
.RI "\fBsc_subref_r\fP< X > & \fBoperator=\fP (\fBconst\fP \fBsc_subref_r\fP< X > &)"
.br
.in -1c
.SS "Additional Inherited Members"


Protected Member Functions inherited from \fBsc_dt::sc_proxy< sc_subref_r< X > >\fP
.in +1c
.ti -1c
.RI "\fBvoid\fP \fBcheck_bounds\fP (int \fBn\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBcheck_wbounds\fP (int \fBn\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBsc_digit\fP \fBto_anything_unsigned\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBint64\fP \fBto_anything_signed\fP () \fBconst\fP"
.br
.in -1c
.SH "Member Typedef Documentation"
.PP 
.SS "template<\fBclass\fP X > \fBtypedef\fP \fBsc_proxy\fP<\fBsc_subref_r\fP<X>>::value_type \fBsc_dt::sc_subref_r\fP< X >::value_type"

.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<\fBclass\fP X > \fBsc_dt::sc_subref_r\fP< X >::sc_subref_r (\fBconst\fP X & obj_, int hi_, int lo_)\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBsc_dt::sc_subref_r\fP< X >::sc_subref_r (\fBconst\fP \fBsc_subref_r\fP< X > & a)\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBsc_dt::sc_subref_r\fP< X >::sc_subref_r ()\fR [private]\fP"

.SH "Member Function Documentation"
.PP 
.SS "template<\fBclass\fP X > \fBvoid\fP \fBsc_dt::sc_subref_r\fP< X >::check_bounds ()\fR [inline]\fP, \fR [private]\fP"

.SS "template<\fBclass\fP X > \fBvoid\fP \fBsc_dt::sc_subref_r\fP< X >::clean_tail ()\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBsc_subref_r\fP< X > * \fBsc_dt::sc_subref_r\fP< X >::clone () const\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBsc_subref_r\fP< X >\fB::value_type\fP \fBsc_dt::sc_subref_r\fP< X >::get_bit (int n) const\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBsc_digit\fP \fBsc_dt::sc_subref_r\fP< X >::get_cword (int i) const\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBsc_digit\fP \fBsc_dt::sc_subref_r\fP< X >::get_word (int i) const\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBbool\fP \fBsc_dt::sc_subref_r\fP< X >::is_01 () const\fR [inline]\fP"

.SS "template<\fBclass\fP X > int \fBsc_dt::sc_subref_r\fP< X >::length () const\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBsc_subref_r\fP< X > & \fBsc_dt::sc_subref_r\fP< X >\fB::operator\fP= (\fBconst\fP \fBsc_subref_r\fP< X > &)\fR [private]\fP"

.SS "template<\fBclass\fP X > \fBbool\fP \fBsc_dt::sc_subref_r\fP< X >::reversed () const\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBvoid\fP \fBsc_dt::sc_subref_r\fP< X >::set_bit (int n, \fBvalue_type\fP value)\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBvoid\fP \fBsc_dt::sc_subref_r\fP< X >::set_cword (int i, \fBsc_digit\fP w)\fR [inline]\fP"

.SS "template<\fBclass\fP X > \fBvoid\fP \fBsc_dt::sc_subref_r\fP< X >::set_word (int i, \fBsc_digit\fP w)\fR [inline]\fP"

.SS "template<\fBclass\fP X > int \fBsc_dt::sc_subref_r\fP< X >::size () const\fR [inline]\fP"

.SH "Member Data Documentation"
.PP 
.SS "template<\fBclass\fP X > int \fBsc_dt::sc_subref_r\fP< X >::m_hi\fR [protected]\fP"

.SS "template<\fBclass\fP X > int \fBsc_dt::sc_subref_r\fP< X >::m_len\fR [protected]\fP"

.SS "template<\fBclass\fP X > int \fBsc_dt::sc_subref_r\fP< X >::m_lo\fR [protected]\fP"

.SS "template<\fBclass\fP X > X& \fBsc_dt::sc_subref_r\fP< X >::m_obj\fR [protected]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for VHDL simulator from the source code\&.
