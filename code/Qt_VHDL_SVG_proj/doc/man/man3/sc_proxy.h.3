.TH "C:/Users/BJRODIER/Documents/QT_REPO/QT_VHDL_simulator/code/Ressources/SystemC/include/sysc/datatypes/bit/sc_proxy.h" 3 "VHDL simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/BJRODIER/Documents/QT_REPO/QT_VHDL_simulator/code/Ressources/SystemC/include/sysc/datatypes/bit/sc_proxy.h
.SH SYNOPSIS
.br
.PP
\fR#include 'sysc/kernel/sc_cmnhdr\&.h'\fP
.br
\fR#include 'sysc/datatypes/int/sc_signed\&.h'\fP
.br
\fR#include 'sysc/datatypes/int/sc_unsigned\&.h'\fP
.br
\fR#include 'sysc/datatypes/int/sc_int_base\&.h'\fP
.br
\fR#include 'sysc/datatypes/int/sc_uint_base\&.h'\fP
.br
\fR#include 'sysc/datatypes/bit/sc_bit\&.h'\fP
.br
\fR#include 'sysc/datatypes/bit/sc_bit_ids\&.h'\fP
.br
\fR#include 'sysc/datatypes/bit/sc_logic\&.h'\fP
.br
\fR#include 'sysc/kernel/sc_macros\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBsc_dt::sc_proxy_traits< sc_bv_base >\fP"
.br
.ti -1c
.RI "struct \fBsc_dt::sc_proxy_traits< sc_lv_base >\fP"
.br
.ti -1c
.RI "struct \fBsc_dt::sc_proxy_traits< sc_bitref_r< X > >\fP"
.br
.ti -1c
.RI "struct \fBsc_dt::sc_proxy_traits< sc_bitref< X > >\fP"
.br
.ti -1c
.RI "struct \fBsc_dt::sc_proxy_traits< sc_subref_r< X > >\fP"
.br
.ti -1c
.RI "struct \fBsc_dt::sc_proxy_traits< sc_subref< X > >\fP"
.br
.ti -1c
.RI "struct \fBsc_dt::sc_proxy_traits< sc_proxy< X > >\fP"
.br
.ti -1c
.RI "struct \fBsc_dt::sc_mixed_proxy_traits_helper< X, Y >\fP"
.br
.ti -1c
.RI "struct \fBsc_dt::sc_mixed_proxy_traits_helper< X, X >\fP"
.br
.ti -1c
.RI "struct \fBsc_dt::sc_proxy_traits< sc_concref_r< X, Y > >\fP"
.br
.ti -1c
.RI "struct \fBsc_dt::sc_proxy_traits< sc_concref< X, Y > >\fP"
.br
.ti -1c
.RI "class \fBsc_dt::sc_proxy< X >\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBsc_dt\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#\fBdefine\fP \fBDECL_BITWISE_AND_OP_T\fP(\fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDECL_BITWISE_OR_OP_T\fP(\fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDECL_BITWISE_XOR_OP_T\fP(\fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDECL_REL_OP_T\fP(\fBtp\fP)"
.br
.ti -1c
.RI "#\fBdefine\fP \fBDEFN_REL_OP_T\fP(\fBtp\fP)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBSC_API\fP \fBvoid\fP \fBsc_dt::sc_proxy_out_of_bounds\fP (\fBconst\fP \fBchar\fP *msg=\fBNULL\fP, \fBint64\fP \fBval\fP=0)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBvoid\fP \fBsc_dt::assign_p_\fP (\fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBpy\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBT\fP > \fBvoid\fP \fBsc_dt::assign_v_\fP (\fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBT\fP &\fBa\fP)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBconst\fP std::string \fBsc_dt::convert_to_bin\fP (\fBconst\fP \fBchar\fP *s)"
.br
.ti -1c
.RI "\fBSC_API\fP \fBconst\fP std::string \fBsc_dt::convert_to_fmt\fP (\fBconst\fP std::string &s, \fBsc_numrep\fP \fBnumrep\fP, \fBbool\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > X & \fBsc_dt::operator&=\fP (\fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBpy\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::operator&\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBpy\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > X & \fBsc_dt::operator|=\fP (\fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBpy\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::operator|\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBpy\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > X & \fBsc_dt::operator^=\fP (\fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBpy\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::operator^\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBpy\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBbool\fP \fBsc_dt::operator==\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBpy\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > \fBbool\fP \fBsc_dt::operator!=\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBpy\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBvoid\fP \fBsc_dt::get_words_\fP (\fBconst\fP X &\fBx\fP, int wi, \fBsc_digit\fP &\fBx_dw\fP, \fBsc_digit\fP &\fBx_cw\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBvoid\fP \fBsc_dt::set_words_\fP (X &\fBx\fP, int wi, \fBsc_digit\fP \fBx_dw\fP, \fBsc_digit\fP \fBx_cw\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBvoid\fP \fBsc_dt::extend_sign_w_\fP (X &\fBx\fP, int wi, \fBbool\fP sign)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBvoid\fP \fBsc_dt::assign_v_\fP (\fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_int_base\fP &\fBa\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBvoid\fP \fBsc_dt::assign_v_\fP (\fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_signed\fP &\fBa\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBvoid\fP \fBsc_dt::assign_v_\fP (\fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_uint_base\fP &\fBa\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBvoid\fP \fBsc_dt::assign_v_\fP (\fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_unsigned\fP &\fBa\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > X & \fBsc_dt::b_and_assign_\fP (\fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBpy\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > X & \fBsc_dt::b_or_assign_\fP (\fBsc_proxy\fP< X > &\fBpx\fP, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBpy\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X , \fBclass\fP \fBY\fP > X & \fBsc_dt::b_xor_assign_\fP (\fBsc_proxy\fP< X > &\fBa\fP, \fBconst\fP \fBsc_proxy\fP< \fBY\fP > &\fBb\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::lrotate\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBx\fP, int \fBn\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::rrotate\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBx\fP, int \fBn\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBconst\fP \fBsc_lv_base\fP \fBsc_dt::reverse\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBx\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBsc_proxy\fP< X >::value_type \fBsc_dt::and_reduce\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBa\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBsc_proxy\fP< X >::value_type \fBsc_dt::nand_reduce\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBa\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBsc_proxy\fP< X >::value_type \fBsc_dt::or_reduce\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBa\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBsc_proxy\fP< X >::value_type \fBsc_dt::nor_reduce\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBa\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBsc_proxy\fP< X >::value_type \fBsc_dt::xor_reduce\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBa\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > \fBsc_proxy\fP< X >::value_type \fBsc_dt::xnor_reduce\fP (\fBconst\fP \fBsc_proxy\fP< X > &\fBa\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > inline::std::ostream & \fBsc_dt::operator<<\fP (::std::ostream &\fBos\fP, \fBconst\fP \fBsc_proxy\fP< X > &\fBa\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP X > inline::std::istream & \fBsc_dt::operator>>\fP (::std::istream &\fBis\fP, \fBsc_proxy\fP< X > &\fBa\fP)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBconst\fP int \fBsc_dt::SC_DIGIT_SIZE\fP = \fBBITS_PER_BYTE\fP * \fBsizeof\fP( \fBsc_digit\fP )"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_digit\fP \fBsc_dt::SC_DIGIT_ZERO\fP = (\fBsc_digit\fP)0"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_digit\fP \fBsc_dt::SC_DIGIT_ONE\fP = (\fBsc_digit\fP)1"
.br
.ti -1c
.RI "\fBconst\fP \fBsc_digit\fP \fBsc_dt::SC_DIGIT_TWO\fP = (\fBsc_digit\fP)2"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#\fBdefine\fP DECL_BITWISE_AND_OP_T(\fBtp\fP)"
\fBValue:\fP.PP
.nf
template <class X>                                                            \\
inline                                                                        \\
const sc_lv_base                                                              \\
operator & ( tp b, const sc_proxy<X>& px );
.fi

.SS "#\fBdefine\fP DECL_BITWISE_OR_OP_T(\fBtp\fP)"
\fBValue:\fP.PP
.nf
template <class X>                                                            \\
inline                                                                        \\
const sc_lv_base                                                              \\
operator | ( tp a, const sc_proxy<X>& px );
.fi

.SS "#\fBdefine\fP DECL_BITWISE_XOR_OP_T(\fBtp\fP)"
\fBValue:\fP.PP
.nf
template <class X>                                                            \\
inline                                                                        \\
const sc_lv_base                                                              \\
operator ^ ( tp a, const sc_proxy<X>& px );
.fi

.SS "#\fBdefine\fP DECL_REL_OP_T(\fBtp\fP)"
\fBValue:\fP.PP
.nf
template <class X>                                                            \\
inline                                                                        \\
bool                                                                          \\
operator == ( tp b, const sc_proxy<X>& px );                                  \\
                                                                              \\
template <class X>                                                            \\
inline                                                                        \\
bool                                                                          \\
operator != ( const sc_proxy<X>& px, tp b );                                  \\
                                                                              \\
template <class X>                                                            \\
inline                                                                        \\
bool                                                                          \\
operator != ( tp b, const sc_proxy<X>& px );
.fi

.SS "#\fBdefine\fP DEFN_REL_OP_T(\fBtp\fP)"
\fBValue:\fP.PP
.nf
template <class X>                                                            \\
inline                                                                        \\
bool                                                                          \\
operator == ( tp b, const sc_proxy<X>& px )                                   \\
{                                                                             \\
    return ( px == b );                                                       \\
}                                                                             \\
                                                                              \\
template <class X>                                                            \\
inline                                                                        \\
bool                                                                          \\
operator != ( const sc_proxy<X>& px, tp b )                                   \\
{                                                                             \\
    return !( px == b );                                                      \\
}                                                                             \\
                                                                              \\
template <class X>                                                            \\
inline                                                                        \\
bool                                                                          \\
operator != ( tp b, const sc_proxy<X>& px )                                   \\
{                                                                             \\
    return !( px == b );                                                      \\
}
.fi

.SH "Author"
.PP 
Generated automatically by Doxygen for VHDL simulator from the source code\&.
